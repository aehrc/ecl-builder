// Generated from /Users/gri306/Code/ecl-builder/src/grammar/syntax/ECL.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from "antlr4";
import ECLListener from "./ECLListener.js";
import ECLVisitor from "./ECLVisitor.js";

const serializedATN = [
  4, 1, 99, 2318, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2,
  5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11,
  7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16,
  2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22,
  7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27,
  2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33,
  7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38,
  2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44,
  7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49,
  2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55,
  7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60,
  2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66,
  7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71,
  2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77,
  7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82,
  2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88,
  7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93,
  2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99,
  7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104,
  7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2,
  109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113, 7, 113,
  2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2, 118, 7,
  118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123,
  7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2,
  128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132,
  2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135, 2, 136, 7, 136, 2, 137, 7,
  137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142,
  7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2,
  147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151,
  2, 152, 7, 152, 2, 153, 7, 153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7,
  156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161,
  7, 161, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, 330, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 3, 2, 343, 8, 2, 1, 3, 1, 3, 1, 3,
  1, 3, 1, 3, 1, 3, 4, 3, 351, 8, 3, 11, 3, 12, 3, 352, 1, 4, 1, 4, 1, 4, 1, 4,
  1, 4, 1, 4, 4, 4, 361, 8, 4, 11, 4, 12, 4, 362, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5,
  1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 4, 6, 375, 8, 6, 11, 6, 12, 6, 376, 1, 7, 1, 7,
  1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 3, 8, 386, 8, 8, 1, 8, 1, 8, 1, 8, 3, 8, 391, 8,
  8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 400, 8, 8, 1, 8, 1, 8, 1,
  8, 5, 8, 405, 8, 8, 10, 8, 12, 8, 408, 9, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1,
  8, 1, 8, 3, 8, 417, 8, 8, 3, 8, 419, 8, 8, 1, 8, 1, 8, 1, 8, 3, 8, 424, 8, 8,
  5, 8, 426, 8, 8, 10, 8, 12, 8, 429, 9, 8, 1, 8, 1, 8, 1, 8, 3, 8, 434, 8, 8,
  1, 9, 1, 9, 3, 9, 438, 8, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
  1, 11, 3, 11, 448, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 453, 8, 11, 1, 12, 1,
  12, 1, 12, 1, 12, 1, 12, 1, 12, 5, 12, 461, 8, 12, 10, 12, 12, 12, 464, 9, 12,
  1, 13, 1, 13, 3, 13, 468, 8, 13, 1, 14, 4, 14, 471, 8, 14, 11, 14, 12, 14,
  472, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3,
  16, 485, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 4, 17, 493, 8, 17,
  11, 17, 12, 17, 494, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 4, 19, 503, 8,
  19, 11, 19, 12, 19, 504, 1, 19, 4, 19, 508, 8, 19, 11, 19, 12, 19, 509, 1, 19,
  4, 19, 513, 8, 19, 11, 19, 12, 19, 514, 5, 19, 517, 8, 19, 10, 19, 12, 19,
  520, 9, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1,
  21, 3, 21, 532, 8, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24,
  1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28,
  1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 3, 30, 560, 8, 30, 1, 30, 1,
  30, 3, 30, 564, 8, 30, 1, 30, 1, 30, 3, 30, 568, 8, 30, 1, 30, 1, 30, 3, 30,
  572, 8, 30, 1, 31, 1, 31, 3, 31, 576, 8, 31, 1, 31, 1, 31, 3, 31, 580, 8, 31,
  1, 31, 1, 31, 1, 32, 1, 32, 3, 32, 586, 8, 32, 1, 32, 1, 32, 3, 32, 590, 8,
  32, 1, 32, 1, 32, 3, 32, 594, 8, 32, 1, 32, 1, 32, 3, 32, 598, 8, 32, 1, 32,
  1, 32, 3, 32, 602, 8, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33,
  610, 8, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 4, 34, 617, 8, 34, 11, 34, 12,
  34, 618, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 4, 35, 626, 8, 35, 11, 35, 12, 35,
  627, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 638, 8,
  36, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 644, 8, 37, 1, 38, 1, 38, 1, 38, 1, 38,
  1, 38, 4, 38, 651, 8, 38, 11, 38, 12, 38, 652, 1, 39, 1, 39, 1, 39, 1, 39, 1,
  39, 4, 39, 660, 8, 39, 11, 39, 12, 39, 661, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40,
  1, 40, 1, 40, 3, 40, 671, 8, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41,
  678, 8, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1,
  42, 1, 42, 3, 42, 691, 8, 42, 1, 42, 1, 42, 1, 42, 3, 42, 696, 8, 42, 1, 42,
  1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42,
  1, 42, 1, 42, 1, 42, 3, 42, 713, 8, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42,
  719, 8, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1,
  46, 1, 46, 3, 46, 732, 8, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50,
  1, 50, 1, 50, 3, 50, 743, 8, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
  51, 1, 51, 1, 51, 3, 51, 754, 8, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52,
  1, 52, 1, 52, 1, 52, 3, 52, 765, 8, 52, 1, 53, 1, 53, 1, 53, 3, 53, 770, 8,
  53, 1, 54, 1, 54, 1, 54, 3, 54, 775, 8, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55,
  1, 55, 3, 55, 783, 8, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 5,
  55, 792, 8, 55, 10, 55, 12, 55, 795, 9, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56,
  1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 808, 8, 56, 1, 57, 1, 57, 1,
  57, 1, 57, 1, 57, 1, 57, 3, 57, 816, 8, 57, 1, 58, 1, 58, 3, 58, 820, 8, 58,
  1, 58, 1, 58, 3, 58, 824, 8, 58, 1, 58, 1, 58, 3, 58, 828, 8, 58, 1, 58, 1,
  58, 3, 58, 832, 8, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 839, 8, 59,
  1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 848, 8, 59, 1, 60, 1,
  60, 1, 60, 1, 60, 1, 60, 1, 60, 5, 60, 856, 8, 60, 10, 60, 12, 60, 859, 9, 60,
  1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 3, 61, 866, 8, 61, 1, 61, 1, 61, 3, 61,
  870, 8, 61, 1, 61, 1, 61, 3, 61, 874, 8, 61, 1, 61, 1, 61, 3, 61, 878, 8, 61,
  1, 62, 1, 62, 3, 62, 882, 8, 62, 1, 62, 1, 62, 3, 62, 886, 8, 62, 1, 62, 1,
  62, 3, 62, 890, 8, 62, 1, 62, 1, 62, 3, 62, 894, 8, 62, 1, 62, 1, 62, 3, 62,
  898, 8, 62, 1, 63, 1, 63, 4, 63, 902, 8, 63, 11, 63, 12, 63, 903, 1, 64, 1,
  64, 1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 912, 8, 64, 10, 64, 12, 64, 915, 9, 64,
  1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 4, 65, 922, 8, 65, 11, 65, 12, 65, 923, 1,
  66, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 936,
  8, 67, 1, 68, 1, 68, 3, 68, 940, 8, 68, 1, 68, 1, 68, 3, 68, 944, 8, 68, 1,
  68, 1, 68, 3, 68, 948, 8, 68, 1, 68, 1, 68, 3, 68, 952, 8, 68, 1, 68, 1, 68,
  3, 68, 956, 8, 68, 1, 68, 1, 68, 3, 68, 960, 8, 68, 1, 68, 1, 68, 3, 68, 964,
  8, 68, 1, 68, 1, 68, 3, 68, 968, 8, 68, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1,
  70, 1, 70, 1, 70, 1, 70, 5, 70, 979, 8, 70, 10, 70, 12, 70, 982, 9, 70, 1, 70,
  1, 70, 1, 70, 1, 71, 1, 71, 3, 71, 989, 8, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1,
  72, 1, 72, 3, 72, 997, 8, 72, 1, 73, 1, 73, 3, 73, 1001, 8, 73, 1, 73, 1, 73,
  3, 73, 1005, 8, 73, 1, 73, 1, 73, 3, 73, 1009, 8, 73, 1, 73, 1, 73, 3, 73,
  1013, 8, 73, 1, 73, 1, 73, 3, 73, 1017, 8, 73, 1, 73, 1, 73, 3, 73, 1021, 8,
  73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1029, 8, 74, 1, 75, 1,
  75, 3, 75, 1033, 8, 75, 1, 75, 1, 75, 3, 75, 1037, 8, 75, 1, 75, 1, 75, 3, 75,
  1041, 8, 75, 1, 75, 1, 75, 3, 75, 1045, 8, 75, 1, 76, 1, 76, 1, 76, 3, 76,
  1050, 8, 76, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 5, 77, 1058, 8, 77, 10,
  77, 12, 77, 1061, 9, 77, 1, 77, 1, 77, 1, 77, 1, 78, 1, 78, 3, 78, 1068, 8,
  78, 1, 78, 1, 78, 3, 78, 1072, 8, 78, 1, 78, 1, 78, 3, 78, 1076, 8, 78, 1, 79,
  1, 79, 3, 79, 1080, 8, 79, 1, 79, 1, 79, 3, 79, 1084, 8, 79, 1, 79, 1, 79, 3,
  79, 1088, 8, 79, 1, 80, 1, 80, 3, 80, 1092, 8, 80, 1, 80, 1, 80, 3, 80, 1096,
  8, 80, 1, 80, 1, 80, 3, 80, 1100, 8, 80, 1, 81, 1, 81, 3, 81, 1104, 8, 81, 1,
  81, 1, 81, 1, 81, 3, 81, 1109, 8, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1,
  82, 3, 82, 1117, 8, 82, 1, 83, 1, 83, 3, 83, 1121, 8, 83, 1, 83, 1, 83, 3, 83,
  1125, 8, 83, 1, 83, 1, 83, 3, 83, 1129, 8, 83, 1, 83, 1, 83, 3, 83, 1133, 8,
  83, 1, 83, 1, 83, 3, 83, 1137, 8, 83, 1, 83, 1, 83, 3, 83, 1141, 8, 83, 1, 83,
  1, 83, 3, 83, 1145, 8, 83, 1, 83, 1, 83, 3, 83, 1149, 8, 83, 1, 83, 1, 83, 3,
  83, 1153, 8, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 3, 84, 1161, 8, 84,
  1, 85, 1, 85, 3, 85, 1165, 8, 85, 1, 85, 1, 85, 3, 85, 1169, 8, 85, 1, 85, 1,
  85, 3, 85, 1173, 8, 85, 1, 85, 1, 85, 3, 85, 1177, 8, 85, 1, 85, 1, 85, 3, 85,
  1181, 8, 85, 1, 85, 1, 85, 3, 85, 1185, 8, 85, 1, 85, 1, 85, 3, 85, 1189, 8,
  85, 1, 86, 1, 86, 1, 86, 1, 86, 5, 86, 1195, 8, 86, 10, 86, 12, 86, 1198, 9,
  86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 3, 87, 1206, 8, 87, 1, 87, 1,
  87, 1, 87, 1, 87, 1, 87, 3, 87, 1213, 8, 87, 5, 87, 1215, 8, 87, 10, 87, 12,
  87, 1218, 9, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1,
  88, 3, 88, 1229, 8, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 3, 88, 1236, 8, 88,
  5, 88, 1238, 8, 88, 10, 88, 12, 88, 1241, 9, 88, 1, 88, 1, 88, 1, 88, 1, 89,
  1, 89, 3, 89, 1248, 8, 89, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 5, 90,
  1256, 8, 90, 10, 90, 12, 90, 1259, 9, 90, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91,
  1, 91, 1, 91, 1, 91, 1, 91, 5, 91, 1270, 8, 91, 10, 91, 12, 91, 1273, 9, 91,
  1, 91, 1, 91, 1, 91, 1, 92, 1, 92, 3, 92, 1280, 8, 92, 1, 93, 1, 93, 3, 93,
  1284, 8, 93, 1, 93, 1, 93, 3, 93, 1288, 8, 93, 1, 93, 1, 93, 3, 93, 1292, 8,
  93, 1, 93, 1, 93, 3, 93, 1296, 8, 93, 1, 93, 1, 93, 3, 93, 1300, 8, 93, 1, 93,
  1, 93, 3, 93, 1304, 8, 93, 1, 94, 1, 94, 3, 94, 1308, 8, 94, 1, 94, 1, 94, 3,
  94, 1312, 8, 94, 1, 94, 1, 94, 3, 94, 1316, 8, 94, 1, 94, 1, 94, 3, 94, 1320,
  8, 94, 1, 94, 1, 94, 3, 94, 1324, 8, 94, 1, 94, 1, 94, 3, 94, 1328, 8, 94, 1,
  95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 3, 95, 1336, 8, 95, 1, 95, 1, 95, 1,
  95, 1, 95, 1, 95, 1, 95, 1, 95, 5, 95, 1345, 8, 95, 10, 95, 12, 95, 1348, 9,
  95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 96, 1, 96, 1, 96, 1, 96, 3, 96, 1358, 8,
  96, 1, 97, 1, 97, 3, 97, 1362, 8, 97, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1,
  98, 3, 98, 1370, 8, 98, 1, 99, 1, 99, 3, 99, 1374, 8, 99, 1, 99, 1, 99, 3, 99,
  1378, 8, 99, 1, 99, 1, 99, 3, 99, 1382, 8, 99, 1, 99, 1, 99, 3, 99, 1386, 8,
  99, 1, 99, 1, 99, 3, 99, 1390, 8, 99, 1, 99, 1, 99, 3, 99, 1394, 8, 99, 1, 99,
  1, 99, 3, 99, 1398, 8, 99, 1, 99, 1, 99, 3, 99, 1402, 8, 99, 1, 99, 1, 99, 3,
  99, 1406, 8, 99, 1, 99, 1, 99, 3, 99, 1410, 8, 99, 1, 99, 1, 99, 3, 99, 1414,
  8, 99, 1, 99, 1, 99, 3, 99, 1418, 8, 99, 1, 99, 1, 99, 3, 99, 1422, 8, 99, 1,
  99, 1, 99, 3, 99, 1426, 8, 99, 1, 99, 1, 99, 3, 99, 1430, 8, 99, 1, 99, 1, 99,
  3, 99, 1434, 8, 99, 1, 99, 1, 99, 3, 99, 1438, 8, 99, 1, 99, 1, 99, 3, 99,
  1442, 8, 99, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 3, 100, 1450, 8,
  100, 1, 101, 1, 101, 3, 101, 1454, 8, 101, 1, 101, 1, 101, 3, 101, 1458, 8,
  101, 1, 101, 1, 101, 3, 101, 1462, 8, 101, 1, 101, 1, 101, 3, 101, 1466, 8,
  101, 1, 101, 1, 101, 3, 101, 1470, 8, 101, 1, 101, 1, 101, 3, 101, 1474, 8,
  101, 1, 101, 1, 101, 3, 101, 1478, 8, 101, 1, 101, 1, 101, 3, 101, 1482, 8,
  101, 1, 101, 1, 101, 3, 101, 1486, 8, 101, 1, 101, 1, 101, 3, 101, 1490, 8,
  101, 1, 101, 1, 101, 3, 101, 1494, 8, 101, 1, 101, 1, 101, 3, 101, 1498, 8,
  101, 1, 101, 1, 101, 3, 101, 1502, 8, 101, 1, 101, 1, 101, 3, 101, 1506, 8,
  101, 1, 101, 1, 101, 3, 101, 1510, 8, 101, 1, 101, 1, 101, 3, 101, 1514, 8,
  101, 1, 102, 1, 102, 3, 102, 1518, 8, 102, 1, 103, 1, 103, 1, 103, 1, 103, 1,
  103, 1, 103, 5, 103, 1526, 8, 103, 10, 103, 12, 103, 1529, 9, 103, 1, 103, 1,
  103, 1, 103, 1, 104, 1, 104, 3, 104, 1536, 8, 104, 1, 104, 1, 104, 3, 104,
  1540, 8, 104, 1, 104, 1, 104, 3, 104, 1544, 8, 104, 1, 104, 1, 104, 3, 104,
  1548, 8, 104, 1, 104, 1, 104, 3, 104, 1552, 8, 104, 1, 104, 1, 104, 3, 104,
  1556, 8, 104, 1, 104, 1, 104, 3, 104, 1560, 8, 104, 1, 104, 1, 104, 3, 104,
  1564, 8, 104, 1, 104, 1, 104, 3, 104, 1568, 8, 104, 1, 105, 1, 105, 3, 105,
  1572, 8, 105, 1, 105, 1, 105, 3, 105, 1576, 8, 105, 1, 105, 1, 105, 3, 105,
  1580, 8, 105, 1, 105, 1, 105, 3, 105, 1584, 8, 105, 1, 105, 1, 105, 3, 105,
  1588, 8, 105, 1, 105, 1, 105, 3, 105, 1592, 8, 105, 1, 105, 1, 105, 3, 105,
  1596, 8, 105, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 3, 106, 1604, 8,
  106, 1, 107, 1, 107, 3, 107, 1608, 8, 107, 1, 107, 1, 107, 3, 107, 1612, 8,
  107, 1, 107, 1, 107, 3, 107, 1616, 8, 107, 1, 107, 1, 107, 3, 107, 1620, 8,
  107, 1, 107, 1, 107, 3, 107, 1624, 8, 107, 1, 107, 1, 107, 3, 107, 1628, 8,
  107, 1, 107, 1, 107, 3, 107, 1632, 8, 107, 1, 107, 1, 107, 3, 107, 1636, 8,
  107, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 3, 108, 1644, 8, 108, 1,
  109, 1, 109, 3, 109, 1648, 8, 109, 1, 109, 1, 109, 3, 109, 1652, 8, 109, 1,
  109, 1, 109, 3, 109, 1656, 8, 109, 1, 109, 1, 109, 3, 109, 1660, 8, 109, 1,
  109, 1, 109, 3, 109, 1664, 8, 109, 1, 109, 1, 109, 3, 109, 1668, 8, 109, 1,
  109, 1, 109, 3, 109, 1672, 8, 109, 1, 109, 1, 109, 3, 109, 1676, 8, 109, 1,
  109, 1, 109, 3, 109, 1680, 8, 109, 1, 109, 1, 109, 3, 109, 1684, 8, 109, 1,
  109, 1, 109, 3, 109, 1688, 8, 109, 1, 109, 1, 109, 3, 109, 1692, 8, 109, 1,
  109, 1, 109, 3, 109, 1696, 8, 109, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 3,
  110, 1703, 8, 110, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1,
  111, 5, 111, 1713, 8, 111, 10, 111, 12, 111, 1716, 9, 111, 1, 111, 1, 111, 1,
  111, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 1, 113,
  1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1,
  113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113,
  1, 113, 3, 113, 1750, 8, 113, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114,
  1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1,
  114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114,
  1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1,
  114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114,
  1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1,
  114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 3, 114,
  1814, 8, 114, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 116, 1, 116,
  3, 116, 1824, 8, 116, 1, 116, 1, 116, 3, 116, 1828, 8, 116, 1, 116, 1, 116, 3,
  116, 1832, 8, 116, 1, 116, 1, 116, 3, 116, 1836, 8, 116, 1, 116, 1, 116, 3,
  116, 1840, 8, 116, 1, 116, 1, 116, 3, 116, 1844, 8, 116, 1, 117, 1, 117, 3,
  117, 1848, 8, 117, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 3, 118, 1855, 8,
  118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 1863, 8, 119, 1,
  120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 1871, 8, 120, 1, 120, 1,
  120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 5, 120, 1880, 8, 120, 10, 120,
  12, 120, 1883, 9, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121,
  1, 121, 3, 121, 1893, 8, 121, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122,
  1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 3,
  122, 1910, 8, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1,
  122, 1, 122, 3, 122, 1921, 8, 122, 3, 122, 1923, 8, 122, 1, 123, 1, 123, 1,
  123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 3, 123,
  1936, 8, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 124, 1, 124, 3, 124, 1944, 8,
  124, 1, 124, 1, 124, 3, 124, 1948, 8, 124, 1, 124, 1, 124, 3, 124, 1952, 8,
  124, 1, 124, 1, 124, 3, 124, 1956, 8, 124, 1, 124, 1, 124, 3, 124, 1960, 8,
  124, 1, 124, 1, 124, 3, 124, 1964, 8, 124, 1, 124, 1, 124, 3, 124, 1968, 8,
  124, 1, 125, 1, 125, 1, 125, 3, 125, 1973, 8, 125, 1, 126, 1, 126, 1, 126, 3,
  126, 1978, 8, 126, 1, 126, 1, 126, 3, 126, 1982, 8, 126, 1, 126, 1, 126, 3,
  126, 1986, 8, 126, 1, 127, 1, 127, 1, 127, 3, 127, 1991, 8, 127, 1, 127, 1,
  127, 3, 127, 1995, 8, 127, 1, 127, 1, 127, 3, 127, 1999, 8, 127, 1, 128, 1,
  128, 1, 128, 3, 128, 2004, 8, 128, 1, 128, 1, 128, 3, 128, 2008, 8, 128, 1,
  128, 1, 128, 3, 128, 2012, 8, 128, 1, 129, 1, 129, 1, 129, 1, 129, 1, 129, 1,
  129, 1, 130, 3, 130, 2021, 8, 130, 1, 130, 1, 130, 3, 130, 2025, 8, 130, 1,
  131, 1, 131, 4, 131, 2029, 8, 131, 11, 131, 12, 131, 2030, 1, 132, 1, 132, 5,
  132, 2035, 8, 132, 10, 132, 12, 132, 2038, 9, 132, 1, 132, 3, 132, 2041, 8,
  132, 1, 133, 1, 133, 1, 133, 4, 133, 2046, 8, 133, 11, 133, 12, 133, 2047, 1,
  134, 1, 134, 3, 134, 2052, 8, 134, 1, 135, 1, 135, 3, 135, 2056, 8, 135, 1,
  135, 1, 135, 3, 135, 2060, 8, 135, 1, 135, 1, 135, 3, 135, 2064, 8, 135, 1,
  135, 1, 135, 3, 135, 2068, 8, 135, 1, 136, 1, 136, 3, 136, 2072, 8, 136, 1,
  136, 1, 136, 3, 136, 2076, 8, 136, 1, 136, 1, 136, 3, 136, 2080, 8, 136, 1,
  136, 1, 136, 3, 136, 2084, 8, 136, 1, 136, 1, 136, 3, 136, 2088, 8, 136, 1,
  137, 1, 137, 5, 137, 2092, 8, 137, 10, 137, 12, 137, 2095, 9, 137, 1, 137, 3,
  137, 2098, 8, 137, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1,
  138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138,
  1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1,
  138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138,
  1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1,
  138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138,
  1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1,
  138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138,
  1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1,
  138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138,
  1, 138, 1, 138, 3, 138, 2195, 8, 138, 3, 138, 2197, 8, 138, 1, 139, 1, 139, 1,
  139, 1, 139, 1, 139, 5, 139, 2204, 8, 139, 10, 139, 12, 139, 2207, 9, 139, 1,
  140, 1, 140, 1, 140, 1, 140, 1, 140, 4, 140, 2214, 8, 140, 11, 140, 12, 140,
  2215, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 5, 141, 2223, 8, 141, 10, 141,
  12, 141, 2226, 9, 141, 1, 141, 1, 141, 1, 141, 1, 142, 1, 142, 1, 142, 1, 142,
  1, 142, 1, 142, 1, 142, 3, 142, 2238, 8, 142, 1, 143, 1, 143, 1, 143, 1, 144,
  1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 1, 144, 3, 144, 2250, 8, 144, 1, 145,
  1, 145, 1, 146, 1, 146, 1, 147, 1, 147, 1, 148, 1, 148, 1, 149, 1, 149, 1,
  150, 1, 150, 1, 151, 1, 151, 1, 152, 1, 152, 1, 153, 1, 153, 1, 154, 1, 154,
  1, 155, 1, 155, 1, 155, 3, 155, 2275, 8, 155, 1, 156, 1, 156, 1, 156, 1, 156,
  1, 156, 1, 156, 1, 156, 1, 156, 3, 156, 2285, 8, 156, 1, 157, 1, 157, 1, 157,
  1, 157, 1, 157, 1, 157, 3, 157, 2293, 8, 157, 1, 158, 1, 158, 1, 158, 1, 158,
  1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 3, 158, 2304, 8, 158, 1, 159, 1, 159,
  1, 159, 1, 159, 3, 159, 2310, 8, 159, 1, 160, 1, 160, 3, 160, 2314, 8, 160, 1,
  161, 1, 161, 1, 161, 0, 0, 162, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
  26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
  64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,
  102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130,
  132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160,
  162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190,
  192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220,
  222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250,
  252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280,
  282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310,
  312, 314, 316, 318, 320, 322, 0, 36, 2, 0, 38, 38, 70, 70, 2, 0, 51, 51, 83,
  83, 2, 0, 41, 41, 73, 73, 2, 0, 52, 52, 84, 84, 2, 0, 55, 55, 87, 87, 2, 0,
  50, 50, 82, 82, 2, 0, 46, 46, 78, 78, 2, 0, 58, 58, 90, 90, 2, 0, 56, 56, 88,
  88, 2, 0, 57, 57, 89, 89, 2, 0, 42, 42, 74, 74, 2, 0, 60, 60, 92, 92, 2, 0,
  49, 49, 81, 81, 2, 0, 40, 40, 72, 72, 2, 0, 45, 45, 77, 77, 2, 0, 44, 44, 76,
  76, 2, 0, 62, 62, 94, 94, 2, 0, 53, 53, 85, 85, 2, 0, 43, 43, 75, 75, 2, 0,
  59, 59, 91, 91, 2, 0, 18, 18, 68, 68, 2, 0, 61, 61, 93, 93, 2, 0, 16, 16, 18,
  18, 1, 0, 6, 14, 1, 0, 16, 99, 1, 0, 6, 19, 1, 0, 21, 99, 1, 0, 21, 30, 1, 0,
  22, 30, 1, 0, 6, 96, 1, 0, 98, 99, 1, 0, 5, 6, 1, 0, 8, 64, 1, 0, 66, 99, 1,
  0, 38, 63, 1, 0, 70, 95, 2582, 0, 324, 1, 0, 0, 0, 2, 333, 1, 0, 0, 0, 4, 342,
  1, 0, 0, 0, 6, 344, 1, 0, 0, 0, 8, 354, 1, 0, 0, 0, 10, 364, 1, 0, 0, 0, 12,
  370, 1, 0, 0, 0, 14, 378, 1, 0, 0, 0, 16, 385, 1, 0, 0, 0, 18, 437, 1, 0, 0,
  0, 20, 439, 1, 0, 0, 0, 22, 441, 1, 0, 0, 0, 24, 454, 1, 0, 0, 0, 26, 467, 1,
  0, 0, 0, 28, 470, 1, 0, 0, 0, 30, 474, 1, 0, 0, 0, 32, 476, 1, 0, 0, 0, 34,
  486, 1, 0, 0, 0, 36, 499, 1, 0, 0, 0, 38, 502, 1, 0, 0, 0, 40, 521, 1, 0, 0,
  0, 42, 531, 1, 0, 0, 0, 44, 533, 1, 0, 0, 0, 46, 535, 1, 0, 0, 0, 48, 538, 1,
  0, 0, 0, 50, 541, 1, 0, 0, 0, 52, 545, 1, 0, 0, 0, 54, 547, 1, 0, 0, 0, 56,
  550, 1, 0, 0, 0, 58, 553, 1, 0, 0, 0, 60, 571, 1, 0, 0, 0, 62, 575, 1, 0, 0,
  0, 64, 585, 1, 0, 0, 0, 66, 605, 1, 0, 0, 0, 68, 616, 1, 0, 0, 0, 70, 625, 1,
  0, 0, 0, 72, 637, 1, 0, 0, 0, 74, 639, 1, 0, 0, 0, 76, 650, 1, 0, 0, 0, 78,
  659, 1, 0, 0, 0, 80, 670, 1, 0, 0, 0, 82, 677, 1, 0, 0, 0, 84, 690, 1, 0, 0,
  0, 86, 720, 1, 0, 0, 0, 88, 724, 1, 0, 0, 0, 90, 726, 1, 0, 0, 0, 92, 731, 1,
  0, 0, 0, 94, 733, 1, 0, 0, 0, 96, 735, 1, 0, 0, 0, 98, 737, 1, 0, 0, 0, 100,
  742, 1, 0, 0, 0, 102, 753, 1, 0, 0, 0, 104, 764, 1, 0, 0, 0, 106, 769, 1, 0,
  0, 0, 108, 774, 1, 0, 0, 0, 110, 776, 1, 0, 0, 0, 112, 807, 1, 0, 0, 0, 114,
  809, 1, 0, 0, 0, 116, 819, 1, 0, 0, 0, 118, 847, 1, 0, 0, 0, 120, 849, 1, 0,
  0, 0, 122, 865, 1, 0, 0, 0, 124, 881, 1, 0, 0, 0, 126, 901, 1, 0, 0, 0, 128,
  905, 1, 0, 0, 0, 130, 921, 1, 0, 0, 0, 132, 925, 1, 0, 0, 0, 134, 929, 1, 0,
  0, 0, 136, 939, 1, 0, 0, 0, 138, 969, 1, 0, 0, 0, 140, 972, 1, 0, 0, 0, 142,
  988, 1, 0, 0, 0, 144, 990, 1, 0, 0, 0, 146, 1000, 1, 0, 0, 0, 148, 1022, 1, 0,
  0, 0, 150, 1032, 1, 0, 0, 0, 152, 1049, 1, 0, 0, 0, 154, 1051, 1, 0, 0, 0,
  156, 1067, 1, 0, 0, 0, 158, 1079, 1, 0, 0, 0, 160, 1091, 1, 0, 0, 0, 162,
  1103, 1, 0, 0, 0, 164, 1110, 1, 0, 0, 0, 166, 1120, 1, 0, 0, 0, 168, 1154, 1,
  0, 0, 0, 170, 1164, 1, 0, 0, 0, 172, 1190, 1, 0, 0, 0, 174, 1199, 1, 0, 0, 0,
  176, 1222, 1, 0, 0, 0, 178, 1247, 1, 0, 0, 0, 180, 1249, 1, 0, 0, 0, 182,
  1263, 1, 0, 0, 0, 184, 1279, 1, 0, 0, 0, 186, 1283, 1, 0, 0, 0, 188, 1307, 1,
  0, 0, 0, 190, 1329, 1, 0, 0, 0, 192, 1357, 1, 0, 0, 0, 194, 1361, 1, 0, 0, 0,
  196, 1363, 1, 0, 0, 0, 198, 1373, 1, 0, 0, 0, 200, 1443, 1, 0, 0, 0, 202,
  1453, 1, 0, 0, 0, 204, 1517, 1, 0, 0, 0, 206, 1519, 1, 0, 0, 0, 208, 1535, 1,
  0, 0, 0, 210, 1571, 1, 0, 0, 0, 212, 1597, 1, 0, 0, 0, 214, 1607, 1, 0, 0, 0,
  216, 1637, 1, 0, 0, 0, 218, 1647, 1, 0, 0, 0, 220, 1697, 1, 0, 0, 0, 222,
  1706, 1, 0, 0, 0, 224, 1720, 1, 0, 0, 0, 226, 1749, 1, 0, 0, 0, 228, 1813, 1,
  0, 0, 0, 230, 1815, 1, 0, 0, 0, 232, 1823, 1, 0, 0, 0, 234, 1847, 1, 0, 0, 0,
  236, 1854, 1, 0, 0, 0, 238, 1862, 1, 0, 0, 0, 240, 1864, 1, 0, 0, 0, 242,
  1892, 1, 0, 0, 0, 244, 1894, 1, 0, 0, 0, 246, 1924, 1, 0, 0, 0, 248, 1943, 1,
  0, 0, 0, 250, 1972, 1, 0, 0, 0, 252, 1974, 1, 0, 0, 0, 254, 1987, 1, 0, 0, 0,
  256, 2000, 1, 0, 0, 0, 258, 2013, 1, 0, 0, 0, 260, 2020, 1, 0, 0, 0, 262,
  2028, 1, 0, 0, 0, 264, 2040, 1, 0, 0, 0, 266, 2042, 1, 0, 0, 0, 268, 2051, 1,
  0, 0, 0, 270, 2055, 1, 0, 0, 0, 272, 2071, 1, 0, 0, 0, 274, 2097, 1, 0, 0, 0,
  276, 2099, 1, 0, 0, 0, 278, 2205, 1, 0, 0, 0, 280, 2213, 1, 0, 0, 0, 282,
  2217, 1, 0, 0, 0, 284, 2237, 1, 0, 0, 0, 286, 2239, 1, 0, 0, 0, 288, 2249, 1,
  0, 0, 0, 290, 2251, 1, 0, 0, 0, 292, 2253, 1, 0, 0, 0, 294, 2255, 1, 0, 0, 0,
  296, 2257, 1, 0, 0, 0, 298, 2259, 1, 0, 0, 0, 300, 2261, 1, 0, 0, 0, 302,
  2263, 1, 0, 0, 0, 304, 2265, 1, 0, 0, 0, 306, 2267, 1, 0, 0, 0, 308, 2269, 1,
  0, 0, 0, 310, 2274, 1, 0, 0, 0, 312, 2284, 1, 0, 0, 0, 314, 2292, 1, 0, 0, 0,
  316, 2303, 1, 0, 0, 0, 318, 2309, 1, 0, 0, 0, 320, 2313, 1, 0, 0, 0, 322,
  2315, 1, 0, 0, 0, 324, 329, 3, 278, 139, 0, 325, 330, 3, 2, 1, 0, 326, 330, 3,
  4, 2, 0, 327, 330, 3, 12, 6, 0, 328, 330, 3, 16, 8, 0, 329, 325, 1, 0, 0, 0,
  329, 326, 1, 0, 0, 0, 329, 327, 1, 0, 0, 0, 329, 328, 1, 0, 0, 0, 330, 331, 1,
  0, 0, 0, 331, 332, 3, 278, 139, 0, 332, 1, 1, 0, 0, 0, 333, 334, 3, 16, 8, 0,
  334, 335, 3, 278, 139, 0, 335, 336, 5, 31, 0, 0, 336, 337, 3, 278, 139, 0,
  337, 338, 3, 66, 33, 0, 338, 3, 1, 0, 0, 0, 339, 343, 3, 6, 3, 0, 340, 343, 3,
  8, 4, 0, 341, 343, 3, 10, 5, 0, 342, 339, 1, 0, 0, 0, 342, 340, 1, 0, 0, 0,
  342, 341, 1, 0, 0, 0, 343, 5, 1, 0, 0, 0, 344, 350, 3, 16, 8, 0, 345, 346, 3,
  278, 139, 0, 346, 347, 3, 60, 30, 0, 347, 348, 3, 278, 139, 0, 348, 349, 3,
  16, 8, 0, 349, 351, 1, 0, 0, 0, 350, 345, 1, 0, 0, 0, 351, 352, 1, 0, 0, 0,
  352, 350, 1, 0, 0, 0, 352, 353, 1, 0, 0, 0, 353, 7, 1, 0, 0, 0, 354, 360, 3,
  16, 8, 0, 355, 356, 3, 278, 139, 0, 356, 357, 3, 62, 31, 0, 357, 358, 3, 278,
  139, 0, 358, 359, 3, 16, 8, 0, 359, 361, 1, 0, 0, 0, 360, 355, 1, 0, 0, 0,
  361, 362, 1, 0, 0, 0, 362, 360, 1, 0, 0, 0, 362, 363, 1, 0, 0, 0, 363, 9, 1,
  0, 0, 0, 364, 365, 3, 16, 8, 0, 365, 366, 3, 278, 139, 0, 366, 367, 3, 64, 32,
  0, 367, 368, 3, 278, 139, 0, 368, 369, 3, 16, 8, 0, 369, 11, 1, 0, 0, 0, 370,
  374, 3, 16, 8, 0, 371, 372, 3, 278, 139, 0, 372, 373, 3, 14, 7, 0, 373, 375,
  1, 0, 0, 0, 374, 371, 1, 0, 0, 0, 375, 376, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0,
  376, 377, 1, 0, 0, 0, 377, 13, 1, 0, 0, 0, 378, 379, 3, 20, 10, 0, 379, 380,
  3, 278, 139, 0, 380, 381, 3, 98, 49, 0, 381, 15, 1, 0, 0, 0, 382, 383, 3, 42,
  21, 0, 383, 384, 3, 278, 139, 0, 384, 386, 1, 0, 0, 0, 385, 382, 1, 0, 0, 0,
  385, 386, 1, 0, 0, 0, 386, 418, 1, 0, 0, 0, 387, 388, 3, 22, 11, 0, 388, 389,
  3, 278, 139, 0, 389, 391, 1, 0, 0, 0, 390, 387, 1, 0, 0, 0, 390, 391, 1, 0, 0,
  0, 391, 399, 1, 0, 0, 0, 392, 400, 3, 18, 9, 0, 393, 394, 5, 13, 0, 0, 394,
  395, 3, 278, 139, 0, 395, 396, 3, 0, 0, 0, 396, 397, 3, 278, 139, 0, 397, 398,
  5, 14, 0, 0, 398, 400, 1, 0, 0, 0, 399, 392, 1, 0, 0, 0, 399, 393, 1, 0, 0, 0,
  400, 406, 1, 0, 0, 0, 401, 402, 3, 278, 139, 0, 402, 403, 3, 240, 120, 0, 403,
  405, 1, 0, 0, 0, 404, 401, 1, 0, 0, 0, 405, 408, 1, 0, 0, 0, 406, 404, 1, 0,
  0, 0, 406, 407, 1, 0, 0, 0, 407, 419, 1, 0, 0, 0, 408, 406, 1, 0, 0, 0, 409,
  417, 3, 18, 9, 0, 410, 411, 5, 13, 0, 0, 411, 412, 3, 278, 139, 0, 412, 413,
  3, 0, 0, 0, 413, 414, 3, 278, 139, 0, 414, 415, 5, 14, 0, 0, 415, 417, 1, 0,
  0, 0, 416, 409, 1, 0, 0, 0, 416, 410, 1, 0, 0, 0, 417, 419, 1, 0, 0, 0, 418,
  390, 1, 0, 0, 0, 418, 416, 1, 0, 0, 0, 419, 427, 1, 0, 0, 0, 420, 423, 3, 278,
  139, 0, 421, 424, 3, 110, 55, 0, 422, 424, 3, 190, 95, 0, 423, 421, 1, 0, 0,
  0, 423, 422, 1, 0, 0, 0, 424, 426, 1, 0, 0, 0, 425, 420, 1, 0, 0, 0, 426, 429,
  1, 0, 0, 0, 427, 425, 1, 0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 433, 1, 0, 0, 0,
  429, 427, 1, 0, 0, 0, 430, 431, 3, 278, 139, 0, 431, 432, 3, 246, 123, 0, 432,
  434, 1, 0, 0, 0, 433, 430, 1, 0, 0, 0, 433, 434, 1, 0, 0, 0, 434, 17, 1, 0, 0,
  0, 435, 438, 3, 32, 16, 0, 436, 438, 3, 40, 20, 0, 437, 435, 1, 0, 0, 0, 437,
  436, 1, 0, 0, 0, 438, 19, 1, 0, 0, 0, 439, 440, 5, 19, 0, 0, 440, 21, 1, 0, 0,
  0, 441, 452, 5, 67, 0, 0, 442, 443, 3, 278, 139, 0, 443, 444, 5, 64, 0, 0,
  444, 447, 3, 278, 139, 0, 445, 448, 3, 24, 12, 0, 446, 448, 3, 40, 20, 0, 447,
  445, 1, 0, 0, 0, 447, 446, 1, 0, 0, 0, 448, 449, 1, 0, 0, 0, 449, 450, 3, 278,
  139, 0, 450, 451, 5, 66, 0, 0, 451, 453, 1, 0, 0, 0, 452, 442, 1, 0, 0, 0,
  452, 453, 1, 0, 0, 0, 453, 23, 1, 0, 0, 0, 454, 462, 3, 26, 13, 0, 455, 456,
  3, 278, 139, 0, 456, 457, 5, 17, 0, 0, 457, 458, 3, 278, 139, 0, 458, 459, 3,
  26, 13, 0, 459, 461, 1, 0, 0, 0, 460, 455, 1, 0, 0, 0, 461, 464, 1, 0, 0, 0,
  462, 460, 1, 0, 0, 0, 462, 463, 1, 0, 0, 0, 463, 25, 1, 0, 0, 0, 464, 462, 1,
  0, 0, 0, 465, 468, 3, 28, 14, 0, 466, 468, 3, 30, 15, 0, 467, 465, 1, 0, 0, 0,
  467, 466, 1, 0, 0, 0, 468, 27, 1, 0, 0, 0, 469, 471, 3, 320, 160, 0, 470, 469,
  1, 0, 0, 0, 471, 472, 1, 0, 0, 0, 472, 470, 1, 0, 0, 0, 472, 473, 1, 0, 0, 0,
  473, 29, 1, 0, 0, 0, 474, 475, 3, 32, 16, 0, 475, 31, 1, 0, 0, 0, 476, 484, 3,
  36, 18, 0, 477, 478, 3, 278, 139, 0, 478, 479, 5, 97, 0, 0, 479, 480, 3, 278,
  139, 0, 480, 481, 3, 38, 19, 0, 481, 482, 3, 278, 139, 0, 482, 483, 5, 97, 0,
  0, 483, 485, 1, 0, 0, 0, 484, 477, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 33,
  1, 0, 0, 0, 486, 487, 5, 13, 0, 0, 487, 488, 3, 278, 139, 0, 488, 492, 3, 32,
  16, 0, 489, 490, 3, 280, 140, 0, 490, 491, 3, 32, 16, 0, 491, 493, 1, 0, 0, 0,
  492, 489, 1, 0, 0, 0, 493, 494, 1, 0, 0, 0, 494, 492, 1, 0, 0, 0, 494, 495, 1,
  0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 497, 3, 278, 139, 0, 497, 498, 5, 14, 0,
  0, 498, 35, 1, 0, 0, 0, 499, 500, 3, 276, 138, 0, 500, 37, 1, 0, 0, 0, 501,
  503, 3, 310, 155, 0, 502, 501, 1, 0, 0, 0, 503, 504, 1, 0, 0, 0, 504, 502, 1,
  0, 0, 0, 504, 505, 1, 0, 0, 0, 505, 518, 1, 0, 0, 0, 506, 508, 3, 290, 145, 0,
  507, 506, 1, 0, 0, 0, 508, 509, 1, 0, 0, 0, 509, 507, 1, 0, 0, 0, 509, 510, 1,
  0, 0, 0, 510, 512, 1, 0, 0, 0, 511, 513, 3, 310, 155, 0, 512, 511, 1, 0, 0, 0,
  513, 514, 1, 0, 0, 0, 514, 512, 1, 0, 0, 0, 514, 515, 1, 0, 0, 0, 515, 517, 1,
  0, 0, 0, 516, 507, 1, 0, 0, 0, 517, 520, 1, 0, 0, 0, 518, 516, 1, 0, 0, 0,
  518, 519, 1, 0, 0, 0, 519, 39, 1, 0, 0, 0, 520, 518, 1, 0, 0, 0, 521, 522, 5,
  15, 0, 0, 522, 41, 1, 0, 0, 0, 523, 532, 3, 48, 24, 0, 524, 532, 3, 50, 25, 0,
  525, 532, 3, 46, 23, 0, 526, 532, 3, 44, 22, 0, 527, 532, 3, 56, 28, 0, 528,
  532, 3, 58, 29, 0, 529, 532, 3, 54, 27, 0, 530, 532, 3, 52, 26, 0, 531, 523,
  1, 0, 0, 0, 531, 524, 1, 0, 0, 0, 531, 525, 1, 0, 0, 0, 531, 526, 1, 0, 0, 0,
  531, 527, 1, 0, 0, 0, 531, 528, 1, 0, 0, 0, 531, 529, 1, 0, 0, 0, 531, 530, 1,
  0, 0, 0, 532, 43, 1, 0, 0, 0, 533, 534, 5, 33, 0, 0, 534, 45, 1, 0, 0, 0, 535,
  536, 5, 33, 0, 0, 536, 537, 5, 33, 0, 0, 537, 47, 1, 0, 0, 0, 538, 539, 5, 33,
  0, 0, 539, 540, 5, 6, 0, 0, 540, 49, 1, 0, 0, 0, 541, 542, 5, 33, 0, 0, 542,
  543, 5, 33, 0, 0, 543, 544, 5, 6, 0, 0, 544, 51, 1, 0, 0, 0, 545, 546, 5, 35,
  0, 0, 546, 53, 1, 0, 0, 0, 547, 548, 5, 35, 0, 0, 548, 549, 5, 35, 0, 0, 549,
  55, 1, 0, 0, 0, 550, 551, 5, 35, 0, 0, 551, 552, 5, 6, 0, 0, 552, 57, 1, 0, 0,
  0, 553, 554, 5, 35, 0, 0, 554, 555, 5, 35, 0, 0, 555, 556, 5, 6, 0, 0, 556,
  59, 1, 0, 0, 0, 557, 560, 7, 0, 0, 0, 558, 560, 7, 0, 0, 0, 559, 557, 1, 0, 0,
  0, 559, 558, 1, 0, 0, 0, 560, 563, 1, 0, 0, 0, 561, 564, 7, 1, 0, 0, 562, 564,
  7, 1, 0, 0, 563, 561, 1, 0, 0, 0, 563, 562, 1, 0, 0, 0, 564, 567, 1, 0, 0, 0,
  565, 568, 7, 2, 0, 0, 566, 568, 7, 2, 0, 0, 567, 565, 1, 0, 0, 0, 567, 566, 1,
  0, 0, 0, 568, 569, 1, 0, 0, 0, 569, 572, 3, 280, 140, 0, 570, 572, 5, 17, 0,
  0, 571, 559, 1, 0, 0, 0, 571, 570, 1, 0, 0, 0, 572, 61, 1, 0, 0, 0, 573, 576,
  7, 3, 0, 0, 574, 576, 7, 3, 0, 0, 575, 573, 1, 0, 0, 0, 575, 574, 1, 0, 0, 0,
  576, 579, 1, 0, 0, 0, 577, 580, 7, 4, 0, 0, 578, 580, 7, 4, 0, 0, 579, 577, 1,
  0, 0, 0, 579, 578, 1, 0, 0, 0, 580, 581, 1, 0, 0, 0, 581, 582, 3, 280, 140, 0,
  582, 63, 1, 0, 0, 0, 583, 586, 7, 5, 0, 0, 584, 586, 7, 5, 0, 0, 585, 583, 1,
  0, 0, 0, 585, 584, 1, 0, 0, 0, 586, 589, 1, 0, 0, 0, 587, 590, 7, 6, 0, 0,
  588, 590, 7, 6, 0, 0, 589, 587, 1, 0, 0, 0, 589, 588, 1, 0, 0, 0, 590, 593, 1,
  0, 0, 0, 591, 594, 7, 1, 0, 0, 592, 594, 7, 1, 0, 0, 593, 591, 1, 0, 0, 0,
  593, 592, 1, 0, 0, 0, 594, 597, 1, 0, 0, 0, 595, 598, 7, 7, 0, 0, 596, 598, 7,
  7, 0, 0, 597, 595, 1, 0, 0, 0, 597, 596, 1, 0, 0, 0, 598, 601, 1, 0, 0, 0,
  599, 602, 7, 8, 0, 0, 600, 602, 7, 8, 0, 0, 601, 599, 1, 0, 0, 0, 601, 600, 1,
  0, 0, 0, 602, 603, 1, 0, 0, 0, 603, 604, 3, 280, 140, 0, 604, 65, 1, 0, 0, 0,
  605, 606, 3, 72, 36, 0, 606, 609, 3, 278, 139, 0, 607, 610, 3, 68, 34, 0, 608,
  610, 3, 70, 35, 0, 609, 607, 1, 0, 0, 0, 609, 608, 1, 0, 0, 0, 609, 610, 1, 0,
  0, 0, 610, 67, 1, 0, 0, 0, 611, 612, 3, 278, 139, 0, 612, 613, 3, 60, 30, 0,
  613, 614, 3, 278, 139, 0, 614, 615, 3, 72, 36, 0, 615, 617, 1, 0, 0, 0, 616,
  611, 1, 0, 0, 0, 617, 618, 1, 0, 0, 0, 618, 616, 1, 0, 0, 0, 618, 619, 1, 0,
  0, 0, 619, 69, 1, 0, 0, 0, 620, 621, 3, 278, 139, 0, 621, 622, 3, 62, 31, 0,
  622, 623, 3, 278, 139, 0, 623, 624, 3, 72, 36, 0, 624, 626, 1, 0, 0, 0, 625,
  620, 1, 0, 0, 0, 626, 627, 1, 0, 0, 0, 627, 625, 1, 0, 0, 0, 627, 628, 1, 0,
  0, 0, 628, 71, 1, 0, 0, 0, 629, 638, 3, 74, 37, 0, 630, 638, 3, 82, 41, 0,
  631, 632, 5, 13, 0, 0, 632, 633, 3, 278, 139, 0, 633, 634, 3, 66, 33, 0, 634,
  635, 3, 278, 139, 0, 635, 636, 5, 14, 0, 0, 636, 638, 1, 0, 0, 0, 637, 629, 1,
  0, 0, 0, 637, 630, 1, 0, 0, 0, 637, 631, 1, 0, 0, 0, 638, 73, 1, 0, 0, 0, 639,
  640, 3, 80, 40, 0, 640, 643, 3, 278, 139, 0, 641, 644, 3, 76, 38, 0, 642, 644,
  3, 78, 39, 0, 643, 641, 1, 0, 0, 0, 643, 642, 1, 0, 0, 0, 643, 644, 1, 0, 0,
  0, 644, 75, 1, 0, 0, 0, 645, 646, 3, 278, 139, 0, 646, 647, 3, 60, 30, 0, 647,
  648, 3, 278, 139, 0, 648, 649, 3, 80, 40, 0, 649, 651, 1, 0, 0, 0, 650, 645,
  1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652, 650, 1, 0, 0, 0, 652, 653, 1, 0, 0, 0,
  653, 77, 1, 0, 0, 0, 654, 655, 3, 278, 139, 0, 655, 656, 3, 62, 31, 0, 656,
  657, 3, 278, 139, 0, 657, 658, 3, 80, 40, 0, 658, 660, 1, 0, 0, 0, 659, 654,
  1, 0, 0, 0, 660, 661, 1, 0, 0, 0, 661, 659, 1, 0, 0, 0, 661, 662, 1, 0, 0, 0,
  662, 79, 1, 0, 0, 0, 663, 671, 3, 84, 42, 0, 664, 665, 5, 13, 0, 0, 665, 666,
  3, 278, 139, 0, 666, 667, 3, 74, 37, 0, 667, 668, 3, 278, 139, 0, 668, 669, 5,
  14, 0, 0, 669, 671, 1, 0, 0, 0, 670, 663, 1, 0, 0, 0, 670, 664, 1, 0, 0, 0,
  671, 81, 1, 0, 0, 0, 672, 673, 5, 64, 0, 0, 673, 674, 3, 86, 43, 0, 674, 675,
  5, 66, 0, 0, 675, 676, 3, 278, 139, 0, 676, 678, 1, 0, 0, 0, 677, 672, 1, 0,
  0, 0, 677, 678, 1, 0, 0, 0, 678, 679, 1, 0, 0, 0, 679, 680, 5, 96, 0, 0, 680,
  681, 3, 278, 139, 0, 681, 682, 3, 74, 37, 0, 682, 683, 3, 278, 139, 0, 683,
  684, 5, 98, 0, 0, 684, 83, 1, 0, 0, 0, 685, 686, 5, 64, 0, 0, 686, 687, 3, 86,
  43, 0, 687, 688, 5, 66, 0, 0, 688, 689, 3, 278, 139, 0, 689, 691, 1, 0, 0, 0,
  690, 685, 1, 0, 0, 0, 690, 691, 1, 0, 0, 0, 691, 695, 1, 0, 0, 0, 692, 693, 3,
  96, 48, 0, 693, 694, 3, 278, 139, 0, 694, 696, 1, 0, 0, 0, 695, 692, 1, 0, 0,
  0, 695, 696, 1, 0, 0, 0, 696, 697, 1, 0, 0, 0, 697, 698, 3, 98, 49, 0, 698,
  718, 3, 278, 139, 0, 699, 700, 3, 100, 50, 0, 700, 701, 3, 278, 139, 0, 701,
  702, 3, 16, 8, 0, 702, 719, 1, 0, 0, 0, 703, 704, 3, 102, 51, 0, 704, 705, 3,
  278, 139, 0, 705, 706, 5, 8, 0, 0, 706, 707, 3, 260, 130, 0, 707, 719, 1, 0,
  0, 0, 708, 709, 3, 106, 53, 0, 709, 712, 3, 278, 139, 0, 710, 713, 3, 118, 59,
  0, 711, 713, 3, 120, 60, 0, 712, 710, 1, 0, 0, 0, 712, 711, 1, 0, 0, 0, 713,
  719, 1, 0, 0, 0, 714, 715, 3, 108, 54, 0, 715, 716, 3, 278, 139, 0, 716, 717,
  3, 268, 134, 0, 717, 719, 1, 0, 0, 0, 718, 699, 1, 0, 0, 0, 718, 703, 1, 0, 0,
  0, 718, 708, 1, 0, 0, 0, 718, 714, 1, 0, 0, 0, 719, 85, 1, 0, 0, 0, 720, 721,
  3, 88, 44, 0, 721, 722, 3, 90, 45, 0, 722, 723, 3, 92, 46, 0, 723, 87, 1, 0,
  0, 0, 724, 725, 3, 274, 137, 0, 725, 89, 1, 0, 0, 0, 726, 727, 5, 19, 0, 0,
  727, 728, 5, 19, 0, 0, 728, 91, 1, 0, 0, 0, 729, 732, 3, 274, 137, 0, 730,
  732, 3, 94, 47, 0, 731, 729, 1, 0, 0, 0, 731, 730, 1, 0, 0, 0, 732, 93, 1, 0,
  0, 0, 733, 734, 5, 15, 0, 0, 734, 95, 1, 0, 0, 0, 735, 736, 7, 4, 0, 0, 736,
  97, 1, 0, 0, 0, 737, 738, 3, 16, 8, 0, 738, 99, 1, 0, 0, 0, 739, 743, 5, 34,
  0, 0, 740, 741, 5, 6, 0, 0, 741, 743, 5, 34, 0, 0, 742, 739, 1, 0, 0, 0, 742,
  740, 1, 0, 0, 0, 743, 101, 1, 0, 0, 0, 744, 754, 5, 34, 0, 0, 745, 746, 5, 6,
  0, 0, 746, 754, 5, 34, 0, 0, 747, 748, 5, 33, 0, 0, 748, 754, 5, 34, 0, 0,
  749, 754, 5, 33, 0, 0, 750, 751, 5, 35, 0, 0, 751, 754, 5, 34, 0, 0, 752, 754,
  5, 35, 0, 0, 753, 744, 1, 0, 0, 0, 753, 745, 1, 0, 0, 0, 753, 747, 1, 0, 0, 0,
  753, 749, 1, 0, 0, 0, 753, 750, 1, 0, 0, 0, 753, 752, 1, 0, 0, 0, 754, 103, 1,
  0, 0, 0, 755, 765, 5, 34, 0, 0, 756, 757, 5, 6, 0, 0, 757, 765, 5, 34, 0, 0,
  758, 759, 5, 33, 0, 0, 759, 765, 5, 34, 0, 0, 760, 765, 5, 33, 0, 0, 761, 762,
  5, 35, 0, 0, 762, 765, 5, 34, 0, 0, 763, 765, 5, 35, 0, 0, 764, 755, 1, 0, 0,
  0, 764, 756, 1, 0, 0, 0, 764, 758, 1, 0, 0, 0, 764, 760, 1, 0, 0, 0, 764, 761,
  1, 0, 0, 0, 764, 763, 1, 0, 0, 0, 765, 105, 1, 0, 0, 0, 766, 770, 5, 34, 0, 0,
  767, 768, 5, 6, 0, 0, 768, 770, 5, 34, 0, 0, 769, 766, 1, 0, 0, 0, 769, 767,
  1, 0, 0, 0, 770, 107, 1, 0, 0, 0, 771, 775, 5, 34, 0, 0, 772, 773, 5, 6, 0, 0,
  773, 775, 5, 34, 0, 0, 774, 771, 1, 0, 0, 0, 774, 772, 1, 0, 0, 0, 775, 109,
  1, 0, 0, 0, 776, 777, 5, 96, 0, 0, 777, 778, 5, 96, 0, 0, 778, 779, 1, 0, 0,
  0, 779, 782, 3, 278, 139, 0, 780, 783, 7, 2, 0, 0, 781, 783, 7, 2, 0, 0, 782,
  780, 1, 0, 0, 0, 782, 781, 1, 0, 0, 0, 782, 783, 1, 0, 0, 0, 783, 784, 1, 0,
  0, 0, 784, 785, 3, 278, 139, 0, 785, 793, 3, 112, 56, 0, 786, 787, 3, 278,
  139, 0, 787, 788, 5, 17, 0, 0, 788, 789, 3, 278, 139, 0, 789, 790, 3, 112, 56,
  0, 790, 792, 1, 0, 0, 0, 791, 786, 1, 0, 0, 0, 792, 795, 1, 0, 0, 0, 793, 791,
  1, 0, 0, 0, 793, 794, 1, 0, 0, 0, 794, 796, 1, 0, 0, 0, 795, 793, 1, 0, 0, 0,
  796, 797, 3, 278, 139, 0, 797, 798, 5, 98, 0, 0, 798, 799, 5, 98, 0, 0, 799,
  111, 1, 0, 0, 0, 800, 808, 3, 114, 57, 0, 801, 808, 3, 134, 67, 0, 802, 808,
  3, 142, 71, 0, 803, 808, 3, 162, 81, 0, 804, 808, 3, 212, 106, 0, 805, 808, 3,
  216, 108, 0, 806, 808, 3, 230, 115, 0, 807, 800, 1, 0, 0, 0, 807, 801, 1, 0,
  0, 0, 807, 802, 1, 0, 0, 0, 807, 803, 1, 0, 0, 0, 807, 804, 1, 0, 0, 0, 807,
  805, 1, 0, 0, 0, 807, 806, 1, 0, 0, 0, 808, 113, 1, 0, 0, 0, 809, 810, 3, 116,
  58, 0, 810, 811, 3, 278, 139, 0, 811, 812, 3, 106, 53, 0, 812, 815, 3, 278,
  139, 0, 813, 816, 3, 118, 59, 0, 814, 816, 3, 120, 60, 0, 815, 813, 1, 0, 0,
  0, 815, 814, 1, 0, 0, 0, 816, 115, 1, 0, 0, 0, 817, 820, 7, 9, 0, 0, 818, 820,
  7, 9, 0, 0, 819, 817, 1, 0, 0, 0, 819, 818, 1, 0, 0, 0, 820, 823, 1, 0, 0, 0,
  821, 824, 7, 10, 0, 0, 822, 824, 7, 10, 0, 0, 823, 821, 1, 0, 0, 0, 823, 822,
  1, 0, 0, 0, 824, 827, 1, 0, 0, 0, 825, 828, 7, 4, 0, 0, 826, 828, 7, 4, 0, 0,
  827, 825, 1, 0, 0, 0, 827, 826, 1, 0, 0, 0, 828, 831, 1, 0, 0, 0, 829, 832, 7,
  5, 0, 0, 830, 832, 7, 5, 0, 0, 831, 829, 1, 0, 0, 0, 831, 830, 1, 0, 0, 0,
  832, 117, 1, 0, 0, 0, 833, 834, 3, 124, 62, 0, 834, 835, 3, 278, 139, 0, 835,
  836, 5, 31, 0, 0, 836, 837, 3, 278, 139, 0, 837, 839, 1, 0, 0, 0, 838, 833, 1,
  0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 840, 1, 0, 0, 0, 840, 848, 3, 128, 64, 0,
  841, 842, 3, 122, 61, 0, 842, 843, 3, 278, 139, 0, 843, 844, 5, 31, 0, 0, 844,
  845, 3, 278, 139, 0, 845, 846, 3, 132, 66, 0, 846, 848, 1, 0, 0, 0, 847, 838,
  1, 0, 0, 0, 847, 841, 1, 0, 0, 0, 848, 119, 1, 0, 0, 0, 849, 850, 5, 13, 0, 0,
  850, 851, 3, 278, 139, 0, 851, 857, 3, 118, 59, 0, 852, 853, 3, 280, 140, 0,
  853, 854, 3, 118, 59, 0, 854, 856, 1, 0, 0, 0, 855, 852, 1, 0, 0, 0, 856, 859,
  1, 0, 0, 0, 857, 855, 1, 0, 0, 0, 857, 858, 1, 0, 0, 0, 858, 860, 1, 0, 0, 0,
  859, 857, 1, 0, 0, 0, 860, 861, 3, 278, 139, 0, 861, 862, 5, 14, 0, 0, 862,
  121, 1, 0, 0, 0, 863, 866, 7, 11, 0, 0, 864, 866, 7, 11, 0, 0, 865, 863, 1, 0,
  0, 0, 865, 864, 1, 0, 0, 0, 866, 869, 1, 0, 0, 0, 867, 870, 7, 6, 0, 0, 868,
  870, 7, 6, 0, 0, 869, 867, 1, 0, 0, 0, 869, 868, 1, 0, 0, 0, 870, 873, 1, 0,
  0, 0, 871, 874, 7, 12, 0, 0, 872, 874, 7, 12, 0, 0, 873, 871, 1, 0, 0, 0, 873,
  872, 1, 0, 0, 0, 874, 877, 1, 0, 0, 0, 875, 878, 7, 2, 0, 0, 876, 878, 7, 2,
  0, 0, 877, 875, 1, 0, 0, 0, 877, 876, 1, 0, 0, 0, 878, 123, 1, 0, 0, 0, 879,
  882, 7, 5, 0, 0, 880, 882, 7, 5, 0, 0, 881, 879, 1, 0, 0, 0, 881, 880, 1, 0,
  0, 0, 882, 885, 1, 0, 0, 0, 883, 886, 7, 0, 0, 0, 884, 886, 7, 0, 0, 0, 885,
  883, 1, 0, 0, 0, 885, 884, 1, 0, 0, 0, 886, 889, 1, 0, 0, 0, 887, 890, 7, 9,
  0, 0, 888, 890, 7, 9, 0, 0, 889, 887, 1, 0, 0, 0, 889, 888, 1, 0, 0, 0, 890,
  893, 1, 0, 0, 0, 891, 894, 7, 13, 0, 0, 892, 894, 7, 13, 0, 0, 893, 891, 1, 0,
  0, 0, 893, 892, 1, 0, 0, 0, 894, 897, 1, 0, 0, 0, 895, 898, 7, 14, 0, 0, 896,
  898, 7, 14, 0, 0, 897, 895, 1, 0, 0, 0, 897, 896, 1, 0, 0, 0, 898, 125, 1, 0,
  0, 0, 899, 902, 3, 318, 159, 0, 900, 902, 3, 314, 157, 0, 901, 899, 1, 0, 0,
  0, 901, 900, 1, 0, 0, 0, 902, 903, 1, 0, 0, 0, 903, 901, 1, 0, 0, 0, 903, 904,
  1, 0, 0, 0, 904, 127, 1, 0, 0, 0, 905, 906, 3, 298, 149, 0, 906, 907, 3, 278,
  139, 0, 907, 913, 3, 126, 63, 0, 908, 909, 3, 280, 140, 0, 909, 910, 3, 126,
  63, 0, 910, 912, 1, 0, 0, 0, 911, 908, 1, 0, 0, 0, 912, 915, 1, 0, 0, 0, 913,
  911, 1, 0, 0, 0, 913, 914, 1, 0, 0, 0, 914, 916, 1, 0, 0, 0, 915, 913, 1, 0,
  0, 0, 916, 917, 3, 278, 139, 0, 917, 918, 3, 298, 149, 0, 918, 129, 1, 0, 0,
  0, 919, 922, 3, 312, 156, 0, 920, 922, 3, 316, 158, 0, 921, 919, 1, 0, 0, 0,
  921, 920, 1, 0, 0, 0, 922, 923, 1, 0, 0, 0, 923, 921, 1, 0, 0, 0, 923, 924, 1,
  0, 0, 0, 924, 131, 1, 0, 0, 0, 925, 926, 3, 298, 149, 0, 926, 927, 3, 130, 65,
  0, 927, 928, 3, 298, 149, 0, 928, 133, 1, 0, 0, 0, 929, 930, 3, 136, 68, 0,
  930, 931, 3, 278, 139, 0, 931, 932, 3, 108, 54, 0, 932, 935, 3, 278, 139, 0,
  933, 936, 3, 138, 69, 0, 934, 936, 3, 140, 70, 0, 935, 933, 1, 0, 0, 0, 935,
  934, 1, 0, 0, 0, 936, 135, 1, 0, 0, 0, 937, 940, 7, 12, 0, 0, 938, 940, 7, 12,
  0, 0, 939, 937, 1, 0, 0, 0, 939, 938, 1, 0, 0, 0, 940, 943, 1, 0, 0, 0, 941,
  944, 7, 0, 0, 0, 942, 944, 7, 0, 0, 0, 943, 941, 1, 0, 0, 0, 943, 942, 1, 0,
  0, 0, 944, 947, 1, 0, 0, 0, 945, 948, 7, 1, 0, 0, 946, 948, 7, 1, 0, 0, 947,
  945, 1, 0, 0, 0, 947, 946, 1, 0, 0, 0, 948, 951, 1, 0, 0, 0, 949, 952, 7, 15,
  0, 0, 950, 952, 7, 15, 0, 0, 951, 949, 1, 0, 0, 0, 951, 950, 1, 0, 0, 0, 952,
  955, 1, 0, 0, 0, 953, 956, 7, 7, 0, 0, 954, 956, 7, 7, 0, 0, 955, 953, 1, 0,
  0, 0, 955, 954, 1, 0, 0, 0, 956, 959, 1, 0, 0, 0, 957, 960, 7, 0, 0, 0, 958,
  960, 7, 0, 0, 0, 959, 957, 1, 0, 0, 0, 959, 958, 1, 0, 0, 0, 960, 963, 1, 0,
  0, 0, 961, 964, 7, 15, 0, 0, 962, 964, 7, 15, 0, 0, 963, 961, 1, 0, 0, 0, 963,
  962, 1, 0, 0, 0, 964, 967, 1, 0, 0, 0, 965, 968, 7, 10, 0, 0, 966, 968, 7, 10,
  0, 0, 967, 965, 1, 0, 0, 0, 967, 966, 1, 0, 0, 0, 968, 137, 1, 0, 0, 0, 969,
  970, 3, 320, 160, 0, 970, 971, 3, 320, 160, 0, 971, 139, 1, 0, 0, 0, 972, 973,
  5, 13, 0, 0, 973, 974, 3, 278, 139, 0, 974, 980, 3, 138, 69, 0, 975, 976, 3,
  280, 140, 0, 976, 977, 3, 138, 69, 0, 977, 979, 1, 0, 0, 0, 978, 975, 1, 0, 0,
  0, 979, 982, 1, 0, 0, 0, 980, 978, 1, 0, 0, 0, 980, 981, 1, 0, 0, 0, 981, 983,
  1, 0, 0, 0, 982, 980, 1, 0, 0, 0, 983, 984, 3, 278, 139, 0, 984, 985, 5, 14,
  0, 0, 985, 141, 1, 0, 0, 0, 986, 989, 3, 144, 72, 0, 987, 989, 3, 148, 74, 0,
  988, 986, 1, 0, 0, 0, 988, 987, 1, 0, 0, 0, 989, 143, 1, 0, 0, 0, 990, 991, 3,
  146, 73, 0, 991, 992, 3, 278, 139, 0, 992, 993, 3, 108, 54, 0, 993, 996, 3,
  278, 139, 0, 994, 997, 3, 16, 8, 0, 995, 997, 3, 34, 17, 0, 996, 994, 1, 0, 0,
  0, 996, 995, 1, 0, 0, 0, 997, 145, 1, 0, 0, 0, 998, 1001, 7, 9, 0, 0, 999,
  1001, 7, 9, 0, 0, 1000, 998, 1, 0, 0, 0, 1000, 999, 1, 0, 0, 0, 1001, 1004, 1,
  0, 0, 0, 1002, 1005, 7, 16, 0, 0, 1003, 1005, 7, 16, 0, 0, 1004, 1002, 1, 0,
  0, 0, 1004, 1003, 1, 0, 0, 0, 1005, 1008, 1, 0, 0, 0, 1006, 1009, 7, 17, 0, 0,
  1007, 1009, 7, 17, 0, 0, 1008, 1006, 1, 0, 0, 0, 1008, 1007, 1, 0, 0, 0, 1009,
  1012, 1, 0, 0, 0, 1010, 1013, 7, 10, 0, 0, 1011, 1013, 7, 10, 0, 0, 1012,
  1010, 1, 0, 0, 0, 1012, 1011, 1, 0, 0, 0, 1013, 1016, 1, 0, 0, 0, 1014, 1017,
  7, 6, 0, 0, 1015, 1017, 7, 6, 0, 0, 1016, 1014, 1, 0, 0, 0, 1016, 1015, 1, 0,
  0, 0, 1017, 1020, 1, 0, 0, 0, 1018, 1021, 7, 2, 0, 0, 1019, 1021, 7, 2, 0, 0,
  1020, 1018, 1, 0, 0, 0, 1020, 1019, 1, 0, 0, 0, 1021, 147, 1, 0, 0, 0, 1022,
  1023, 3, 150, 75, 0, 1023, 1024, 3, 278, 139, 0, 1024, 1025, 3, 108, 54, 0,
  1025, 1028, 3, 278, 139, 0, 1026, 1029, 3, 152, 76, 0, 1027, 1029, 3, 154, 77,
  0, 1028, 1026, 1, 0, 0, 0, 1028, 1027, 1, 0, 0, 0, 1029, 149, 1, 0, 0, 0,
  1030, 1033, 7, 9, 0, 0, 1031, 1033, 7, 9, 0, 0, 1032, 1030, 1, 0, 0, 0, 1032,
  1031, 1, 0, 0, 0, 1033, 1036, 1, 0, 0, 0, 1034, 1037, 7, 16, 0, 0, 1035, 1037,
  7, 16, 0, 0, 1036, 1034, 1, 0, 0, 0, 1036, 1035, 1, 0, 0, 0, 1037, 1040, 1, 0,
  0, 0, 1038, 1041, 7, 17, 0, 0, 1039, 1041, 7, 17, 0, 0, 1040, 1038, 1, 0, 0,
  0, 1040, 1039, 1, 0, 0, 0, 1041, 1044, 1, 0, 0, 0, 1042, 1045, 7, 10, 0, 0,
  1043, 1045, 7, 10, 0, 0, 1044, 1042, 1, 0, 0, 0, 1044, 1043, 1, 0, 0, 0, 1045,
  151, 1, 0, 0, 0, 1046, 1050, 3, 156, 78, 0, 1047, 1050, 3, 158, 79, 0, 1048,
  1050, 3, 160, 80, 0, 1049, 1046, 1, 0, 0, 0, 1049, 1047, 1, 0, 0, 0, 1049,
  1048, 1, 0, 0, 0, 1050, 153, 1, 0, 0, 0, 1051, 1052, 5, 13, 0, 0, 1052, 1053,
  3, 278, 139, 0, 1053, 1059, 3, 152, 76, 0, 1054, 1055, 3, 280, 140, 0, 1055,
  1056, 3, 152, 76, 0, 1056, 1058, 1, 0, 0, 0, 1057, 1054, 1, 0, 0, 0, 1058,
  1061, 1, 0, 0, 0, 1059, 1057, 1, 0, 0, 0, 1059, 1060, 1, 0, 0, 0, 1060, 1062,
  1, 0, 0, 0, 1061, 1059, 1, 0, 0, 0, 1062, 1063, 3, 278, 139, 0, 1063, 1064, 5,
  14, 0, 0, 1064, 155, 1, 0, 0, 0, 1065, 1068, 7, 8, 0, 0, 1066, 1068, 7, 8, 0,
  0, 1067, 1065, 1, 0, 0, 0, 1067, 1066, 1, 0, 0, 0, 1068, 1071, 1, 0, 0, 0,
  1069, 1072, 7, 16, 0, 0, 1070, 1072, 7, 16, 0, 0, 1071, 1069, 1, 0, 0, 0,
  1071, 1070, 1, 0, 0, 0, 1072, 1075, 1, 0, 0, 0, 1073, 1076, 7, 1, 0, 0, 1074,
  1076, 7, 1, 0, 0, 1075, 1073, 1, 0, 0, 0, 1075, 1074, 1, 0, 0, 0, 1076, 157,
  1, 0, 0, 0, 1077, 1080, 7, 18, 0, 0, 1078, 1080, 7, 18, 0, 0, 1079, 1077, 1,
  0, 0, 0, 1079, 1078, 1, 0, 0, 0, 1080, 1083, 1, 0, 0, 0, 1081, 1084, 7, 8, 0,
  0, 1082, 1084, 7, 8, 0, 0, 1083, 1081, 1, 0, 0, 0, 1083, 1082, 1, 0, 0, 0,
  1084, 1087, 1, 0, 0, 0, 1085, 1088, 7, 1, 0, 0, 1086, 1088, 7, 1, 0, 0, 1087,
  1085, 1, 0, 0, 0, 1087, 1086, 1, 0, 0, 0, 1088, 159, 1, 0, 0, 0, 1089, 1092,
  7, 2, 0, 0, 1090, 1092, 7, 2, 0, 0, 1091, 1089, 1, 0, 0, 0, 1091, 1090, 1, 0,
  0, 0, 1092, 1095, 1, 0, 0, 0, 1093, 1096, 7, 10, 0, 0, 1094, 1096, 7, 10, 0,
  0, 1095, 1093, 1, 0, 0, 0, 1095, 1094, 1, 0, 0, 0, 1096, 1099, 1, 0, 0, 0,
  1097, 1100, 7, 18, 0, 0, 1098, 1100, 7, 18, 0, 0, 1099, 1097, 1, 0, 0, 0,
  1099, 1098, 1, 0, 0, 0, 1100, 161, 1, 0, 0, 0, 1101, 1104, 3, 164, 82, 0,
  1102, 1104, 3, 168, 84, 0, 1103, 1101, 1, 0, 0, 0, 1103, 1102, 1, 0, 0, 0,
  1104, 1108, 1, 0, 0, 0, 1105, 1106, 3, 278, 139, 0, 1106, 1107, 3, 178, 89, 0,
  1107, 1109, 1, 0, 0, 0, 1108, 1105, 1, 0, 0, 0, 1108, 1109, 1, 0, 0, 0, 1109,
  163, 1, 0, 0, 0, 1110, 1111, 3, 166, 83, 0, 1111, 1112, 3, 278, 139, 0, 1112,
  1113, 3, 108, 54, 0, 1113, 1116, 3, 278, 139, 0, 1114, 1117, 3, 16, 8, 0,
  1115, 1117, 3, 176, 88, 0, 1116, 1114, 1, 0, 0, 0, 1116, 1115, 1, 0, 0, 0,
  1117, 165, 1, 0, 0, 0, 1118, 1121, 7, 2, 0, 0, 1119, 1121, 7, 2, 0, 0, 1120,
  1118, 1, 0, 0, 0, 1120, 1119, 1, 0, 0, 0, 1121, 1124, 1, 0, 0, 0, 1122, 1125,
  7, 6, 0, 0, 1123, 1125, 7, 6, 0, 0, 1124, 1122, 1, 0, 0, 0, 1124, 1123, 1, 0,
  0, 0, 1125, 1128, 1, 0, 0, 0, 1126, 1129, 7, 0, 0, 0, 1127, 1129, 7, 0, 0, 0,
  1128, 1126, 1, 0, 0, 0, 1128, 1127, 1, 0, 0, 0, 1129, 1132, 1, 0, 0, 0, 1130,
  1133, 7, 12, 0, 0, 1131, 1133, 7, 12, 0, 0, 1132, 1130, 1, 0, 0, 0, 1132,
  1131, 1, 0, 0, 0, 1133, 1136, 1, 0, 0, 0, 1134, 1137, 7, 10, 0, 0, 1135, 1137,
  7, 10, 0, 0, 1136, 1134, 1, 0, 0, 0, 1136, 1135, 1, 0, 0, 0, 1137, 1140, 1, 0,
  0, 0, 1138, 1141, 7, 13, 0, 0, 1139, 1141, 7, 13, 0, 0, 1140, 1138, 1, 0, 0,
  0, 1140, 1139, 1, 0, 0, 0, 1141, 1144, 1, 0, 0, 0, 1142, 1145, 7, 9, 0, 0,
  1143, 1145, 7, 9, 0, 0, 1144, 1142, 1, 0, 0, 0, 1144, 1143, 1, 0, 0, 0, 1145,
  1148, 1, 0, 0, 0, 1146, 1149, 7, 6, 0, 0, 1147, 1149, 7, 6, 0, 0, 1148, 1146,
  1, 0, 0, 0, 1148, 1147, 1, 0, 0, 0, 1149, 1152, 1, 0, 0, 0, 1150, 1153, 7, 2,
  0, 0, 1151, 1153, 7, 2, 0, 0, 1152, 1150, 1, 0, 0, 0, 1152, 1151, 1, 0, 0, 0,
  1153, 167, 1, 0, 0, 0, 1154, 1155, 3, 170, 85, 0, 1155, 1156, 3, 278, 139, 0,
  1156, 1157, 3, 108, 54, 0, 1157, 1160, 3, 278, 139, 0, 1158, 1161, 3, 172, 86,
  0, 1159, 1161, 3, 174, 87, 0, 1160, 1158, 1, 0, 0, 0, 1160, 1159, 1, 0, 0, 0,
  1161, 169, 1, 0, 0, 0, 1162, 1165, 7, 2, 0, 0, 1163, 1165, 7, 2, 0, 0, 1164,
  1162, 1, 0, 0, 0, 1164, 1163, 1, 0, 0, 0, 1165, 1168, 1, 0, 0, 0, 1166, 1169,
  7, 6, 0, 0, 1167, 1169, 7, 6, 0, 0, 1168, 1166, 1, 0, 0, 0, 1168, 1167, 1, 0,
  0, 0, 1169, 1172, 1, 0, 0, 0, 1170, 1173, 7, 0, 0, 0, 1171, 1173, 7, 0, 0, 0,
  1172, 1170, 1, 0, 0, 0, 1172, 1171, 1, 0, 0, 0, 1173, 1176, 1, 0, 0, 0, 1174,
  1177, 7, 12, 0, 0, 1175, 1177, 7, 12, 0, 0, 1176, 1174, 1, 0, 0, 0, 1176,
  1175, 1, 0, 0, 0, 1177, 1180, 1, 0, 0, 0, 1178, 1181, 7, 10, 0, 0, 1179, 1181,
  7, 10, 0, 0, 1180, 1178, 1, 0, 0, 0, 1180, 1179, 1, 0, 0, 0, 1181, 1184, 1, 0,
  0, 0, 1182, 1185, 7, 13, 0, 0, 1183, 1185, 7, 13, 0, 0, 1184, 1182, 1, 0, 0,
  0, 1184, 1183, 1, 0, 0, 0, 1185, 1188, 1, 0, 0, 0, 1186, 1189, 7, 9, 0, 0,
  1187, 1189, 7, 9, 0, 0, 1188, 1186, 1, 0, 0, 0, 1188, 1187, 1, 0, 0, 0, 1189,
  171, 1, 0, 0, 0, 1190, 1196, 3, 320, 160, 0, 1191, 1195, 3, 322, 161, 0, 1192,
  1195, 3, 320, 160, 0, 1193, 1195, 3, 264, 132, 0, 1194, 1191, 1, 0, 0, 0,
  1194, 1192, 1, 0, 0, 0, 1194, 1193, 1, 0, 0, 0, 1195, 1198, 1, 0, 0, 0, 1196,
  1194, 1, 0, 0, 0, 1196, 1197, 1, 0, 0, 0, 1197, 173, 1, 0, 0, 0, 1198, 1196,
  1, 0, 0, 0, 1199, 1200, 5, 13, 0, 0, 1200, 1201, 3, 278, 139, 0, 1201, 1205,
  3, 172, 86, 0, 1202, 1203, 3, 278, 139, 0, 1203, 1204, 3, 178, 89, 0, 1204,
  1206, 1, 0, 0, 0, 1205, 1202, 1, 0, 0, 0, 1205, 1206, 1, 0, 0, 0, 1206, 1216,
  1, 0, 0, 0, 1207, 1208, 3, 280, 140, 0, 1208, 1212, 3, 172, 86, 0, 1209, 1210,
  3, 278, 139, 0, 1210, 1211, 3, 178, 89, 0, 1211, 1213, 1, 0, 0, 0, 1212, 1209,
  1, 0, 0, 0, 1212, 1213, 1, 0, 0, 0, 1213, 1215, 1, 0, 0, 0, 1214, 1207, 1, 0,
  0, 0, 1215, 1218, 1, 0, 0, 0, 1216, 1214, 1, 0, 0, 0, 1216, 1217, 1, 0, 0, 0,
  1217, 1219, 1, 0, 0, 0, 1218, 1216, 1, 0, 0, 0, 1219, 1220, 3, 278, 139, 0,
  1220, 1221, 5, 14, 0, 0, 1221, 175, 1, 0, 0, 0, 1222, 1223, 5, 13, 0, 0, 1223,
  1224, 3, 278, 139, 0, 1224, 1228, 3, 32, 16, 0, 1225, 1226, 3, 278, 139, 0,
  1226, 1227, 3, 178, 89, 0, 1227, 1229, 1, 0, 0, 0, 1228, 1225, 1, 0, 0, 0,
  1228, 1229, 1, 0, 0, 0, 1229, 1239, 1, 0, 0, 0, 1230, 1231, 3, 280, 140, 0,
  1231, 1235, 3, 32, 16, 0, 1232, 1233, 3, 278, 139, 0, 1233, 1234, 3, 178, 89,
  0, 1234, 1236, 1, 0, 0, 0, 1235, 1232, 1, 0, 0, 0, 1235, 1236, 1, 0, 0, 0,
  1236, 1238, 1, 0, 0, 0, 1237, 1230, 1, 0, 0, 0, 1238, 1241, 1, 0, 0, 0, 1239,
  1237, 1, 0, 0, 0, 1239, 1240, 1, 0, 0, 0, 1240, 1242, 1, 0, 0, 0, 1241, 1239,
  1, 0, 0, 0, 1242, 1243, 3, 278, 139, 0, 1243, 1244, 5, 14, 0, 0, 1244, 177, 1,
  0, 0, 0, 1245, 1248, 3, 180, 90, 0, 1246, 1248, 3, 182, 91, 0, 1247, 1245, 1,
  0, 0, 0, 1247, 1246, 1, 0, 0, 0, 1248, 179, 1, 0, 0, 0, 1249, 1250, 5, 13, 0,
  0, 1250, 1251, 3, 278, 139, 0, 1251, 1257, 3, 32, 16, 0, 1252, 1253, 3, 280,
  140, 0, 1253, 1254, 3, 32, 16, 0, 1254, 1256, 1, 0, 0, 0, 1255, 1252, 1, 0, 0,
  0, 1256, 1259, 1, 0, 0, 0, 1257, 1255, 1, 0, 0, 0, 1257, 1258, 1, 0, 0, 0,
  1258, 1260, 1, 0, 0, 0, 1259, 1257, 1, 0, 0, 0, 1260, 1261, 3, 278, 139, 0,
  1261, 1262, 5, 14, 0, 0, 1262, 181, 1, 0, 0, 0, 1263, 1264, 5, 13, 0, 0, 1264,
  1265, 3, 278, 139, 0, 1265, 1271, 3, 184, 92, 0, 1266, 1267, 3, 280, 140, 0,
  1267, 1268, 3, 184, 92, 0, 1268, 1270, 1, 0, 0, 0, 1269, 1266, 1, 0, 0, 0,
  1270, 1273, 1, 0, 0, 0, 1271, 1269, 1, 0, 0, 0, 1271, 1272, 1, 0, 0, 0, 1272,
  1274, 1, 0, 0, 0, 1273, 1271, 1, 0, 0, 0, 1274, 1275, 3, 278, 139, 0, 1275,
  1276, 5, 14, 0, 0, 1276, 183, 1, 0, 0, 0, 1277, 1280, 3, 186, 93, 0, 1278,
  1280, 3, 188, 94, 0, 1279, 1277, 1, 0, 0, 0, 1279, 1278, 1, 0, 0, 0, 1280,
  185, 1, 0, 0, 0, 1281, 1284, 7, 0, 0, 0, 1282, 1284, 7, 0, 0, 0, 1283, 1281,
  1, 0, 0, 0, 1283, 1282, 1, 0, 0, 0, 1284, 1287, 1, 0, 0, 0, 1285, 1288, 7, 13,
  0, 0, 1286, 1288, 7, 13, 0, 0, 1287, 1285, 1, 0, 0, 0, 1287, 1286, 1, 0, 0, 0,
  1288, 1291, 1, 0, 0, 0, 1289, 1292, 7, 13, 0, 0, 1290, 1292, 7, 13, 0, 0,
  1291, 1289, 1, 0, 0, 0, 1291, 1290, 1, 0, 0, 0, 1292, 1295, 1, 0, 0, 0, 1293,
  1296, 7, 10, 0, 0, 1294, 1296, 7, 10, 0, 0, 1295, 1293, 1, 0, 0, 0, 1295,
  1294, 1, 0, 0, 0, 1296, 1299, 1, 0, 0, 0, 1297, 1300, 7, 17, 0, 0, 1298, 1300,
  7, 17, 0, 0, 1299, 1297, 1, 0, 0, 0, 1299, 1298, 1, 0, 0, 0, 1300, 1303, 1, 0,
  0, 0, 1301, 1304, 7, 9, 0, 0, 1302, 1304, 7, 9, 0, 0, 1303, 1301, 1, 0, 0, 0,
  1303, 1302, 1, 0, 0, 0, 1304, 187, 1, 0, 0, 0, 1305, 1308, 7, 17, 0, 0, 1306,
  1308, 7, 17, 0, 0, 1307, 1305, 1, 0, 0, 0, 1307, 1306, 1, 0, 0, 0, 1308, 1311,
  1, 0, 0, 0, 1309, 1312, 7, 4, 0, 0, 1310, 1312, 7, 4, 0, 0, 1311, 1309, 1, 0,
  0, 0, 1311, 1310, 1, 0, 0, 0, 1312, 1315, 1, 0, 0, 0, 1313, 1316, 7, 10, 0, 0,
  1314, 1316, 7, 10, 0, 0, 1315, 1313, 1, 0, 0, 0, 1315, 1314, 1, 0, 0, 0, 1316,
  1319, 1, 0, 0, 0, 1317, 1320, 7, 18, 0, 0, 1318, 1320, 7, 18, 0, 0, 1319,
  1317, 1, 0, 0, 0, 1319, 1318, 1, 0, 0, 0, 1320, 1323, 1, 0, 0, 0, 1321, 1324,
  7, 10, 0, 0, 1322, 1324, 7, 10, 0, 0, 1323, 1321, 1, 0, 0, 0, 1323, 1322, 1,
  0, 0, 0, 1324, 1327, 1, 0, 0, 0, 1325, 1328, 7, 4, 0, 0, 1326, 1328, 7, 4, 0,
  0, 1327, 1325, 1, 0, 0, 0, 1327, 1326, 1, 0, 0, 0, 1328, 189, 1, 0, 0, 0,
  1329, 1330, 5, 96, 0, 0, 1330, 1331, 5, 96, 0, 0, 1331, 1332, 1, 0, 0, 0,
  1332, 1335, 3, 278, 139, 0, 1333, 1336, 7, 13, 0, 0, 1334, 1336, 7, 13, 0, 0,
  1335, 1333, 1, 0, 0, 0, 1335, 1334, 1, 0, 0, 0, 1336, 1337, 1, 0, 0, 0, 1337,
  1338, 3, 278, 139, 0, 1338, 1346, 3, 192, 96, 0, 1339, 1340, 3, 278, 139, 0,
  1340, 1341, 5, 17, 0, 0, 1341, 1342, 3, 278, 139, 0, 1342, 1343, 3, 192, 96,
  0, 1343, 1345, 1, 0, 0, 0, 1344, 1339, 1, 0, 0, 0, 1345, 1348, 1, 0, 0, 0,
  1346, 1344, 1, 0, 0, 0, 1346, 1347, 1, 0, 0, 0, 1347, 1349, 1, 0, 0, 0, 1348,
  1346, 1, 0, 0, 0, 1349, 1350, 3, 278, 139, 0, 1350, 1351, 5, 98, 0, 0, 1351,
  1352, 5, 98, 0, 0, 1352, 191, 1, 0, 0, 0, 1353, 1358, 3, 194, 97, 0, 1354,
  1358, 3, 212, 106, 0, 1355, 1358, 3, 216, 108, 0, 1356, 1358, 3, 230, 115, 0,
  1357, 1353, 1, 0, 0, 0, 1357, 1354, 1, 0, 0, 0, 1357, 1355, 1, 0, 0, 0, 1357,
  1356, 1, 0, 0, 0, 1358, 193, 1, 0, 0, 0, 1359, 1362, 3, 196, 98, 0, 1360,
  1362, 3, 200, 100, 0, 1361, 1359, 1, 0, 0, 0, 1361, 1360, 1, 0, 0, 0, 1362,
  195, 1, 0, 0, 0, 1363, 1364, 3, 198, 99, 0, 1364, 1365, 3, 278, 139, 0, 1365,
  1366, 3, 108, 54, 0, 1366, 1369, 3, 278, 139, 0, 1367, 1370, 3, 16, 8, 0,
  1368, 1370, 3, 34, 17, 0, 1369, 1367, 1, 0, 0, 0, 1369, 1368, 1, 0, 0, 0,
  1370, 197, 1, 0, 0, 0, 1371, 1374, 7, 2, 0, 0, 1372, 1374, 7, 2, 0, 0, 1373,
  1371, 1, 0, 0, 0, 1373, 1372, 1, 0, 0, 0, 1374, 1377, 1, 0, 0, 0, 1375, 1378,
  7, 10, 0, 0, 1376, 1378, 7, 10, 0, 0, 1377, 1375, 1, 0, 0, 0, 1377, 1376, 1,
  0, 0, 0, 1378, 1381, 1, 0, 0, 0, 1379, 1382, 7, 18, 0, 0, 1380, 1382, 7, 18,
  0, 0, 1381, 1379, 1, 0, 0, 0, 1381, 1380, 1, 0, 0, 0, 1382, 1385, 1, 0, 0, 0,
  1383, 1386, 7, 6, 0, 0, 1384, 1386, 7, 6, 0, 0, 1385, 1383, 1, 0, 0, 0, 1385,
  1384, 1, 0, 0, 0, 1386, 1389, 1, 0, 0, 0, 1387, 1390, 7, 1, 0, 0, 1388, 1390,
  7, 1, 0, 0, 1389, 1387, 1, 0, 0, 0, 1389, 1388, 1, 0, 0, 0, 1390, 1393, 1, 0,
  0, 0, 1391, 1394, 7, 6, 0, 0, 1392, 1394, 7, 6, 0, 0, 1393, 1391, 1, 0, 0, 0,
  1393, 1392, 1, 0, 0, 0, 1394, 1397, 1, 0, 0, 0, 1395, 1398, 7, 9, 0, 0, 1396,
  1398, 7, 9, 0, 0, 1397, 1395, 1, 0, 0, 0, 1397, 1396, 1, 0, 0, 0, 1398, 1401,
  1, 0, 0, 0, 1399, 1402, 7, 6, 0, 0, 1400, 1402, 7, 6, 0, 0, 1401, 1399, 1, 0,
  0, 0, 1401, 1400, 1, 0, 0, 0, 1402, 1405, 1, 0, 0, 0, 1403, 1406, 7, 3, 0, 0,
  1404, 1406, 7, 3, 0, 0, 1405, 1403, 1, 0, 0, 0, 1405, 1404, 1, 0, 0, 0, 1406,
  1409, 1, 0, 0, 0, 1407, 1410, 7, 1, 0, 0, 1408, 1410, 7, 1, 0, 0, 1409, 1407,
  1, 0, 0, 0, 1409, 1408, 1, 0, 0, 0, 1410, 1413, 1, 0, 0, 0, 1411, 1414, 7, 8,
  0, 0, 1412, 1414, 7, 8, 0, 0, 1413, 1411, 1, 0, 0, 0, 1413, 1412, 1, 0, 0, 0,
  1414, 1417, 1, 0, 0, 0, 1415, 1418, 7, 9, 0, 0, 1416, 1418, 7, 9, 0, 0, 1417,
  1415, 1, 0, 0, 0, 1417, 1416, 1, 0, 0, 0, 1418, 1421, 1, 0, 0, 0, 1419, 1422,
  7, 0, 0, 0, 1420, 1422, 7, 0, 0, 0, 1421, 1419, 1, 0, 0, 0, 1421, 1420, 1, 0,
  0, 0, 1422, 1425, 1, 0, 0, 0, 1423, 1426, 7, 9, 0, 0, 1424, 1426, 7, 9, 0, 0,
  1425, 1423, 1, 0, 0, 0, 1425, 1424, 1, 0, 0, 0, 1426, 1429, 1, 0, 0, 0, 1427,
  1430, 7, 7, 0, 0, 1428, 1430, 7, 7, 0, 0, 1429, 1427, 1, 0, 0, 0, 1429, 1428,
  1, 0, 0, 0, 1430, 1433, 1, 0, 0, 0, 1431, 1434, 7, 8, 0, 0, 1432, 1434, 7, 8,
  0, 0, 1433, 1431, 1, 0, 0, 0, 1433, 1432, 1, 0, 0, 0, 1434, 1437, 1, 0, 0, 0,
  1435, 1438, 7, 6, 0, 0, 1436, 1438, 7, 6, 0, 0, 1437, 1435, 1, 0, 0, 0, 1437,
  1436, 1, 0, 0, 0, 1438, 1441, 1, 0, 0, 0, 1439, 1442, 7, 2, 0, 0, 1440, 1442,
  7, 2, 0, 0, 1441, 1439, 1, 0, 0, 0, 1441, 1440, 1, 0, 0, 0, 1442, 199, 1, 0,
  0, 0, 1443, 1444, 3, 202, 101, 0, 1444, 1445, 3, 278, 139, 0, 1445, 1446, 3,
  108, 54, 0, 1446, 1449, 3, 278, 139, 0, 1447, 1450, 3, 204, 102, 0, 1448,
  1450, 3, 206, 103, 0, 1449, 1447, 1, 0, 0, 0, 1449, 1448, 1, 0, 0, 0, 1450,
  201, 1, 0, 0, 0, 1451, 1454, 7, 2, 0, 0, 1452, 1454, 7, 2, 0, 0, 1453, 1451,
  1, 0, 0, 0, 1453, 1452, 1, 0, 0, 0, 1454, 1457, 1, 0, 0, 0, 1455, 1458, 7, 10,
  0, 0, 1456, 1458, 7, 10, 0, 0, 1457, 1455, 1, 0, 0, 0, 1457, 1456, 1, 0, 0, 0,
  1458, 1461, 1, 0, 0, 0, 1459, 1462, 7, 18, 0, 0, 1460, 1462, 7, 18, 0, 0,
  1461, 1459, 1, 0, 0, 0, 1461, 1460, 1, 0, 0, 0, 1462, 1465, 1, 0, 0, 0, 1463,
  1466, 7, 6, 0, 0, 1464, 1466, 7, 6, 0, 0, 1465, 1463, 1, 0, 0, 0, 1465, 1464,
  1, 0, 0, 0, 1466, 1469, 1, 0, 0, 0, 1467, 1470, 7, 1, 0, 0, 1468, 1470, 7, 1,
  0, 0, 1469, 1467, 1, 0, 0, 0, 1469, 1468, 1, 0, 0, 0, 1470, 1473, 1, 0, 0, 0,
  1471, 1474, 7, 6, 0, 0, 1472, 1474, 7, 6, 0, 0, 1473, 1471, 1, 0, 0, 0, 1473,
  1472, 1, 0, 0, 0, 1474, 1477, 1, 0, 0, 0, 1475, 1478, 7, 9, 0, 0, 1476, 1478,
  7, 9, 0, 0, 1477, 1475, 1, 0, 0, 0, 1477, 1476, 1, 0, 0, 0, 1478, 1481, 1, 0,
  0, 0, 1479, 1482, 7, 6, 0, 0, 1480, 1482, 7, 6, 0, 0, 1481, 1479, 1, 0, 0, 0,
  1481, 1480, 1, 0, 0, 0, 1482, 1485, 1, 0, 0, 0, 1483, 1486, 7, 3, 0, 0, 1484,
  1486, 7, 3, 0, 0, 1485, 1483, 1, 0, 0, 0, 1485, 1484, 1, 0, 0, 0, 1486, 1489,
  1, 0, 0, 0, 1487, 1490, 7, 1, 0, 0, 1488, 1490, 7, 1, 0, 0, 1489, 1487, 1, 0,
  0, 0, 1489, 1488, 1, 0, 0, 0, 1490, 1493, 1, 0, 0, 0, 1491, 1494, 7, 8, 0, 0,
  1492, 1494, 7, 8, 0, 0, 1493, 1491, 1, 0, 0, 0, 1493, 1492, 1, 0, 0, 0, 1494,
  1497, 1, 0, 0, 0, 1495, 1498, 7, 9, 0, 0, 1496, 1498, 7, 9, 0, 0, 1497, 1495,
  1, 0, 0, 0, 1497, 1496, 1, 0, 0, 0, 1498, 1501, 1, 0, 0, 0, 1499, 1502, 7, 0,
  0, 0, 1500, 1502, 7, 0, 0, 0, 1501, 1499, 1, 0, 0, 0, 1501, 1500, 1, 0, 0, 0,
  1502, 1505, 1, 0, 0, 0, 1503, 1506, 7, 9, 0, 0, 1504, 1506, 7, 9, 0, 0, 1505,
  1503, 1, 0, 0, 0, 1505, 1504, 1, 0, 0, 0, 1506, 1509, 1, 0, 0, 0, 1507, 1510,
  7, 7, 0, 0, 1508, 1510, 7, 7, 0, 0, 1509, 1507, 1, 0, 0, 0, 1509, 1508, 1, 0,
  0, 0, 1510, 1513, 1, 0, 0, 0, 1511, 1514, 7, 8, 0, 0, 1512, 1514, 7, 8, 0, 0,
  1513, 1511, 1, 0, 0, 0, 1513, 1512, 1, 0, 0, 0, 1514, 203, 1, 0, 0, 0, 1515,
  1518, 3, 208, 104, 0, 1516, 1518, 3, 210, 105, 0, 1517, 1515, 1, 0, 0, 0,
  1517, 1516, 1, 0, 0, 0, 1518, 205, 1, 0, 0, 0, 1519, 1520, 5, 13, 0, 0, 1520,
  1521, 3, 278, 139, 0, 1521, 1527, 3, 204, 102, 0, 1522, 1523, 3, 280, 140, 0,
  1523, 1524, 3, 204, 102, 0, 1524, 1526, 1, 0, 0, 0, 1525, 1522, 1, 0, 0, 0,
  1526, 1529, 1, 0, 0, 0, 1527, 1525, 1, 0, 0, 0, 1527, 1528, 1, 0, 0, 0, 1528,
  1530, 1, 0, 0, 0, 1529, 1527, 1, 0, 0, 0, 1530, 1531, 3, 278, 139, 0, 1531,
  1532, 5, 14, 0, 0, 1532, 207, 1, 0, 0, 0, 1533, 1536, 7, 17, 0, 0, 1534, 1536,
  7, 17, 0, 0, 1535, 1533, 1, 0, 0, 0, 1535, 1534, 1, 0, 0, 0, 1536, 1539, 1, 0,
  0, 0, 1537, 1540, 7, 4, 0, 0, 1538, 1540, 7, 4, 0, 0, 1539, 1537, 1, 0, 0, 0,
  1539, 1538, 1, 0, 0, 0, 1540, 1543, 1, 0, 0, 0, 1541, 1544, 7, 6, 0, 0, 1542,
  1544, 7, 6, 0, 0, 1543, 1541, 1, 0, 0, 0, 1543, 1542, 1, 0, 0, 0, 1544, 1547,
  1, 0, 0, 0, 1545, 1548, 7, 5, 0, 0, 1546, 1548, 7, 5, 0, 0, 1547, 1545, 1, 0,
  0, 0, 1547, 1546, 1, 0, 0, 0, 1548, 1551, 1, 0, 0, 0, 1549, 1552, 7, 6, 0, 0,
  1550, 1552, 7, 6, 0, 0, 1551, 1549, 1, 0, 0, 0, 1551, 1550, 1, 0, 0, 0, 1552,
  1555, 1, 0, 0, 0, 1553, 1556, 7, 9, 0, 0, 1554, 1556, 7, 9, 0, 0, 1555, 1553,
  1, 0, 0, 0, 1555, 1554, 1, 0, 0, 0, 1556, 1559, 1, 0, 0, 0, 1557, 1560, 7, 6,
  0, 0, 1558, 1560, 7, 6, 0, 0, 1559, 1557, 1, 0, 0, 0, 1559, 1558, 1, 0, 0, 0,
  1560, 1563, 1, 0, 0, 0, 1561, 1564, 7, 19, 0, 0, 1562, 1564, 7, 19, 0, 0,
  1563, 1561, 1, 0, 0, 0, 1563, 1562, 1, 0, 0, 0, 1564, 1567, 1, 0, 0, 0, 1565,
  1568, 7, 10, 0, 0, 1566, 1568, 7, 10, 0, 0, 1567, 1565, 1, 0, 0, 0, 1567,
  1566, 1, 0, 0, 0, 1568, 209, 1, 0, 0, 0, 1569, 1572, 7, 2, 0, 0, 1570, 1572,
  7, 2, 0, 0, 1571, 1569, 1, 0, 0, 0, 1571, 1570, 1, 0, 0, 0, 1572, 1575, 1, 0,
  0, 0, 1573, 1576, 7, 10, 0, 0, 1574, 1576, 7, 10, 0, 0, 1575, 1573, 1, 0, 0,
  0, 1575, 1574, 1, 0, 0, 0, 1576, 1579, 1, 0, 0, 0, 1577, 1580, 7, 18, 0, 0,
  1578, 1580, 7, 18, 0, 0, 1579, 1577, 1, 0, 0, 0, 1579, 1578, 1, 0, 0, 0, 1580,
  1583, 1, 0, 0, 0, 1581, 1584, 7, 6, 0, 0, 1582, 1584, 7, 6, 0, 0, 1583, 1581,
  1, 0, 0, 0, 1583, 1582, 1, 0, 0, 0, 1584, 1587, 1, 0, 0, 0, 1585, 1588, 7, 1,
  0, 0, 1586, 1588, 7, 1, 0, 0, 1587, 1585, 1, 0, 0, 0, 1587, 1586, 1, 0, 0, 0,
  1588, 1591, 1, 0, 0, 0, 1589, 1592, 7, 10, 0, 0, 1590, 1592, 7, 10, 0, 0,
  1591, 1589, 1, 0, 0, 0, 1591, 1590, 1, 0, 0, 0, 1592, 1595, 1, 0, 0, 0, 1593,
  1596, 7, 2, 0, 0, 1594, 1596, 7, 2, 0, 0, 1595, 1593, 1, 0, 0, 0, 1595, 1594,
  1, 0, 0, 0, 1596, 211, 1, 0, 0, 0, 1597, 1598, 3, 214, 107, 0, 1598, 1599, 3,
  278, 139, 0, 1599, 1600, 3, 108, 54, 0, 1600, 1603, 3, 278, 139, 0, 1601,
  1604, 3, 16, 8, 0, 1602, 1604, 3, 34, 17, 0, 1603, 1601, 1, 0, 0, 0, 1603,
  1602, 1, 0, 0, 0, 1604, 213, 1, 0, 0, 0, 1605, 1608, 7, 5, 0, 0, 1606, 1608,
  7, 5, 0, 0, 1607, 1605, 1, 0, 0, 0, 1607, 1606, 1, 0, 0, 0, 1608, 1611, 1, 0,
  0, 0, 1609, 1612, 7, 3, 0, 0, 1610, 1612, 7, 3, 0, 0, 1611, 1609, 1, 0, 0, 0,
  1611, 1610, 1, 0, 0, 0, 1612, 1615, 1, 0, 0, 0, 1613, 1616, 7, 2, 0, 0, 1614,
  1616, 7, 2, 0, 0, 1615, 1613, 1, 0, 0, 0, 1615, 1614, 1, 0, 0, 0, 1616, 1619,
  1, 0, 0, 0, 1617, 1620, 7, 7, 0, 0, 1618, 1620, 7, 7, 0, 0, 1619, 1617, 1, 0,
  0, 0, 1619, 1618, 1, 0, 0, 0, 1620, 1623, 1, 0, 0, 0, 1621, 1624, 7, 12, 0, 0,
  1622, 1624, 7, 12, 0, 0, 1623, 1621, 1, 0, 0, 0, 1623, 1622, 1, 0, 0, 0, 1624,
  1627, 1, 0, 0, 0, 1625, 1628, 7, 10, 0, 0, 1626, 1628, 7, 10, 0, 0, 1627,
  1625, 1, 0, 0, 0, 1627, 1626, 1, 0, 0, 0, 1628, 1631, 1, 0, 0, 0, 1629, 1632,
  7, 6, 0, 0, 1630, 1632, 7, 6, 0, 0, 1631, 1629, 1, 0, 0, 0, 1631, 1630, 1, 0,
  0, 0, 1632, 1635, 1, 0, 0, 0, 1633, 1636, 7, 2, 0, 0, 1634, 1636, 7, 2, 0, 0,
  1635, 1633, 1, 0, 0, 0, 1635, 1634, 1, 0, 0, 0, 1636, 215, 1, 0, 0, 0, 1637,
  1638, 3, 218, 109, 0, 1638, 1639, 3, 278, 139, 0, 1639, 1640, 3, 104, 52, 0,
  1640, 1643, 3, 278, 139, 0, 1641, 1644, 3, 220, 110, 0, 1642, 1644, 3, 222,
  111, 0, 1643, 1641, 1, 0, 0, 0, 1643, 1642, 1, 0, 0, 0, 1644, 217, 1, 0, 0, 0,
  1645, 1648, 7, 10, 0, 0, 1646, 1648, 7, 10, 0, 0, 1647, 1645, 1, 0, 0, 0,
  1647, 1646, 1, 0, 0, 0, 1648, 1651, 1, 0, 0, 0, 1649, 1652, 7, 18, 0, 0, 1650,
  1652, 7, 18, 0, 0, 1651, 1649, 1, 0, 0, 0, 1651, 1650, 1, 0, 0, 0, 1652, 1655,
  1, 0, 0, 0, 1653, 1656, 7, 18, 0, 0, 1654, 1656, 7, 18, 0, 0, 1655, 1653, 1,
  0, 0, 0, 1655, 1654, 1, 0, 0, 0, 1656, 1659, 1, 0, 0, 0, 1657, 1660, 7, 10, 0,
  0, 1658, 1660, 7, 10, 0, 0, 1659, 1657, 1, 0, 0, 0, 1659, 1658, 1, 0, 0, 0,
  1660, 1663, 1, 0, 0, 0, 1661, 1664, 7, 13, 0, 0, 1662, 1664, 7, 13, 0, 0,
  1663, 1661, 1, 0, 0, 0, 1663, 1662, 1, 0, 0, 0, 1664, 1667, 1, 0, 0, 0, 1665,
  1668, 7, 9, 0, 0, 1666, 1668, 7, 9, 0, 0, 1667, 1665, 1, 0, 0, 0, 1667, 1666,
  1, 0, 0, 0, 1668, 1671, 1, 0, 0, 0, 1669, 1672, 7, 6, 0, 0, 1670, 1672, 7, 6,
  0, 0, 1671, 1669, 1, 0, 0, 0, 1671, 1670, 1, 0, 0, 0, 1672, 1675, 1, 0, 0, 0,
  1673, 1676, 7, 19, 0, 0, 1674, 1676, 7, 19, 0, 0, 1675, 1673, 1, 0, 0, 0,
  1675, 1674, 1, 0, 0, 0, 1676, 1679, 1, 0, 0, 0, 1677, 1680, 7, 10, 0, 0, 1678,
  1680, 7, 10, 0, 0, 1679, 1677, 1, 0, 0, 0, 1679, 1678, 1, 0, 0, 0, 1680, 1683,
  1, 0, 0, 0, 1681, 1684, 7, 9, 0, 0, 1682, 1684, 7, 9, 0, 0, 1683, 1681, 1, 0,
  0, 0, 1683, 1682, 1, 0, 0, 0, 1684, 1687, 1, 0, 0, 0, 1685, 1688, 7, 6, 0, 0,
  1686, 1688, 7, 6, 0, 0, 1687, 1685, 1, 0, 0, 0, 1687, 1686, 1, 0, 0, 0, 1688,
  1691, 1, 0, 0, 0, 1689, 1692, 7, 5, 0, 0, 1690, 1692, 7, 5, 0, 0, 1691, 1689,
  1, 0, 0, 0, 1691, 1690, 1, 0, 0, 0, 1692, 1695, 1, 0, 0, 0, 1693, 1696, 7, 10,
  0, 0, 1694, 1696, 7, 10, 0, 0, 1695, 1693, 1, 0, 0, 0, 1695, 1694, 1, 0, 0, 0,
  1696, 219, 1, 0, 0, 0, 1697, 1702, 3, 298, 149, 0, 1698, 1699, 3, 224, 112, 0,
  1699, 1700, 3, 226, 113, 0, 1700, 1701, 3, 228, 114, 0, 1701, 1703, 1, 0, 0,
  0, 1702, 1698, 1, 0, 0, 0, 1702, 1703, 1, 0, 0, 0, 1703, 1704, 1, 0, 0, 0,
  1704, 1705, 3, 298, 149, 0, 1705, 221, 1, 0, 0, 0, 1706, 1707, 5, 13, 0, 0,
  1707, 1708, 3, 278, 139, 0, 1708, 1714, 3, 220, 110, 0, 1709, 1710, 3, 280,
  140, 0, 1710, 1711, 3, 220, 110, 0, 1711, 1713, 1, 0, 0, 0, 1712, 1709, 1, 0,
  0, 0, 1713, 1716, 1, 0, 0, 0, 1714, 1712, 1, 0, 0, 0, 1714, 1715, 1, 0, 0, 0,
  1715, 1717, 1, 0, 0, 0, 1716, 1714, 1, 0, 0, 0, 1717, 1718, 3, 278, 139, 0,
  1718, 1719, 5, 14, 0, 0, 1719, 223, 1, 0, 0, 0, 1720, 1721, 3, 308, 154, 0,
  1721, 1722, 3, 304, 152, 0, 1722, 1723, 3, 304, 152, 0, 1723, 1724, 3, 304,
  152, 0, 1724, 225, 1, 0, 0, 0, 1725, 1726, 5, 21, 0, 0, 1726, 1750, 5, 22, 0,
  0, 1727, 1728, 5, 21, 0, 0, 1728, 1750, 5, 23, 0, 0, 1729, 1730, 5, 21, 0, 0,
  1730, 1750, 5, 24, 0, 0, 1731, 1732, 5, 21, 0, 0, 1732, 1750, 5, 25, 0, 0,
  1733, 1734, 5, 21, 0, 0, 1734, 1750, 5, 26, 0, 0, 1735, 1736, 5, 21, 0, 0,
  1736, 1750, 5, 27, 0, 0, 1737, 1738, 5, 21, 0, 0, 1738, 1750, 5, 28, 0, 0,
  1739, 1740, 5, 21, 0, 0, 1740, 1750, 5, 29, 0, 0, 1741, 1742, 5, 21, 0, 0,
  1742, 1750, 5, 30, 0, 0, 1743, 1744, 5, 22, 0, 0, 1744, 1750, 5, 21, 0, 0,
  1745, 1746, 5, 22, 0, 0, 1746, 1750, 5, 22, 0, 0, 1747, 1748, 5, 22, 0, 0,
  1748, 1750, 5, 23, 0, 0, 1749, 1725, 1, 0, 0, 0, 1749, 1727, 1, 0, 0, 0, 1749,
  1729, 1, 0, 0, 0, 1749, 1731, 1, 0, 0, 0, 1749, 1733, 1, 0, 0, 0, 1749, 1735,
  1, 0, 0, 0, 1749, 1737, 1, 0, 0, 0, 1749, 1739, 1, 0, 0, 0, 1749, 1741, 1, 0,
  0, 0, 1749, 1743, 1, 0, 0, 0, 1749, 1745, 1, 0, 0, 0, 1749, 1747, 1, 0, 0, 0,
  1750, 227, 1, 0, 0, 0, 1751, 1752, 5, 21, 0, 0, 1752, 1814, 5, 22, 0, 0, 1753,
  1754, 5, 21, 0, 0, 1754, 1814, 5, 23, 0, 0, 1755, 1756, 5, 21, 0, 0, 1756,
  1814, 5, 24, 0, 0, 1757, 1758, 5, 21, 0, 0, 1758, 1814, 5, 25, 0, 0, 1759,
  1760, 5, 21, 0, 0, 1760, 1814, 5, 26, 0, 0, 1761, 1762, 5, 21, 0, 0, 1762,
  1814, 5, 27, 0, 0, 1763, 1764, 5, 21, 0, 0, 1764, 1814, 5, 28, 0, 0, 1765,
  1766, 5, 21, 0, 0, 1766, 1814, 5, 29, 0, 0, 1767, 1768, 5, 21, 0, 0, 1768,
  1814, 5, 30, 0, 0, 1769, 1770, 5, 22, 0, 0, 1770, 1814, 5, 21, 0, 0, 1771,
  1772, 5, 22, 0, 0, 1772, 1814, 5, 22, 0, 0, 1773, 1774, 5, 22, 0, 0, 1774,
  1814, 5, 23, 0, 0, 1775, 1776, 5, 22, 0, 0, 1776, 1814, 5, 24, 0, 0, 1777,
  1778, 5, 22, 0, 0, 1778, 1814, 5, 25, 0, 0, 1779, 1780, 5, 22, 0, 0, 1780,
  1814, 5, 26, 0, 0, 1781, 1782, 5, 22, 0, 0, 1782, 1814, 5, 27, 0, 0, 1783,
  1784, 5, 22, 0, 0, 1784, 1814, 5, 28, 0, 0, 1785, 1786, 5, 22, 0, 0, 1786,
  1814, 5, 29, 0, 0, 1787, 1788, 5, 22, 0, 0, 1788, 1814, 5, 30, 0, 0, 1789,
  1790, 5, 23, 0, 0, 1790, 1814, 5, 21, 0, 0, 1791, 1792, 5, 23, 0, 0, 1792,
  1814, 5, 22, 0, 0, 1793, 1794, 5, 23, 0, 0, 1794, 1814, 5, 23, 0, 0, 1795,
  1796, 5, 23, 0, 0, 1796, 1814, 5, 24, 0, 0, 1797, 1798, 5, 23, 0, 0, 1798,
  1814, 5, 25, 0, 0, 1799, 1800, 5, 23, 0, 0, 1800, 1814, 5, 26, 0, 0, 1801,
  1802, 5, 23, 0, 0, 1802, 1814, 5, 27, 0, 0, 1803, 1804, 5, 23, 0, 0, 1804,
  1814, 5, 28, 0, 0, 1805, 1806, 5, 23, 0, 0, 1806, 1814, 5, 29, 0, 0, 1807,
  1808, 5, 23, 0, 0, 1808, 1814, 5, 30, 0, 0, 1809, 1810, 5, 24, 0, 0, 1810,
  1814, 5, 21, 0, 0, 1811, 1812, 5, 24, 0, 0, 1812, 1814, 5, 22, 0, 0, 1813,
  1751, 1, 0, 0, 0, 1813, 1753, 1, 0, 0, 0, 1813, 1755, 1, 0, 0, 0, 1813, 1757,
  1, 0, 0, 0, 1813, 1759, 1, 0, 0, 0, 1813, 1761, 1, 0, 0, 0, 1813, 1763, 1, 0,
  0, 0, 1813, 1765, 1, 0, 0, 0, 1813, 1767, 1, 0, 0, 0, 1813, 1769, 1, 0, 0, 0,
  1813, 1771, 1, 0, 0, 0, 1813, 1773, 1, 0, 0, 0, 1813, 1775, 1, 0, 0, 0, 1813,
  1777, 1, 0, 0, 0, 1813, 1779, 1, 0, 0, 0, 1813, 1781, 1, 0, 0, 0, 1813, 1783,
  1, 0, 0, 0, 1813, 1785, 1, 0, 0, 0, 1813, 1787, 1, 0, 0, 0, 1813, 1789, 1, 0,
  0, 0, 1813, 1791, 1, 0, 0, 0, 1813, 1793, 1, 0, 0, 0, 1813, 1795, 1, 0, 0, 0,
  1813, 1797, 1, 0, 0, 0, 1813, 1799, 1, 0, 0, 0, 1813, 1801, 1, 0, 0, 0, 1813,
  1803, 1, 0, 0, 0, 1813, 1805, 1, 0, 0, 0, 1813, 1807, 1, 0, 0, 0, 1813, 1809,
  1, 0, 0, 0, 1813, 1811, 1, 0, 0, 0, 1814, 229, 1, 0, 0, 0, 1815, 1816, 3, 232,
  116, 0, 1816, 1817, 3, 278, 139, 0, 1817, 1818, 3, 108, 54, 0, 1818, 1819, 3,
  278, 139, 0, 1819, 1820, 3, 234, 117, 0, 1820, 231, 1, 0, 0, 0, 1821, 1824, 7,
  0, 0, 0, 1822, 1824, 7, 0, 0, 0, 1823, 1821, 1, 0, 0, 0, 1823, 1822, 1, 0, 0,
  0, 1824, 1827, 1, 0, 0, 0, 1825, 1828, 7, 13, 0, 0, 1826, 1828, 7, 13, 0, 0,
  1827, 1825, 1, 0, 0, 0, 1827, 1826, 1, 0, 0, 0, 1828, 1831, 1, 0, 0, 0, 1829,
  1832, 7, 9, 0, 0, 1830, 1832, 7, 9, 0, 0, 1831, 1829, 1, 0, 0, 0, 1831, 1830,
  1, 0, 0, 0, 1832, 1835, 1, 0, 0, 0, 1833, 1836, 7, 6, 0, 0, 1834, 1836, 7, 6,
  0, 0, 1835, 1833, 1, 0, 0, 0, 1835, 1834, 1, 0, 0, 0, 1836, 1839, 1, 0, 0, 0,
  1837, 1840, 7, 19, 0, 0, 1838, 1840, 7, 19, 0, 0, 1839, 1837, 1, 0, 0, 0,
  1839, 1838, 1, 0, 0, 0, 1840, 1843, 1, 0, 0, 0, 1841, 1844, 7, 10, 0, 0, 1842,
  1844, 7, 10, 0, 0, 1843, 1841, 1, 0, 0, 0, 1843, 1842, 1, 0, 0, 0, 1844, 233,
  1, 0, 0, 0, 1845, 1848, 3, 236, 118, 0, 1846, 1848, 3, 238, 119, 0, 1847,
  1845, 1, 0, 0, 0, 1847, 1846, 1, 0, 0, 0, 1848, 235, 1, 0, 0, 0, 1849, 1855,
  5, 22, 0, 0, 1850, 1851, 7, 9, 0, 0, 1851, 1852, 7, 4, 0, 0, 1852, 1853, 7, 7,
  0, 0, 1853, 1855, 7, 10, 0, 0, 1854, 1849, 1, 0, 0, 0, 1854, 1850, 1, 0, 0, 0,
  1855, 237, 1, 0, 0, 0, 1856, 1863, 5, 21, 0, 0, 1857, 1858, 7, 18, 0, 0, 1858,
  1859, 7, 0, 0, 0, 1859, 1860, 7, 12, 0, 0, 1860, 1861, 7, 8, 0, 0, 1861, 1863,
  7, 10, 0, 0, 1862, 1856, 1, 0, 0, 0, 1862, 1857, 1, 0, 0, 0, 1863, 239, 1, 0,
  0, 0, 1864, 1865, 5, 96, 0, 0, 1865, 1866, 5, 96, 0, 0, 1866, 1867, 1, 0, 0,
  0, 1867, 1870, 3, 278, 139, 0, 1868, 1871, 7, 5, 0, 0, 1869, 1871, 7, 5, 0, 0,
  1870, 1868, 1, 0, 0, 0, 1870, 1869, 1, 0, 0, 0, 1871, 1872, 1, 0, 0, 0, 1872,
  1873, 3, 278, 139, 0, 1873, 1881, 3, 242, 121, 0, 1874, 1875, 3, 278, 139, 0,
  1875, 1876, 5, 17, 0, 0, 1876, 1877, 3, 278, 139, 0, 1877, 1878, 3, 242, 121,
  0, 1878, 1880, 1, 0, 0, 0, 1879, 1874, 1, 0, 0, 0, 1880, 1883, 1, 0, 0, 0,
  1881, 1879, 1, 0, 0, 0, 1881, 1882, 1, 0, 0, 0, 1882, 1884, 1, 0, 0, 0, 1883,
  1881, 1, 0, 0, 0, 1884, 1885, 3, 278, 139, 0, 1885, 1886, 5, 98, 0, 0, 1886,
  1887, 5, 98, 0, 0, 1887, 241, 1, 0, 0, 0, 1888, 1893, 3, 244, 122, 0, 1889,
  1893, 3, 212, 106, 0, 1890, 1893, 3, 216, 108, 0, 1891, 1893, 3, 230, 115, 0,
  1892, 1888, 1, 0, 0, 0, 1892, 1889, 1, 0, 0, 0, 1892, 1890, 1, 0, 0, 0, 1892,
  1891, 1, 0, 0, 0, 1893, 243, 1, 0, 0, 0, 1894, 1895, 3, 28, 14, 0, 1895, 1922,
  3, 278, 139, 0, 1896, 1897, 3, 100, 50, 0, 1897, 1898, 3, 278, 139, 0, 1898,
  1899, 3, 16, 8, 0, 1899, 1923, 1, 0, 0, 0, 1900, 1901, 3, 102, 51, 0, 1901,
  1902, 3, 278, 139, 0, 1902, 1903, 5, 8, 0, 0, 1903, 1904, 3, 260, 130, 0,
  1904, 1923, 1, 0, 0, 0, 1905, 1906, 3, 106, 53, 0, 1906, 1909, 3, 278, 139, 0,
  1907, 1910, 3, 118, 59, 0, 1908, 1910, 3, 120, 60, 0, 1909, 1907, 1, 0, 0, 0,
  1909, 1908, 1, 0, 0, 0, 1910, 1923, 1, 0, 0, 0, 1911, 1912, 3, 108, 54, 0,
  1912, 1913, 3, 278, 139, 0, 1913, 1914, 3, 268, 134, 0, 1914, 1923, 1, 0, 0,
  0, 1915, 1916, 3, 278, 139, 0, 1916, 1917, 3, 104, 52, 0, 1917, 1920, 3, 278,
  139, 0, 1918, 1921, 3, 220, 110, 0, 1919, 1921, 3, 222, 111, 0, 1920, 1918, 1,
  0, 0, 0, 1920, 1919, 1, 0, 0, 0, 1921, 1923, 1, 0, 0, 0, 1922, 1896, 1, 0, 0,
  0, 1922, 1900, 1, 0, 0, 0, 1922, 1905, 1, 0, 0, 0, 1922, 1911, 1, 0, 0, 0,
  1922, 1915, 1, 0, 0, 0, 1923, 245, 1, 0, 0, 0, 1924, 1925, 5, 96, 0, 0, 1925,
  1926, 5, 96, 0, 0, 1926, 1927, 1, 0, 0, 0, 1927, 1928, 3, 278, 139, 0, 1928,
  1929, 5, 16, 0, 0, 1929, 1930, 3, 278, 139, 0, 1930, 1935, 3, 248, 124, 0,
  1931, 1936, 3, 250, 125, 0, 1932, 1933, 3, 278, 139, 0, 1933, 1934, 3, 258,
  129, 0, 1934, 1936, 1, 0, 0, 0, 1935, 1931, 1, 0, 0, 0, 1935, 1932, 1, 0, 0,
  0, 1935, 1936, 1, 0, 0, 0, 1936, 1937, 1, 0, 0, 0, 1937, 1938, 3, 278, 139, 0,
  1938, 1939, 5, 98, 0, 0, 1939, 1940, 5, 98, 0, 0, 1940, 247, 1, 0, 0, 0, 1941,
  1944, 7, 14, 0, 0, 1942, 1944, 7, 14, 0, 0, 1943, 1941, 1, 0, 0, 0, 1943,
  1942, 1, 0, 0, 0, 1944, 1947, 1, 0, 0, 0, 1945, 1948, 7, 6, 0, 0, 1946, 1948,
  7, 6, 0, 0, 1947, 1945, 1, 0, 0, 0, 1947, 1946, 1, 0, 0, 0, 1948, 1951, 1, 0,
  0, 0, 1949, 1952, 7, 8, 0, 0, 1950, 1952, 7, 8, 0, 0, 1951, 1949, 1, 0, 0, 0,
  1951, 1950, 1, 0, 0, 0, 1952, 1955, 1, 0, 0, 0, 1953, 1956, 7, 9, 0, 0, 1954,
  1956, 7, 9, 0, 0, 1955, 1953, 1, 0, 0, 0, 1955, 1954, 1, 0, 0, 0, 1956, 1959,
  1, 0, 0, 0, 1957, 1960, 7, 3, 0, 0, 1958, 1960, 7, 3, 0, 0, 1959, 1957, 1, 0,
  0, 0, 1959, 1958, 1, 0, 0, 0, 1960, 1963, 1, 0, 0, 0, 1961, 1964, 7, 4, 0, 0,
  1962, 1964, 7, 4, 0, 0, 1963, 1961, 1, 0, 0, 0, 1963, 1962, 1, 0, 0, 0, 1964,
  1967, 1, 0, 0, 0, 1965, 1968, 7, 16, 0, 0, 1966, 1968, 7, 16, 0, 0, 1967,
  1965, 1, 0, 0, 0, 1967, 1966, 1, 0, 0, 0, 1968, 249, 1, 0, 0, 0, 1969, 1973,
  3, 252, 126, 0, 1970, 1973, 3, 254, 127, 0, 1971, 1973, 3, 256, 128, 0, 1972,
  1969, 1, 0, 0, 0, 1972, 1970, 1, 0, 0, 0, 1972, 1971, 1, 0, 0, 0, 1973, 251,
  1, 0, 0, 0, 1974, 1977, 7, 20, 0, 0, 1975, 1978, 7, 5, 0, 0, 1976, 1978, 7, 5,
  0, 0, 1977, 1975, 1, 0, 0, 0, 1977, 1976, 1, 0, 0, 0, 1978, 1981, 1, 0, 0, 0,
  1979, 1982, 7, 6, 0, 0, 1980, 1982, 7, 6, 0, 0, 1981, 1979, 1, 0, 0, 0, 1981,
  1980, 1, 0, 0, 0, 1982, 1985, 1, 0, 0, 0, 1983, 1986, 7, 1, 0, 0, 1984, 1986,
  7, 1, 0, 0, 1985, 1983, 1, 0, 0, 0, 1985, 1984, 1, 0, 0, 0, 1986, 253, 1, 0,
  0, 0, 1987, 1990, 7, 20, 0, 0, 1988, 1991, 7, 5, 0, 0, 1989, 1991, 7, 5, 0, 0,
  1990, 1988, 1, 0, 0, 0, 1990, 1989, 1, 0, 0, 0, 1991, 1994, 1, 0, 0, 0, 1992,
  1995, 7, 3, 0, 0, 1993, 1995, 7, 3, 0, 0, 1994, 1992, 1, 0, 0, 0, 1994, 1993,
  1, 0, 0, 0, 1995, 1998, 1, 0, 0, 0, 1996, 1999, 7, 2, 0, 0, 1997, 1999, 7, 2,
  0, 0, 1998, 1996, 1, 0, 0, 0, 1998, 1997, 1, 0, 0, 0, 1999, 255, 1, 0, 0, 0,
  2000, 2003, 7, 20, 0, 0, 2001, 2004, 7, 5, 0, 0, 2002, 2004, 7, 5, 0, 0, 2003,
  2001, 1, 0, 0, 0, 2003, 2002, 1, 0, 0, 0, 2004, 2007, 1, 0, 0, 0, 2005, 2008,
  7, 0, 0, 0, 2006, 2008, 7, 0, 0, 0, 2007, 2005, 1, 0, 0, 0, 2007, 2006, 1, 0,
  0, 0, 2008, 2011, 1, 0, 0, 0, 2009, 2012, 7, 21, 0, 0, 2010, 2012, 7, 21, 0,
  0, 2011, 2009, 1, 0, 0, 0, 2011, 2010, 1, 0, 0, 0, 2012, 257, 1, 0, 0, 0,
  2013, 2014, 5, 13, 0, 0, 2014, 2015, 3, 278, 139, 0, 2015, 2016, 3, 0, 0, 0,
  2016, 2017, 3, 278, 139, 0, 2017, 2018, 5, 14, 0, 0, 2018, 259, 1, 0, 0, 0,
  2019, 2021, 7, 22, 0, 0, 2020, 2019, 1, 0, 0, 0, 2020, 2021, 1, 0, 0, 0, 2021,
  2024, 1, 0, 0, 0, 2022, 2025, 3, 266, 133, 0, 2023, 2025, 3, 264, 132, 0,
  2024, 2022, 1, 0, 0, 0, 2024, 2023, 1, 0, 0, 0, 2025, 261, 1, 0, 0, 0, 2026,
  2029, 3, 312, 156, 0, 2027, 2029, 3, 314, 157, 0, 2028, 2026, 1, 0, 0, 0,
  2028, 2027, 1, 0, 0, 0, 2029, 2030, 1, 0, 0, 0, 2030, 2028, 1, 0, 0, 0, 2030,
  2031, 1, 0, 0, 0, 2031, 263, 1, 0, 0, 0, 2032, 2036, 3, 308, 154, 0, 2033,
  2035, 3, 304, 152, 0, 2034, 2033, 1, 0, 0, 0, 2035, 2038, 1, 0, 0, 0, 2036,
  2034, 1, 0, 0, 0, 2036, 2037, 1, 0, 0, 0, 2037, 2041, 1, 0, 0, 0, 2038, 2036,
  1, 0, 0, 0, 2039, 2041, 3, 306, 153, 0, 2040, 2032, 1, 0, 0, 0, 2040, 2039, 1,
  0, 0, 0, 2041, 265, 1, 0, 0, 0, 2042, 2043, 3, 264, 132, 0, 2043, 2045, 5, 19,
  0, 0, 2044, 2046, 3, 304, 152, 0, 2045, 2044, 1, 0, 0, 0, 2046, 2047, 1, 0, 0,
  0, 2047, 2045, 1, 0, 0, 0, 2047, 2048, 1, 0, 0, 0, 2048, 267, 1, 0, 0, 0,
  2049, 2052, 3, 270, 135, 0, 2050, 2052, 3, 272, 136, 0, 2051, 2049, 1, 0, 0,
  0, 2051, 2050, 1, 0, 0, 0, 2052, 269, 1, 0, 0, 0, 2053, 2056, 7, 9, 0, 0,
  2054, 2056, 7, 9, 0, 0, 2055, 2053, 1, 0, 0, 0, 2055, 2054, 1, 0, 0, 0, 2056,
  2059, 1, 0, 0, 0, 2057, 2060, 7, 4, 0, 0, 2058, 2060, 7, 4, 0, 0, 2059, 2057,
  1, 0, 0, 0, 2059, 2058, 1, 0, 0, 0, 2060, 2063, 1, 0, 0, 0, 2061, 2064, 7, 7,
  0, 0, 2062, 2064, 7, 7, 0, 0, 2063, 2061, 1, 0, 0, 0, 2063, 2062, 1, 0, 0, 0,
  2064, 2067, 1, 0, 0, 0, 2065, 2068, 7, 10, 0, 0, 2066, 2068, 7, 10, 0, 0,
  2067, 2065, 1, 0, 0, 0, 2067, 2066, 1, 0, 0, 0, 2068, 271, 1, 0, 0, 0, 2069,
  2072, 7, 18, 0, 0, 2070, 2072, 7, 18, 0, 0, 2071, 2069, 1, 0, 0, 0, 2071,
  2070, 1, 0, 0, 0, 2072, 2075, 1, 0, 0, 0, 2073, 2076, 7, 0, 0, 0, 2074, 2076,
  7, 0, 0, 0, 2075, 2073, 1, 0, 0, 0, 2075, 2074, 1, 0, 0, 0, 2076, 2079, 1, 0,
  0, 0, 2077, 2080, 7, 12, 0, 0, 2078, 2080, 7, 12, 0, 0, 2079, 2077, 1, 0, 0,
  0, 2079, 2078, 1, 0, 0, 0, 2080, 2083, 1, 0, 0, 0, 2081, 2084, 7, 8, 0, 0,
  2082, 2084, 7, 8, 0, 0, 2083, 2081, 1, 0, 0, 0, 2083, 2082, 1, 0, 0, 0, 2084,
  2087, 1, 0, 0, 0, 2085, 2088, 7, 10, 0, 0, 2086, 2088, 7, 10, 0, 0, 2087,
  2085, 1, 0, 0, 0, 2087, 2086, 1, 0, 0, 0, 2088, 273, 1, 0, 0, 0, 2089, 2093,
  3, 308, 154, 0, 2090, 2092, 3, 304, 152, 0, 2091, 2090, 1, 0, 0, 0, 2092,
  2095, 1, 0, 0, 0, 2093, 2091, 1, 0, 0, 0, 2093, 2094, 1, 0, 0, 0, 2094, 2098,
  1, 0, 0, 0, 2095, 2093, 1, 0, 0, 0, 2096, 2098, 3, 306, 153, 0, 2097, 2089, 1,
  0, 0, 0, 2097, 2096, 1, 0, 0, 0, 2098, 275, 1, 0, 0, 0, 2099, 2100, 3, 308,
  154, 0, 2100, 2101, 3, 304, 152, 0, 2101, 2102, 3, 304, 152, 0, 2102, 2103, 3,
  304, 152, 0, 2103, 2104, 3, 304, 152, 0, 2104, 2196, 3, 304, 152, 0, 2105,
  2106, 3, 304, 152, 0, 2106, 2107, 3, 304, 152, 0, 2107, 2108, 3, 304, 152, 0,
  2108, 2109, 3, 304, 152, 0, 2109, 2110, 3, 304, 152, 0, 2110, 2111, 3, 304,
  152, 0, 2111, 2112, 3, 304, 152, 0, 2112, 2113, 3, 304, 152, 0, 2113, 2114, 3,
  304, 152, 0, 2114, 2115, 3, 304, 152, 0, 2115, 2116, 3, 304, 152, 0, 2116,
  2117, 3, 304, 152, 0, 2117, 2197, 1, 0, 0, 0, 2118, 2119, 3, 304, 152, 0,
  2119, 2120, 3, 304, 152, 0, 2120, 2121, 3, 304, 152, 0, 2121, 2122, 3, 304,
  152, 0, 2122, 2123, 3, 304, 152, 0, 2123, 2124, 3, 304, 152, 0, 2124, 2125, 3,
  304, 152, 0, 2125, 2126, 3, 304, 152, 0, 2126, 2127, 3, 304, 152, 0, 2127,
  2128, 3, 304, 152, 0, 2128, 2129, 3, 304, 152, 0, 2129, 2197, 1, 0, 0, 0,
  2130, 2131, 3, 304, 152, 0, 2131, 2132, 3, 304, 152, 0, 2132, 2133, 3, 304,
  152, 0, 2133, 2134, 3, 304, 152, 0, 2134, 2135, 3, 304, 152, 0, 2135, 2136, 3,
  304, 152, 0, 2136, 2137, 3, 304, 152, 0, 2137, 2138, 3, 304, 152, 0, 2138,
  2139, 3, 304, 152, 0, 2139, 2140, 3, 304, 152, 0, 2140, 2197, 1, 0, 0, 0,
  2141, 2142, 3, 304, 152, 0, 2142, 2143, 3, 304, 152, 0, 2143, 2144, 3, 304,
  152, 0, 2144, 2145, 3, 304, 152, 0, 2145, 2146, 3, 304, 152, 0, 2146, 2147, 3,
  304, 152, 0, 2147, 2148, 3, 304, 152, 0, 2148, 2149, 3, 304, 152, 0, 2149,
  2150, 3, 304, 152, 0, 2150, 2197, 1, 0, 0, 0, 2151, 2152, 3, 304, 152, 0,
  2152, 2153, 3, 304, 152, 0, 2153, 2154, 3, 304, 152, 0, 2154, 2155, 3, 304,
  152, 0, 2155, 2156, 3, 304, 152, 0, 2156, 2157, 3, 304, 152, 0, 2157, 2158, 3,
  304, 152, 0, 2158, 2159, 3, 304, 152, 0, 2159, 2197, 1, 0, 0, 0, 2160, 2161,
  3, 304, 152, 0, 2161, 2162, 3, 304, 152, 0, 2162, 2163, 3, 304, 152, 0, 2163,
  2164, 3, 304, 152, 0, 2164, 2165, 3, 304, 152, 0, 2165, 2166, 3, 304, 152, 0,
  2166, 2167, 3, 304, 152, 0, 2167, 2197, 1, 0, 0, 0, 2168, 2169, 3, 304, 152,
  0, 2169, 2170, 3, 304, 152, 0, 2170, 2171, 3, 304, 152, 0, 2171, 2172, 3, 304,
  152, 0, 2172, 2173, 3, 304, 152, 0, 2173, 2174, 3, 304, 152, 0, 2174, 2197, 1,
  0, 0, 0, 2175, 2176, 3, 304, 152, 0, 2176, 2177, 3, 304, 152, 0, 2177, 2178,
  3, 304, 152, 0, 2178, 2179, 3, 304, 152, 0, 2179, 2180, 3, 304, 152, 0, 2180,
  2197, 1, 0, 0, 0, 2181, 2182, 3, 304, 152, 0, 2182, 2183, 3, 304, 152, 0,
  2183, 2184, 3, 304, 152, 0, 2184, 2185, 3, 304, 152, 0, 2185, 2197, 1, 0, 0,
  0, 2186, 2187, 3, 304, 152, 0, 2187, 2188, 3, 304, 152, 0, 2188, 2189, 3, 304,
  152, 0, 2189, 2197, 1, 0, 0, 0, 2190, 2191, 3, 304, 152, 0, 2191, 2192, 3,
  304, 152, 0, 2192, 2197, 1, 0, 0, 0, 2193, 2195, 3, 304, 152, 0, 2194, 2193,
  1, 0, 0, 0, 2194, 2195, 1, 0, 0, 0, 2195, 2197, 1, 0, 0, 0, 2196, 2105, 1, 0,
  0, 0, 2196, 2118, 1, 0, 0, 0, 2196, 2130, 1, 0, 0, 0, 2196, 2141, 1, 0, 0, 0,
  2196, 2151, 1, 0, 0, 0, 2196, 2160, 1, 0, 0, 0, 2196, 2168, 1, 0, 0, 0, 2196,
  2175, 1, 0, 0, 0, 2196, 2181, 1, 0, 0, 0, 2196, 2186, 1, 0, 0, 0, 2196, 2190,
  1, 0, 0, 0, 2196, 2194, 1, 0, 0, 0, 2197, 277, 1, 0, 0, 0, 2198, 2204, 3, 290,
  145, 0, 2199, 2204, 3, 292, 146, 0, 2200, 2204, 3, 294, 147, 0, 2201, 2204, 3,
  296, 148, 0, 2202, 2204, 3, 282, 141, 0, 2203, 2198, 1, 0, 0, 0, 2203, 2199,
  1, 0, 0, 0, 2203, 2200, 1, 0, 0, 0, 2203, 2201, 1, 0, 0, 0, 2203, 2202, 1, 0,
  0, 0, 2204, 2207, 1, 0, 0, 0, 2205, 2203, 1, 0, 0, 0, 2205, 2206, 1, 0, 0, 0,
  2206, 279, 1, 0, 0, 0, 2207, 2205, 1, 0, 0, 0, 2208, 2214, 3, 290, 145, 0,
  2209, 2214, 3, 292, 146, 0, 2210, 2214, 3, 294, 147, 0, 2211, 2214, 3, 296,
  148, 0, 2212, 2214, 3, 282, 141, 0, 2213, 2208, 1, 0, 0, 0, 2213, 2209, 1, 0,
  0, 0, 2213, 2210, 1, 0, 0, 0, 2213, 2211, 1, 0, 0, 0, 2213, 2212, 1, 0, 0, 0,
  2214, 2215, 1, 0, 0, 0, 2215, 2213, 1, 0, 0, 0, 2215, 2216, 1, 0, 0, 0, 2216,
  281, 1, 0, 0, 0, 2217, 2218, 5, 20, 0, 0, 2218, 2219, 5, 15, 0, 0, 2219, 2224,
  1, 0, 0, 0, 2220, 2223, 3, 284, 142, 0, 2221, 2223, 3, 286, 143, 0, 2222,
  2220, 1, 0, 0, 0, 2222, 2221, 1, 0, 0, 0, 2223, 2226, 1, 0, 0, 0, 2224, 2222,
  1, 0, 0, 0, 2224, 2225, 1, 0, 0, 0, 2225, 2227, 1, 0, 0, 0, 2226, 2224, 1, 0,
  0, 0, 2227, 2228, 5, 15, 0, 0, 2228, 2229, 5, 20, 0, 0, 2229, 283, 1, 0, 0, 0,
  2230, 2238, 3, 290, 145, 0, 2231, 2238, 3, 292, 146, 0, 2232, 2238, 3, 294,
  147, 0, 2233, 2238, 3, 296, 148, 0, 2234, 2238, 7, 23, 0, 0, 2235, 2238, 7,
  24, 0, 0, 2236, 2238, 5, 1, 0, 0, 2237, 2230, 1, 0, 0, 0, 2237, 2231, 1, 0, 0,
  0, 2237, 2232, 1, 0, 0, 0, 2237, 2233, 1, 0, 0, 0, 2237, 2234, 1, 0, 0, 0,
  2237, 2235, 1, 0, 0, 0, 2237, 2236, 1, 0, 0, 0, 2238, 285, 1, 0, 0, 0, 2239,
  2240, 5, 15, 0, 0, 2240, 2241, 3, 288, 144, 0, 2241, 287, 1, 0, 0, 0, 2242,
  2250, 3, 290, 145, 0, 2243, 2250, 3, 292, 146, 0, 2244, 2250, 3, 294, 147, 0,
  2245, 2250, 3, 296, 148, 0, 2246, 2250, 7, 25, 0, 0, 2247, 2250, 7, 26, 0, 0,
  2248, 2250, 5, 1, 0, 0, 2249, 2242, 1, 0, 0, 0, 2249, 2243, 1, 0, 0, 0, 2249,
  2244, 1, 0, 0, 0, 2249, 2245, 1, 0, 0, 0, 2249, 2246, 1, 0, 0, 0, 2249, 2247,
  1, 0, 0, 0, 2249, 2248, 1, 0, 0, 0, 2250, 289, 1, 0, 0, 0, 2251, 2252, 5, 5,
  0, 0, 2252, 291, 1, 0, 0, 0, 2253, 2254, 5, 2, 0, 0, 2254, 293, 1, 0, 0, 0,
  2255, 2256, 5, 4, 0, 0, 2256, 295, 1, 0, 0, 0, 2257, 2258, 5, 3, 0, 0, 2258,
  297, 1, 0, 0, 0, 2259, 2260, 5, 7, 0, 0, 2260, 299, 1, 0, 0, 0, 2261, 2262, 5,
  65, 0, 0, 2262, 301, 1, 0, 0, 0, 2263, 2264, 5, 15, 0, 0, 2264, 303, 1, 0, 0,
  0, 2265, 2266, 7, 27, 0, 0, 2266, 305, 1, 0, 0, 0, 2267, 2268, 5, 21, 0, 0,
  2268, 307, 1, 0, 0, 0, 2269, 2270, 7, 28, 0, 0, 2270, 309, 1, 0, 0, 0, 2271,
  2275, 7, 29, 0, 0, 2272, 2275, 7, 30, 0, 0, 2273, 2275, 5, 1, 0, 0, 2274,
  2271, 1, 0, 0, 0, 2274, 2272, 1, 0, 0, 0, 2274, 2273, 1, 0, 0, 0, 2275, 311,
  1, 0, 0, 0, 2276, 2285, 3, 290, 145, 0, 2277, 2285, 3, 292, 146, 0, 2278,
  2285, 3, 294, 147, 0, 2279, 2285, 3, 296, 148, 0, 2280, 2285, 7, 31, 0, 0,
  2281, 2285, 7, 32, 0, 0, 2282, 2285, 7, 33, 0, 0, 2283, 2285, 5, 1, 0, 0,
  2284, 2276, 1, 0, 0, 0, 2284, 2277, 1, 0, 0, 0, 2284, 2278, 1, 0, 0, 0, 2284,
  2279, 1, 0, 0, 0, 2284, 2280, 1, 0, 0, 0, 2284, 2281, 1, 0, 0, 0, 2284, 2282,
  1, 0, 0, 0, 2284, 2283, 1, 0, 0, 0, 2285, 313, 1, 0, 0, 0, 2286, 2287, 3, 300,
  150, 0, 2287, 2288, 3, 298, 149, 0, 2288, 2293, 1, 0, 0, 0, 2289, 2290, 3,
  300, 150, 0, 2290, 2291, 3, 300, 150, 0, 2291, 2293, 1, 0, 0, 0, 2292, 2286,
  1, 0, 0, 0, 2292, 2289, 1, 0, 0, 0, 2293, 315, 1, 0, 0, 0, 2294, 2295, 3, 300,
  150, 0, 2295, 2296, 3, 298, 149, 0, 2296, 2304, 1, 0, 0, 0, 2297, 2298, 3,
  300, 150, 0, 2298, 2299, 3, 300, 150, 0, 2299, 2304, 1, 0, 0, 0, 2300, 2301,
  3, 300, 150, 0, 2301, 2302, 3, 302, 151, 0, 2302, 2304, 1, 0, 0, 0, 2303,
  2294, 1, 0, 0, 0, 2303, 2297, 1, 0, 0, 0, 2303, 2300, 1, 0, 0, 0, 2304, 317,
  1, 0, 0, 0, 2305, 2310, 5, 6, 0, 0, 2306, 2310, 7, 32, 0, 0, 2307, 2310, 7,
  33, 0, 0, 2308, 2310, 5, 1, 0, 0, 2309, 2305, 1, 0, 0, 0, 2309, 2306, 1, 0, 0,
  0, 2309, 2307, 1, 0, 0, 0, 2309, 2308, 1, 0, 0, 0, 2310, 319, 1, 0, 0, 0,
  2311, 2314, 7, 34, 0, 0, 2312, 2314, 7, 35, 0, 0, 2313, 2311, 1, 0, 0, 0,
  2313, 2312, 1, 0, 0, 0, 2314, 321, 1, 0, 0, 0, 2315, 2316, 5, 18, 0, 0, 2316,
  323, 1, 0, 0, 0, 313, 329, 342, 352, 362, 376, 385, 390, 399, 406, 416, 418,
  423, 427, 433, 437, 447, 452, 462, 467, 472, 484, 494, 504, 509, 514, 518,
  531, 559, 563, 567, 571, 575, 579, 585, 589, 593, 597, 601, 609, 618, 627,
  637, 643, 652, 661, 670, 677, 690, 695, 712, 718, 731, 742, 753, 764, 769,
  774, 782, 793, 807, 815, 819, 823, 827, 831, 838, 847, 857, 865, 869, 873,
  877, 881, 885, 889, 893, 897, 901, 903, 913, 921, 923, 935, 939, 943, 947,
  951, 955, 959, 963, 967, 980, 988, 996, 1000, 1004, 1008, 1012, 1016, 1020,
  1028, 1032, 1036, 1040, 1044, 1049, 1059, 1067, 1071, 1075, 1079, 1083, 1087,
  1091, 1095, 1099, 1103, 1108, 1116, 1120, 1124, 1128, 1132, 1136, 1140, 1144,
  1148, 1152, 1160, 1164, 1168, 1172, 1176, 1180, 1184, 1188, 1194, 1196, 1205,
  1212, 1216, 1228, 1235, 1239, 1247, 1257, 1271, 1279, 1283, 1287, 1291, 1295,
  1299, 1303, 1307, 1311, 1315, 1319, 1323, 1327, 1335, 1346, 1357, 1361, 1369,
  1373, 1377, 1381, 1385, 1389, 1393, 1397, 1401, 1405, 1409, 1413, 1417, 1421,
  1425, 1429, 1433, 1437, 1441, 1449, 1453, 1457, 1461, 1465, 1469, 1473, 1477,
  1481, 1485, 1489, 1493, 1497, 1501, 1505, 1509, 1513, 1517, 1527, 1535, 1539,
  1543, 1547, 1551, 1555, 1559, 1563, 1567, 1571, 1575, 1579, 1583, 1587, 1591,
  1595, 1603, 1607, 1611, 1615, 1619, 1623, 1627, 1631, 1635, 1643, 1647, 1651,
  1655, 1659, 1663, 1667, 1671, 1675, 1679, 1683, 1687, 1691, 1695, 1702, 1714,
  1749, 1813, 1823, 1827, 1831, 1835, 1839, 1843, 1847, 1854, 1862, 1870, 1881,
  1892, 1909, 1920, 1922, 1935, 1943, 1947, 1951, 1955, 1959, 1963, 1967, 1972,
  1977, 1981, 1985, 1990, 1994, 1998, 2003, 2007, 2011, 2020, 2024, 2028, 2030,
  2036, 2040, 2047, 2051, 2055, 2059, 2063, 2067, 2071, 2075, 2079, 2083, 2087,
  2093, 2097, 2194, 2196, 2203, 2205, 2213, 2215, 2222, 2224, 2237, 2249, 2274,
  2284, 2292, 2303, 2309, 2313,
];

const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map(
  (ds, index) => new antlr4.dfa.DFA(ds, index),
);

const sharedContextCache = new antlr4.PredictionContextCache();

export default class ECLParser extends antlr4.Parser {
  static grammarFileName = "ECL.g4";
  static literalNames = [
    null,
    null,
    "'\\u0009'",
    "'\\u000A'",
    "'\\u000D'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
  ];
  static symbolicNames = [
    null,
    "UTF8_LETTER",
    "TAB",
    "LF",
    "CR",
    "SPACE",
    "EXCLAMATION",
    "QUOTE",
    "HASH",
    "DOLLAR",
    "PERCENT",
    "AMPERSAND",
    "APOSTROPHE",
    "LEFT_PAREN",
    "RIGHT_PAREN",
    "ASTERISK",
    "PLUS",
    "COMMA",
    "DASH",
    "PERIOD",
    "SLASH",
    "ZERO",
    "ONE",
    "TWO",
    "THREE",
    "FOUR",
    "FIVE",
    "SIX",
    "SEVEN",
    "EIGHT",
    "NINE",
    "COLON",
    "SEMICOLON",
    "LESS_THAN",
    "EQUALS",
    "GREATER_THAN",
    "QUESTION",
    "AT",
    "CAP_A",
    "CAP_B",
    "CAP_C",
    "CAP_D",
    "CAP_E",
    "CAP_F",
    "CAP_G",
    "CAP_H",
    "CAP_I",
    "CAP_J",
    "CAP_K",
    "CAP_L",
    "CAP_M",
    "CAP_N",
    "CAP_O",
    "CAP_P",
    "CAP_Q",
    "CAP_R",
    "CAP_S",
    "CAP_T",
    "CAP_U",
    "CAP_V",
    "CAP_W",
    "CAP_X",
    "CAP_Y",
    "CAP_Z",
    "LEFT_BRACE",
    "BACKSLASH",
    "RIGHT_BRACE",
    "CARAT",
    "UNDERSCORE",
    "ACCENT",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "LEFT_CURLY_BRACE",
    "PIPE",
    "RIGHT_CURLY_BRACE",
    "TILDE",
  ];
  static ruleNames = [
    "expressionconstraint",
    "refinedexpressionconstraint",
    "compoundexpressionconstraint",
    "conjunctionexpressionconstraint",
    "disjunctionexpressionconstraint",
    "exclusionexpressionconstraint",
    "dottedexpressionconstraint",
    "dottedexpressionattribute",
    "subexpressionconstraint",
    "eclfocusconcept",
    "dot",
    "memberof",
    "refsetfieldset",
    "refsetfield",
    "refsetfieldname",
    "refsetfieldref",
    "eclconceptreference",
    "eclconceptreferenceset",
    "conceptid",
    "term",
    "wildcard",
    "constraintoperator",
    "descendantof",
    "descendantorselfof",
    "childof",
    "childorselfof",
    "ancestorof",
    "ancestororselfof",
    "parentof",
    "parentorselfof",
    "conjunction",
    "disjunction",
    "exclusion",
    "eclrefinement",
    "conjunctionrefinementset",
    "disjunctionrefinementset",
    "subrefinement",
    "eclattributeset",
    "conjunctionattributeset",
    "disjunctionattributeset",
    "subattributeset",
    "eclattributegroup",
    "eclattribute",
    "cardinality",
    "minvalue",
    "to",
    "maxvalue",
    "many",
    "reverseflag",
    "eclattributename",
    "expressioncomparisonoperator",
    "numericcomparisonoperator",
    "timecomparisonoperator",
    "stringcomparisonoperator",
    "booleancomparisonoperator",
    "descriptionfilterconstraint",
    "descriptionfilter",
    "termfilter",
    "termkeyword",
    "typedsearchterm",
    "typedsearchtermset",
    "wild",
    "matchkeyword",
    "matchsearchterm",
    "matchsearchtermset",
    "wildsearchterm",
    "wildsearchtermset",
    "languagefilter",
    "language",
    "languagecode",
    "languagecodeset",
    "typefilter",
    "typeidfilter",
    "typeid",
    "typetokenfilter",
    "type",
    "typetoken",
    "typetokenset",
    "synonym",
    "fullyspecifiedname",
    "definition",
    "dialectfilter",
    "dialectidfilter",
    "dialectid",
    "dialectaliasfilter",
    "dialect",
    "dialectalias",
    "dialectaliasset",
    "dialectidset",
    "acceptabilityset",
    "acceptabilityconceptreferenceset",
    "acceptabilitytokenset",
    "acceptabilitytoken",
    "acceptable",
    "preferred",
    "conceptfilterconstraint",
    "conceptfilter",
    "definitionstatusfilter",
    "definitionstatusidfilter",
    "definitionstatusidkeyword",
    "definitionstatustokenfilter",
    "definitionstatuskeyword",
    "definitionstatustoken",
    "definitionstatustokenset",
    "primitivetoken",
    "definedtoken",
    "modulefilter",
    "moduleidkeyword",
    "effectivetimefilter",
    "effectivetimekeyword",
    "timevalue",
    "timevalueset",
    "year",
    "month",
    "day",
    "activefilter",
    "activekeyword",
    "activevalue",
    "activetruevalue",
    "activefalsevalue",
    "memberfilterconstraint",
    "memberfilter",
    "memberfieldfilter",
    "historysupplement",
    "historykeyword",
    "historyprofilesuffix",
    "historyminimumsuffix",
    "historymoderatesuffix",
    "historymaximumsuffix",
    "historysubset",
    "numericvalue",
    "stringvalue",
    "integervalue",
    "decimalvalue",
    "booleanvalue",
    "true_1",
    "false_1",
    "nonnegativeintegervalue",
    "sctid",
    "ws",
    "mws",
    "comment",
    "nonstarchar",
    "starwithnonfslash",
    "nonfslash",
    "sp",
    "htab",
    "cr",
    "lf",
    "qm",
    "bs",
    "star",
    "digit",
    "zero",
    "digitnonzero",
    "nonwsnonpipe",
    "anynonescapedchar",
    "escapedchar",
    "escapedwildchar",
    "nonwsnonescapedchar",
    "alpha",
    "dash",
  ];

  constructor(input) {
    super(input);
    this._interp = new antlr4.atn.ParserATNSimulator(
      this,
      atn,
      decisionsToDFA,
      sharedContextCache,
    );
    this.ruleNames = ECLParser.ruleNames;
    this.literalNames = ECLParser.literalNames;
    this.symbolicNames = ECLParser.symbolicNames;
  }

  get atn() {
    return atn;
  }

  expressionconstraint() {
    let localctx = new ExpressionconstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ECLParser.RULE_expressionconstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 324;
      this.ws();
      this.state = 329;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
      switch (la_) {
        case 1:
          this.state = 325;
          this.refinedexpressionconstraint();
          break;

        case 2:
          this.state = 326;
          this.compoundexpressionconstraint();
          break;

        case 3:
          this.state = 327;
          this.dottedexpressionconstraint();
          break;

        case 4:
          this.state = 328;
          this.subexpressionconstraint();
          break;
      }
      this.state = 331;
      this.ws();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  refinedexpressionconstraint() {
    let localctx = new RefinedexpressionconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 2, ECLParser.RULE_refinedexpressionconstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 333;
      this.subexpressionconstraint();
      this.state = 334;
      this.ws();
      this.state = 335;
      this.match(ECLParser.COLON);
      this.state = 336;
      this.ws();
      this.state = 337;
      this.eclrefinement();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  compoundexpressionconstraint() {
    let localctx = new CompoundexpressionconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 4, ECLParser.RULE_compoundexpressionconstraint);
    try {
      this.state = 342;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 339;
          this.conjunctionexpressionconstraint();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 340;
          this.disjunctionexpressionconstraint();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 341;
          this.exclusionexpressionconstraint();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  conjunctionexpressionconstraint() {
    let localctx = new ConjunctionexpressionconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 6, ECLParser.RULE_conjunctionexpressionconstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 344;
      this.subexpressionconstraint();
      this.state = 350;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 345;
            this.ws();
            this.state = 346;
            this.conjunction();
            this.state = 347;
            this.ws();
            this.state = 348;
            this.subexpressionconstraint();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 352;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 2, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  disjunctionexpressionconstraint() {
    let localctx = new DisjunctionexpressionconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 8, ECLParser.RULE_disjunctionexpressionconstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 354;
      this.subexpressionconstraint();
      this.state = 360;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 355;
            this.ws();
            this.state = 356;
            this.disjunction();
            this.state = 357;
            this.ws();
            this.state = 358;
            this.subexpressionconstraint();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 362;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  exclusionexpressionconstraint() {
    let localctx = new ExclusionexpressionconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 10, ECLParser.RULE_exclusionexpressionconstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 364;
      this.subexpressionconstraint();
      this.state = 365;
      this.ws();
      this.state = 366;
      this.exclusion();
      this.state = 367;
      this.ws();
      this.state = 368;
      this.subexpressionconstraint();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dottedexpressionconstraint() {
    let localctx = new DottedexpressionconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 12, ECLParser.RULE_dottedexpressionconstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 370;
      this.subexpressionconstraint();
      this.state = 374;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 371;
            this.ws();
            this.state = 372;
            this.dottedexpressionattribute();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 376;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dottedexpressionattribute() {
    let localctx = new DottedexpressionattributeContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 14, ECLParser.RULE_dottedexpressionattribute);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 378;
      this.dot();
      this.state = 379;
      this.ws();
      this.state = 380;
      this.eclattributename();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  subexpressionconstraint() {
    let localctx = new SubexpressionconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 16, ECLParser.RULE_subexpressionconstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 385;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === ECLParser.LESS_THAN || _la === ECLParser.GREATER_THAN) {
        this.state = 382;
        this.constraintoperator();
        this.state = 383;
        this.ws();
      }

      this.state = 418;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
      switch (la_) {
        case 1:
          this.state = 390;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === ECLParser.CARAT) {
            this.state = 387;
            this.memberof();
            this.state = 388;
            this.ws();
          }

          this.state = 399;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case ECLParser.ASTERISK:
            case ECLParser.ONE:
            case ECLParser.TWO:
            case ECLParser.THREE:
            case ECLParser.FOUR:
            case ECLParser.FIVE:
            case ECLParser.SIX:
            case ECLParser.SEVEN:
            case ECLParser.EIGHT:
            case ECLParser.NINE:
              this.state = 392;
              this.eclfocusconcept();
              break;
            case ECLParser.LEFT_PAREN:
              this.state = 393;
              this.match(ECLParser.LEFT_PAREN);
              this.state = 394;
              this.ws();
              this.state = 395;
              this.expressionconstraint();
              this.state = 396;
              this.ws();
              this.state = 397;
              this.match(ECLParser.RIGHT_PAREN);
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 406;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 401;
              this.ws();
              this.state = 402;
              this.memberfilterconstraint();
            }
            this.state = 408;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
          }

          break;

        case 2:
          this.state = 416;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case ECLParser.ASTERISK:
            case ECLParser.ONE:
            case ECLParser.TWO:
            case ECLParser.THREE:
            case ECLParser.FOUR:
            case ECLParser.FIVE:
            case ECLParser.SIX:
            case ECLParser.SEVEN:
            case ECLParser.EIGHT:
            case ECLParser.NINE:
              this.state = 409;
              this.eclfocusconcept();
              break;
            case ECLParser.LEFT_PAREN:
              this.state = 410;
              this.match(ECLParser.LEFT_PAREN);
              this.state = 411;
              this.ws();
              this.state = 412;
              this.expressionconstraint();
              this.state = 413;
              this.ws();
              this.state = 414;
              this.match(ECLParser.RIGHT_PAREN);
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;
      }
      this.state = 427;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 420;
          this.ws();
          this.state = 423;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
          switch (la_) {
            case 1:
              this.state = 421;
              this.descriptionfilterconstraint();
              break;

            case 2:
              this.state = 422;
              this.conceptfilterconstraint();
              break;
          }
        }
        this.state = 429;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
      }

      this.state = 433;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);
      if (la_ === 1) {
        this.state = 430;
        this.ws();
        this.state = 431;
        this.historysupplement();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclfocusconcept() {
    let localctx = new EclfocusconceptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ECLParser.RULE_eclfocusconcept);
    try {
      this.state = 437;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
          this.enterOuterAlt(localctx, 1);
          this.state = 435;
          this.eclconceptreference();
          break;
        case ECLParser.ASTERISK:
          this.enterOuterAlt(localctx, 2);
          this.state = 436;
          this.wildcard();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dot() {
    let localctx = new DotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ECLParser.RULE_dot);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 439;
      this.match(ECLParser.PERIOD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  memberof() {
    let localctx = new MemberofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ECLParser.RULE_memberof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 441;
      this.match(ECLParser.CARAT);
      this.state = 452;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
      if (la_ === 1) {
        this.state = 442;
        this.ws();
        this.state = 443;
        this.match(ECLParser.LEFT_BRACE);
        this.state = 444;
        this.ws();
        this.state = 447;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case ECLParser.ONE:
          case ECLParser.TWO:
          case ECLParser.THREE:
          case ECLParser.FOUR:
          case ECLParser.FIVE:
          case ECLParser.SIX:
          case ECLParser.SEVEN:
          case ECLParser.EIGHT:
          case ECLParser.NINE:
          case ECLParser.CAP_A:
          case ECLParser.CAP_B:
          case ECLParser.CAP_C:
          case ECLParser.CAP_D:
          case ECLParser.CAP_E:
          case ECLParser.CAP_F:
          case ECLParser.CAP_G:
          case ECLParser.CAP_H:
          case ECLParser.CAP_I:
          case ECLParser.CAP_J:
          case ECLParser.CAP_K:
          case ECLParser.CAP_L:
          case ECLParser.CAP_M:
          case ECLParser.CAP_N:
          case ECLParser.CAP_O:
          case ECLParser.CAP_P:
          case ECLParser.CAP_Q:
          case ECLParser.CAP_R:
          case ECLParser.CAP_S:
          case ECLParser.CAP_T:
          case ECLParser.CAP_U:
          case ECLParser.CAP_V:
          case ECLParser.CAP_W:
          case ECLParser.CAP_X:
          case ECLParser.CAP_Y:
          case ECLParser.CAP_Z:
          case ECLParser.A:
          case ECLParser.B:
          case ECLParser.C:
          case ECLParser.D:
          case ECLParser.E:
          case ECLParser.F:
          case ECLParser.G:
          case ECLParser.H:
          case ECLParser.I:
          case ECLParser.J:
          case ECLParser.K:
          case ECLParser.L:
          case ECLParser.M:
          case ECLParser.N:
          case ECLParser.O:
          case ECLParser.P:
          case ECLParser.Q:
          case ECLParser.R:
          case ECLParser.S:
          case ECLParser.T:
          case ECLParser.U:
          case ECLParser.V:
          case ECLParser.W:
          case ECLParser.X:
          case ECLParser.Y:
          case ECLParser.Z:
            this.state = 445;
            this.refsetfieldset();
            break;
          case ECLParser.ASTERISK:
            this.state = 446;
            this.wildcard();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 449;
        this.ws();
        this.state = 450;
        this.match(ECLParser.RIGHT_BRACE);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  refsetfieldset() {
    let localctx = new RefsetfieldsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ECLParser.RULE_refsetfieldset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 454;
      this.refsetfield();
      this.state = 462;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 17, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 455;
          this.ws();
          this.state = 456;
          this.match(ECLParser.COMMA);
          this.state = 457;
          this.ws();
          this.state = 458;
          this.refsetfield();
        }
        this.state = 464;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 17, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  refsetfield() {
    let localctx = new RefsetfieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ECLParser.RULE_refsetfield);
    try {
      this.state = 467;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
          this.enterOuterAlt(localctx, 1);
          this.state = 465;
          this.refsetfieldname();
          break;
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
          this.enterOuterAlt(localctx, 2);
          this.state = 466;
          this.refsetfieldref();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  refsetfieldname() {
    let localctx = new RefsetfieldnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ECLParser.RULE_refsetfieldname);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 470;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 469;
        this.alpha();
        this.state = 472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (
        (((_la - 38) & ~0x1f) == 0 &&
          ((1 << (_la - 38)) &
            ((1 << (ECLParser.CAP_A - 38)) |
              (1 << (ECLParser.CAP_B - 38)) |
              (1 << (ECLParser.CAP_C - 38)) |
              (1 << (ECLParser.CAP_D - 38)) |
              (1 << (ECLParser.CAP_E - 38)) |
              (1 << (ECLParser.CAP_F - 38)) |
              (1 << (ECLParser.CAP_G - 38)) |
              (1 << (ECLParser.CAP_H - 38)) |
              (1 << (ECLParser.CAP_I - 38)) |
              (1 << (ECLParser.CAP_J - 38)) |
              (1 << (ECLParser.CAP_K - 38)) |
              (1 << (ECLParser.CAP_L - 38)) |
              (1 << (ECLParser.CAP_M - 38)) |
              (1 << (ECLParser.CAP_N - 38)) |
              (1 << (ECLParser.CAP_O - 38)) |
              (1 << (ECLParser.CAP_P - 38)) |
              (1 << (ECLParser.CAP_Q - 38)) |
              (1 << (ECLParser.CAP_R - 38)) |
              (1 << (ECLParser.CAP_S - 38)) |
              (1 << (ECLParser.CAP_T - 38)) |
              (1 << (ECLParser.CAP_U - 38)) |
              (1 << (ECLParser.CAP_V - 38)) |
              (1 << (ECLParser.CAP_W - 38)) |
              (1 << (ECLParser.CAP_X - 38)) |
              (1 << (ECLParser.CAP_Y - 38)) |
              (1 << (ECLParser.CAP_Z - 38)))) !==
            0) ||
        (((_la - 70) & ~0x1f) == 0 &&
          ((1 << (_la - 70)) &
            ((1 << (ECLParser.A - 70)) |
              (1 << (ECLParser.B - 70)) |
              (1 << (ECLParser.C - 70)) |
              (1 << (ECLParser.D - 70)) |
              (1 << (ECLParser.E - 70)) |
              (1 << (ECLParser.F - 70)) |
              (1 << (ECLParser.G - 70)) |
              (1 << (ECLParser.H - 70)) |
              (1 << (ECLParser.I - 70)) |
              (1 << (ECLParser.J - 70)) |
              (1 << (ECLParser.K - 70)) |
              (1 << (ECLParser.L - 70)) |
              (1 << (ECLParser.M - 70)) |
              (1 << (ECLParser.N - 70)) |
              (1 << (ECLParser.O - 70)) |
              (1 << (ECLParser.P - 70)) |
              (1 << (ECLParser.Q - 70)) |
              (1 << (ECLParser.R - 70)) |
              (1 << (ECLParser.S - 70)) |
              (1 << (ECLParser.T - 70)) |
              (1 << (ECLParser.U - 70)) |
              (1 << (ECLParser.V - 70)) |
              (1 << (ECLParser.W - 70)) |
              (1 << (ECLParser.X - 70)) |
              (1 << (ECLParser.Y - 70)) |
              (1 << (ECLParser.Z - 70)))) !==
            0)
      );
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  refsetfieldref() {
    let localctx = new RefsetfieldrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ECLParser.RULE_refsetfieldref);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 474;
      this.eclconceptreference();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclconceptreference() {
    let localctx = new EclconceptreferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ECLParser.RULE_eclconceptreference);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 476;
      this.conceptid();
      this.state = 484;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
      if (la_ === 1) {
        this.state = 477;
        this.ws();
        this.state = 478;
        this.match(ECLParser.PIPE);
        this.state = 479;
        this.ws();
        this.state = 480;
        this.term();
        this.state = 481;
        this.ws();
        this.state = 482;
        this.match(ECLParser.PIPE);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclconceptreferenceset() {
    let localctx = new EclconceptreferencesetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 34, ECLParser.RULE_eclconceptreferenceset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 486;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 487;
      this.ws();
      this.state = 488;
      this.eclconceptreference();
      this.state = 492;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 489;
            this.mws();
            this.state = 490;
            this.eclconceptreference();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 494;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 21, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 496;
      this.ws();
      this.state = 497;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  conceptid() {
    let localctx = new ConceptidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ECLParser.RULE_conceptid);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 499;
      this.sctid();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  term() {
    let localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ECLParser.RULE_term);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 502;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 501;
            this.nonwsnonpipe();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 504;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 22, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 518;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 25, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 507;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            this.state = 506;
            this.sp();
            this.state = 509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === ECLParser.SPACE);
          this.state = 512;
          this._errHandler.sync(this);
          var _alt = 1;
          do {
            switch (_alt) {
              case 1:
                this.state = 511;
                this.nonwsnonpipe();
                break;
              default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 514;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
          } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
        }
        this.state = 520;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 25, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  wildcard() {
    let localctx = new WildcardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ECLParser.RULE_wildcard);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 521;
      this.match(ECLParser.ASTERISK);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  constraintoperator() {
    let localctx = new ConstraintoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ECLParser.RULE_constraintoperator);
    try {
      this.state = 531;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 523;
          this.childof();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 524;
          this.childorselfof();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 525;
          this.descendantorselfof();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 526;
          this.descendantof();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 527;
          this.parentof();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 528;
          this.parentorselfof();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 529;
          this.ancestororselfof();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 530;
          this.ancestorof();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  descendantof() {
    let localctx = new DescendantofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ECLParser.RULE_descendantof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 533;
      this.match(ECLParser.LESS_THAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  descendantorselfof() {
    let localctx = new DescendantorselfofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ECLParser.RULE_descendantorselfof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 535;
      this.match(ECLParser.LESS_THAN);
      this.state = 536;
      this.match(ECLParser.LESS_THAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  childof() {
    let localctx = new ChildofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ECLParser.RULE_childof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 538;
      this.match(ECLParser.LESS_THAN);
      this.state = 539;
      this.match(ECLParser.EXCLAMATION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  childorselfof() {
    let localctx = new ChildorselfofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ECLParser.RULE_childorselfof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 541;
      this.match(ECLParser.LESS_THAN);
      this.state = 542;
      this.match(ECLParser.LESS_THAN);
      this.state = 543;
      this.match(ECLParser.EXCLAMATION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ancestorof() {
    let localctx = new AncestorofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ECLParser.RULE_ancestorof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 545;
      this.match(ECLParser.GREATER_THAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ancestororselfof() {
    let localctx = new AncestororselfofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ECLParser.RULE_ancestororselfof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 547;
      this.match(ECLParser.GREATER_THAN);
      this.state = 548;
      this.match(ECLParser.GREATER_THAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  parentof() {
    let localctx = new ParentofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ECLParser.RULE_parentof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 550;
      this.match(ECLParser.GREATER_THAN);
      this.state = 551;
      this.match(ECLParser.EXCLAMATION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  parentorselfof() {
    let localctx = new ParentorselfofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ECLParser.RULE_parentorselfof);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 553;
      this.match(ECLParser.GREATER_THAN);
      this.state = 554;
      this.match(ECLParser.GREATER_THAN);
      this.state = 555;
      this.match(ECLParser.EXCLAMATION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  conjunction() {
    let localctx = new ConjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ECLParser.RULE_conjunction);
    var _la = 0; // Token type
    try {
      this.state = 571;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_A:
        case ECLParser.A:
          this.enterOuterAlt(localctx, 1);
          this.state = 559;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
          switch (la_) {
            case 1:
              this.state = 557;
              _la = this._input.LA(1);
              if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;

            case 2:
              this.state = 558;
              _la = this._input.LA(1);
              if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;
          }
          this.state = 563;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);
          switch (la_) {
            case 1:
              this.state = 561;
              _la = this._input.LA(1);
              if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;

            case 2:
              this.state = 562;
              _la = this._input.LA(1);
              if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;
          }
          this.state = 567;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
          switch (la_) {
            case 1:
              this.state = 565;
              _la = this._input.LA(1);
              if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;

            case 2:
              this.state = 566;
              _la = this._input.LA(1);
              if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              break;
          }
          this.state = 569;
          this.mws();
          break;
        case ECLParser.COMMA:
          this.enterOuterAlt(localctx, 2);
          this.state = 570;
          this.match(ECLParser.COMMA);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  disjunction() {
    let localctx = new DisjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ECLParser.RULE_disjunction);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 575;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);
      switch (la_) {
        case 1:
          this.state = 573;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 574;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 579;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
      switch (la_) {
        case 1:
          this.state = 577;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 578;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 581;
      this.mws();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  exclusion() {
    let localctx = new ExclusionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ECLParser.RULE_exclusion);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 585;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
      switch (la_) {
        case 1:
          this.state = 583;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 584;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 589;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
      switch (la_) {
        case 1:
          this.state = 587;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 588;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 593;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);
      switch (la_) {
        case 1:
          this.state = 591;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 592;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 597;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
      switch (la_) {
        case 1:
          this.state = 595;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 596;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 601;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);
      switch (la_) {
        case 1:
          this.state = 599;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 600;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 603;
      this.mws();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclrefinement() {
    let localctx = new EclrefinementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ECLParser.RULE_eclrefinement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 605;
      this.subrefinement();
      this.state = 606;
      this.ws();
      this.state = 609;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
      if (la_ === 1) {
        this.state = 607;
        this.conjunctionrefinementset();
      } else if (la_ === 2) {
        this.state = 608;
        this.disjunctionrefinementset();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  conjunctionrefinementset() {
    let localctx = new ConjunctionrefinementsetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 68, ECLParser.RULE_conjunctionrefinementset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 616;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 611;
            this.ws();
            this.state = 612;
            this.conjunction();
            this.state = 613;
            this.ws();
            this.state = 614;
            this.subrefinement();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 618;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 39, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  disjunctionrefinementset() {
    let localctx = new DisjunctionrefinementsetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 70, ECLParser.RULE_disjunctionrefinementset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 625;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 620;
            this.ws();
            this.state = 621;
            this.disjunction();
            this.state = 622;
            this.ws();
            this.state = 623;
            this.subrefinement();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 627;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 40, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  subrefinement() {
    let localctx = new SubrefinementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ECLParser.RULE_subrefinement);
    try {
      this.state = 637;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 629;
          this.eclattributeset();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 630;
          this.eclattributegroup();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 631;
          this.match(ECLParser.LEFT_PAREN);
          this.state = 632;
          this.ws();
          this.state = 633;
          this.eclrefinement();
          this.state = 634;
          this.ws();
          this.state = 635;
          this.match(ECLParser.RIGHT_PAREN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclattributeset() {
    let localctx = new EclattributesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ECLParser.RULE_eclattributeset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 639;
      this.subattributeset();
      this.state = 640;
      this.ws();
      this.state = 643;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 42, this._ctx);
      if (la_ === 1) {
        this.state = 641;
        this.conjunctionattributeset();
      } else if (la_ === 2) {
        this.state = 642;
        this.disjunctionattributeset();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  conjunctionattributeset() {
    let localctx = new ConjunctionattributesetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 76, ECLParser.RULE_conjunctionattributeset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 650;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 645;
            this.ws();
            this.state = 646;
            this.conjunction();
            this.state = 647;
            this.ws();
            this.state = 648;
            this.subattributeset();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 652;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 43, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  disjunctionattributeset() {
    let localctx = new DisjunctionattributesetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 78, ECLParser.RULE_disjunctionattributeset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 659;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 654;
            this.ws();
            this.state = 655;
            this.disjunction();
            this.state = 656;
            this.ws();
            this.state = 657;
            this.subattributeset();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 661;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  subattributeset() {
    let localctx = new SubattributesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ECLParser.RULE_subattributeset);
    try {
      this.state = 670;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 663;
          this.eclattribute();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 664;
          this.match(ECLParser.LEFT_PAREN);
          this.state = 665;
          this.ws();
          this.state = 666;
          this.eclattributeset();
          this.state = 667;
          this.ws();
          this.state = 668;
          this.match(ECLParser.RIGHT_PAREN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclattributegroup() {
    let localctx = new EclattributegroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ECLParser.RULE_eclattributegroup);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 677;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === ECLParser.LEFT_BRACE) {
        this.state = 672;
        this.match(ECLParser.LEFT_BRACE);
        this.state = 673;
        this.cardinality();
        this.state = 674;
        this.match(ECLParser.RIGHT_BRACE);
        this.state = 675;
        this.ws();
      }

      this.state = 679;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 680;
      this.ws();
      this.state = 681;
      this.eclattributeset();
      this.state = 682;
      this.ws();
      this.state = 683;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclattribute() {
    let localctx = new EclattributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ECLParser.RULE_eclattribute);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 690;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === ECLParser.LEFT_BRACE) {
        this.state = 685;
        this.match(ECLParser.LEFT_BRACE);
        this.state = 686;
        this.cardinality();
        this.state = 687;
        this.match(ECLParser.RIGHT_BRACE);
        this.state = 688;
        this.ws();
      }

      this.state = 695;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === ECLParser.CAP_R || _la === ECLParser.R) {
        this.state = 692;
        this.reverseflag();
        this.state = 693;
        this.ws();
      }

      this.state = 697;
      this.eclattributename();
      this.state = 698;
      this.ws();
      this.state = 718;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 50, this._ctx);
      switch (la_) {
        case 1:
          this.state = 699;
          this.expressioncomparisonoperator();
          this.state = 700;
          this.ws();
          this.state = 701;
          this.subexpressionconstraint();
          break;

        case 2:
          this.state = 703;
          this.numericcomparisonoperator();
          this.state = 704;
          this.ws();
          this.state = 705;
          this.match(ECLParser.HASH);
          this.state = 706;
          this.numericvalue();
          break;

        case 3:
          this.state = 708;
          this.stringcomparisonoperator();
          this.state = 709;
          this.ws();
          this.state = 712;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case ECLParser.QUOTE:
            case ECLParser.CAP_M:
            case ECLParser.CAP_W:
            case ECLParser.M:
            case ECLParser.W:
              this.state = 710;
              this.typedsearchterm();
              break;
            case ECLParser.LEFT_PAREN:
              this.state = 711;
              this.typedsearchtermset();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;

        case 4:
          this.state = 714;
          this.booleancomparisonoperator();
          this.state = 715;
          this.ws();
          this.state = 716;
          this.booleanvalue();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  cardinality() {
    let localctx = new CardinalityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ECLParser.RULE_cardinality);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 720;
      this.minvalue();
      this.state = 721;
      this.to();
      this.state = 722;
      this.maxvalue();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  minvalue() {
    let localctx = new MinvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ECLParser.RULE_minvalue);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 724;
      this.nonnegativeintegervalue();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  to() {
    let localctx = new ToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ECLParser.RULE_to);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 726;
      this.match(ECLParser.PERIOD);
      this.state = 727;
      this.match(ECLParser.PERIOD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  maxvalue() {
    let localctx = new MaxvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ECLParser.RULE_maxvalue);
    try {
      this.state = 731;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.ZERO:
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
          this.enterOuterAlt(localctx, 1);
          this.state = 729;
          this.nonnegativeintegervalue();
          break;
        case ECLParser.ASTERISK:
          this.enterOuterAlt(localctx, 2);
          this.state = 730;
          this.many();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  many() {
    let localctx = new ManyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ECLParser.RULE_many);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 733;
      this.match(ECLParser.ASTERISK);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  reverseflag() {
    let localctx = new ReverseflagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ECLParser.RULE_reverseflag);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 735;
      _la = this._input.LA(1);
      if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  eclattributename() {
    let localctx = new EclattributenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ECLParser.RULE_eclattributename);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 737;
      this.subexpressionconstraint();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expressioncomparisonoperator() {
    let localctx = new ExpressioncomparisonoperatorContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 100, ECLParser.RULE_expressioncomparisonoperator);
    try {
      this.state = 742;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.EQUALS:
          this.enterOuterAlt(localctx, 1);
          this.state = 739;
          this.match(ECLParser.EQUALS);
          break;
        case ECLParser.EXCLAMATION:
          this.enterOuterAlt(localctx, 2);
          this.state = 740;
          this.match(ECLParser.EXCLAMATION);
          this.state = 741;
          this.match(ECLParser.EQUALS);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  numericcomparisonoperator() {
    let localctx = new NumericcomparisonoperatorContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 102, ECLParser.RULE_numericcomparisonoperator);
    try {
      this.state = 753;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 53, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 744;
          this.match(ECLParser.EQUALS);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 745;
          this.match(ECLParser.EXCLAMATION);
          this.state = 746;
          this.match(ECLParser.EQUALS);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 747;
          this.match(ECLParser.LESS_THAN);
          this.state = 748;
          this.match(ECLParser.EQUALS);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 749;
          this.match(ECLParser.LESS_THAN);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 750;
          this.match(ECLParser.GREATER_THAN);
          this.state = 751;
          this.match(ECLParser.EQUALS);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 752;
          this.match(ECLParser.GREATER_THAN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  timecomparisonoperator() {
    let localctx = new TimecomparisonoperatorContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 104, ECLParser.RULE_timecomparisonoperator);
    try {
      this.state = 764;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 755;
          this.match(ECLParser.EQUALS);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 756;
          this.match(ECLParser.EXCLAMATION);
          this.state = 757;
          this.match(ECLParser.EQUALS);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 758;
          this.match(ECLParser.LESS_THAN);
          this.state = 759;
          this.match(ECLParser.EQUALS);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 760;
          this.match(ECLParser.LESS_THAN);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 761;
          this.match(ECLParser.GREATER_THAN);
          this.state = 762;
          this.match(ECLParser.EQUALS);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 763;
          this.match(ECLParser.GREATER_THAN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  stringcomparisonoperator() {
    let localctx = new StringcomparisonoperatorContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 106, ECLParser.RULE_stringcomparisonoperator);
    try {
      this.state = 769;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.EQUALS:
          this.enterOuterAlt(localctx, 1);
          this.state = 766;
          this.match(ECLParser.EQUALS);
          break;
        case ECLParser.EXCLAMATION:
          this.enterOuterAlt(localctx, 2);
          this.state = 767;
          this.match(ECLParser.EXCLAMATION);
          this.state = 768;
          this.match(ECLParser.EQUALS);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  booleancomparisonoperator() {
    let localctx = new BooleancomparisonoperatorContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 108, ECLParser.RULE_booleancomparisonoperator);
    try {
      this.state = 774;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.EQUALS:
          this.enterOuterAlt(localctx, 1);
          this.state = 771;
          this.match(ECLParser.EQUALS);
          break;
        case ECLParser.EXCLAMATION:
          this.enterOuterAlt(localctx, 2);
          this.state = 772;
          this.match(ECLParser.EXCLAMATION);
          this.state = 773;
          this.match(ECLParser.EQUALS);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  descriptionfilterconstraint() {
    let localctx = new DescriptionfilterconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 110, ECLParser.RULE_descriptionfilterconstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 776;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 777;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 779;
      this.ws();
      this.state = 782;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);
      if (la_ === 1) {
        this.state = 780;
        _la = this._input.LA(1);
        if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      } else if (la_ === 2) {
        this.state = 781;
        _la = this._input.LA(1);
        if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
      this.state = 784;
      this.ws();
      this.state = 785;
      this.descriptionfilter();
      this.state = 793;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 786;
          this.ws();
          this.state = 787;
          this.match(ECLParser.COMMA);
          this.state = 788;
          this.ws();
          this.state = 789;
          this.descriptionfilter();
        }
        this.state = 795;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
      }

      this.state = 796;
      this.ws();

      this.state = 797;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
      this.state = 798;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  descriptionfilter() {
    let localctx = new DescriptionfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ECLParser.RULE_descriptionfilter);
    try {
      this.state = 807;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 800;
          this.termfilter();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 801;
          this.languagefilter();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 802;
          this.typefilter();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 803;
          this.dialectfilter();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 804;
          this.modulefilter();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 805;
          this.effectivetimefilter();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 806;
          this.activefilter();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  termfilter() {
    let localctx = new TermfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ECLParser.RULE_termfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 809;
      this.termkeyword();
      this.state = 810;
      this.ws();
      this.state = 811;
      this.stringcomparisonoperator();
      this.state = 812;
      this.ws();
      this.state = 815;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.QUOTE:
        case ECLParser.CAP_M:
        case ECLParser.CAP_W:
        case ECLParser.M:
        case ECLParser.W:
          this.state = 813;
          this.typedsearchterm();
          break;
        case ECLParser.LEFT_PAREN:
          this.state = 814;
          this.typedsearchtermset();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  termkeyword() {
    let localctx = new TermkeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ECLParser.RULE_termkeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 819;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
      switch (la_) {
        case 1:
          this.state = 817;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 818;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 823;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);
      switch (la_) {
        case 1:
          this.state = 821;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 822;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 827;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
      switch (la_) {
        case 1:
          this.state = 825;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 826;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 831;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);
      switch (la_) {
        case 1:
          this.state = 829;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 830;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typedsearchterm() {
    let localctx = new TypedsearchtermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ECLParser.RULE_typedsearchterm);
    var _la = 0; // Token type
    try {
      this.state = 847;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.QUOTE:
        case ECLParser.CAP_M:
        case ECLParser.M:
          this.enterOuterAlt(localctx, 1);
          this.state = 838;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === ECLParser.CAP_M || _la === ECLParser.M) {
            this.state = 833;
            this.matchkeyword();
            this.state = 834;
            this.ws();
            this.state = 835;
            this.match(ECLParser.COLON);
            this.state = 836;
            this.ws();
          }

          this.state = 840;
          this.matchsearchtermset();
          break;
        case ECLParser.CAP_W:
        case ECLParser.W:
          this.enterOuterAlt(localctx, 2);
          this.state = 841;
          this.wild();
          this.state = 842;
          this.ws();
          this.state = 843;
          this.match(ECLParser.COLON);
          this.state = 844;
          this.ws();
          this.state = 845;
          this.wildsearchtermset();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typedsearchtermset() {
    let localctx = new TypedsearchtermsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ECLParser.RULE_typedsearchtermset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 849;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 850;
      this.ws();
      this.state = 851;
      this.typedsearchterm();
      this.state = 857;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 67, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 852;
          this.mws();
          this.state = 853;
          this.typedsearchterm();
        }
        this.state = 859;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 67, this._ctx);
      }

      this.state = 860;
      this.ws();
      this.state = 861;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  wild() {
    let localctx = new WildContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ECLParser.RULE_wild);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 865;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
      switch (la_) {
        case 1:
          this.state = 863;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_W || _la === ECLParser.W)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 864;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_W || _la === ECLParser.W)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 869;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);
      switch (la_) {
        case 1:
          this.state = 867;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 868;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 873;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);
      switch (la_) {
        case 1:
          this.state = 871;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 872;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 877;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
      switch (la_) {
        case 1:
          this.state = 875;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 876;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  matchkeyword() {
    let localctx = new MatchkeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ECLParser.RULE_matchkeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 881;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
      switch (la_) {
        case 1:
          this.state = 879;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 880;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 885;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);
      switch (la_) {
        case 1:
          this.state = 883;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 884;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 889;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
      switch (la_) {
        case 1:
          this.state = 887;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 888;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 893;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
      switch (la_) {
        case 1:
          this.state = 891;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 892;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 897;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
      switch (la_) {
        case 1:
          this.state = 895;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_H || _la === ECLParser.H)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 896;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_H || _la === ECLParser.H)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  matchsearchterm() {
    let localctx = new MatchsearchtermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ECLParser.RULE_matchsearchterm);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 901;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 901;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case ECLParser.UTF8_LETTER:
              case ECLParser.EXCLAMATION:
              case ECLParser.HASH:
              case ECLParser.DOLLAR:
              case ECLParser.PERCENT:
              case ECLParser.AMPERSAND:
              case ECLParser.APOSTROPHE:
              case ECLParser.LEFT_PAREN:
              case ECLParser.RIGHT_PAREN:
              case ECLParser.ASTERISK:
              case ECLParser.PLUS:
              case ECLParser.COMMA:
              case ECLParser.DASH:
              case ECLParser.PERIOD:
              case ECLParser.SLASH:
              case ECLParser.ZERO:
              case ECLParser.ONE:
              case ECLParser.TWO:
              case ECLParser.THREE:
              case ECLParser.FOUR:
              case ECLParser.FIVE:
              case ECLParser.SIX:
              case ECLParser.SEVEN:
              case ECLParser.EIGHT:
              case ECLParser.NINE:
              case ECLParser.COLON:
              case ECLParser.SEMICOLON:
              case ECLParser.LESS_THAN:
              case ECLParser.EQUALS:
              case ECLParser.GREATER_THAN:
              case ECLParser.QUESTION:
              case ECLParser.AT:
              case ECLParser.CAP_A:
              case ECLParser.CAP_B:
              case ECLParser.CAP_C:
              case ECLParser.CAP_D:
              case ECLParser.CAP_E:
              case ECLParser.CAP_F:
              case ECLParser.CAP_G:
              case ECLParser.CAP_H:
              case ECLParser.CAP_I:
              case ECLParser.CAP_J:
              case ECLParser.CAP_K:
              case ECLParser.CAP_L:
              case ECLParser.CAP_M:
              case ECLParser.CAP_N:
              case ECLParser.CAP_O:
              case ECLParser.CAP_P:
              case ECLParser.CAP_Q:
              case ECLParser.CAP_R:
              case ECLParser.CAP_S:
              case ECLParser.CAP_T:
              case ECLParser.CAP_U:
              case ECLParser.CAP_V:
              case ECLParser.CAP_W:
              case ECLParser.CAP_X:
              case ECLParser.CAP_Y:
              case ECLParser.CAP_Z:
              case ECLParser.LEFT_BRACE:
              case ECLParser.RIGHT_BRACE:
              case ECLParser.CARAT:
              case ECLParser.UNDERSCORE:
              case ECLParser.ACCENT:
              case ECLParser.A:
              case ECLParser.B:
              case ECLParser.C:
              case ECLParser.D:
              case ECLParser.E:
              case ECLParser.F:
              case ECLParser.G:
              case ECLParser.H:
              case ECLParser.I:
              case ECLParser.J:
              case ECLParser.K:
              case ECLParser.L:
              case ECLParser.M:
              case ECLParser.N:
              case ECLParser.O:
              case ECLParser.P:
              case ECLParser.Q:
              case ECLParser.R:
              case ECLParser.S:
              case ECLParser.T:
              case ECLParser.U:
              case ECLParser.V:
              case ECLParser.W:
              case ECLParser.X:
              case ECLParser.Y:
              case ECLParser.Z:
              case ECLParser.LEFT_CURLY_BRACE:
              case ECLParser.PIPE:
              case ECLParser.RIGHT_CURLY_BRACE:
              case ECLParser.TILDE:
                this.state = 899;
                this.nonwsnonescapedchar();
                break;
              case ECLParser.BACKSLASH:
                this.state = 900;
                this.escapedchar();
                break;
              default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 903;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  matchsearchtermset() {
    let localctx = new MatchsearchtermsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ECLParser.RULE_matchsearchtermset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 905;
      this.qm();
      this.state = 906;
      this.ws();
      this.state = 907;
      this.matchsearchterm();
      this.state = 913;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 908;
          this.mws();
          this.state = 909;
          this.matchsearchterm();
        }
        this.state = 915;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);
      }

      this.state = 916;
      this.ws();
      this.state = 917;
      this.qm();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  wildsearchterm() {
    let localctx = new WildsearchtermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ECLParser.RULE_wildsearchterm);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 921;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 921;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case ECLParser.UTF8_LETTER:
          case ECLParser.TAB:
          case ECLParser.LF:
          case ECLParser.CR:
          case ECLParser.SPACE:
          case ECLParser.EXCLAMATION:
          case ECLParser.HASH:
          case ECLParser.DOLLAR:
          case ECLParser.PERCENT:
          case ECLParser.AMPERSAND:
          case ECLParser.APOSTROPHE:
          case ECLParser.LEFT_PAREN:
          case ECLParser.RIGHT_PAREN:
          case ECLParser.ASTERISK:
          case ECLParser.PLUS:
          case ECLParser.COMMA:
          case ECLParser.DASH:
          case ECLParser.PERIOD:
          case ECLParser.SLASH:
          case ECLParser.ZERO:
          case ECLParser.ONE:
          case ECLParser.TWO:
          case ECLParser.THREE:
          case ECLParser.FOUR:
          case ECLParser.FIVE:
          case ECLParser.SIX:
          case ECLParser.SEVEN:
          case ECLParser.EIGHT:
          case ECLParser.NINE:
          case ECLParser.COLON:
          case ECLParser.SEMICOLON:
          case ECLParser.LESS_THAN:
          case ECLParser.EQUALS:
          case ECLParser.GREATER_THAN:
          case ECLParser.QUESTION:
          case ECLParser.AT:
          case ECLParser.CAP_A:
          case ECLParser.CAP_B:
          case ECLParser.CAP_C:
          case ECLParser.CAP_D:
          case ECLParser.CAP_E:
          case ECLParser.CAP_F:
          case ECLParser.CAP_G:
          case ECLParser.CAP_H:
          case ECLParser.CAP_I:
          case ECLParser.CAP_J:
          case ECLParser.CAP_K:
          case ECLParser.CAP_L:
          case ECLParser.CAP_M:
          case ECLParser.CAP_N:
          case ECLParser.CAP_O:
          case ECLParser.CAP_P:
          case ECLParser.CAP_Q:
          case ECLParser.CAP_R:
          case ECLParser.CAP_S:
          case ECLParser.CAP_T:
          case ECLParser.CAP_U:
          case ECLParser.CAP_V:
          case ECLParser.CAP_W:
          case ECLParser.CAP_X:
          case ECLParser.CAP_Y:
          case ECLParser.CAP_Z:
          case ECLParser.LEFT_BRACE:
          case ECLParser.RIGHT_BRACE:
          case ECLParser.CARAT:
          case ECLParser.UNDERSCORE:
          case ECLParser.ACCENT:
          case ECLParser.A:
          case ECLParser.B:
          case ECLParser.C:
          case ECLParser.D:
          case ECLParser.E:
          case ECLParser.F:
          case ECLParser.G:
          case ECLParser.H:
          case ECLParser.I:
          case ECLParser.J:
          case ECLParser.K:
          case ECLParser.L:
          case ECLParser.M:
          case ECLParser.N:
          case ECLParser.O:
          case ECLParser.P:
          case ECLParser.Q:
          case ECLParser.R:
          case ECLParser.S:
          case ECLParser.T:
          case ECLParser.U:
          case ECLParser.V:
          case ECLParser.W:
          case ECLParser.X:
          case ECLParser.Y:
          case ECLParser.Z:
          case ECLParser.LEFT_CURLY_BRACE:
          case ECLParser.PIPE:
          case ECLParser.RIGHT_CURLY_BRACE:
          case ECLParser.TILDE:
            this.state = 919;
            this.anynonescapedchar();
            break;
          case ECLParser.BACKSLASH:
            this.state = 920;
            this.escapedwildchar();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 923;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.UTF8_LETTER) |
              (1 << ECLParser.TAB) |
              (1 << ECLParser.LF) |
              (1 << ECLParser.CR) |
              (1 << ECLParser.SPACE) |
              (1 << ECLParser.EXCLAMATION) |
              (1 << ECLParser.HASH) |
              (1 << ECLParser.DOLLAR) |
              (1 << ECLParser.PERCENT) |
              (1 << ECLParser.AMPERSAND) |
              (1 << ECLParser.APOSTROPHE) |
              (1 << ECLParser.LEFT_PAREN) |
              (1 << ECLParser.RIGHT_PAREN) |
              (1 << ECLParser.ASTERISK) |
              (1 << ECLParser.PLUS) |
              (1 << ECLParser.COMMA) |
              (1 << ECLParser.DASH) |
              (1 << ECLParser.PERIOD) |
              (1 << ECLParser.SLASH) |
              (1 << ECLParser.ZERO) |
              (1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE) |
              (1 << ECLParser.COLON))) !==
            0) ||
        (((_la - 32) & ~0x1f) == 0 &&
          ((1 << (_la - 32)) &
            ((1 << (ECLParser.SEMICOLON - 32)) |
              (1 << (ECLParser.LESS_THAN - 32)) |
              (1 << (ECLParser.EQUALS - 32)) |
              (1 << (ECLParser.GREATER_THAN - 32)) |
              (1 << (ECLParser.QUESTION - 32)) |
              (1 << (ECLParser.AT - 32)) |
              (1 << (ECLParser.CAP_A - 32)) |
              (1 << (ECLParser.CAP_B - 32)) |
              (1 << (ECLParser.CAP_C - 32)) |
              (1 << (ECLParser.CAP_D - 32)) |
              (1 << (ECLParser.CAP_E - 32)) |
              (1 << (ECLParser.CAP_F - 32)) |
              (1 << (ECLParser.CAP_G - 32)) |
              (1 << (ECLParser.CAP_H - 32)) |
              (1 << (ECLParser.CAP_I - 32)) |
              (1 << (ECLParser.CAP_J - 32)) |
              (1 << (ECLParser.CAP_K - 32)) |
              (1 << (ECLParser.CAP_L - 32)) |
              (1 << (ECLParser.CAP_M - 32)) |
              (1 << (ECLParser.CAP_N - 32)) |
              (1 << (ECLParser.CAP_O - 32)) |
              (1 << (ECLParser.CAP_P - 32)) |
              (1 << (ECLParser.CAP_Q - 32)) |
              (1 << (ECLParser.CAP_R - 32)) |
              (1 << (ECLParser.CAP_S - 32)) |
              (1 << (ECLParser.CAP_T - 32)) |
              (1 << (ECLParser.CAP_U - 32)) |
              (1 << (ECLParser.CAP_V - 32)) |
              (1 << (ECLParser.CAP_W - 32)) |
              (1 << (ECLParser.CAP_X - 32)) |
              (1 << (ECLParser.CAP_Y - 32)) |
              (1 << (ECLParser.CAP_Z - 32)))) !==
            0) ||
        (((_la - 64) & ~0x1f) == 0 &&
          ((1 << (_la - 64)) &
            ((1 << (ECLParser.LEFT_BRACE - 64)) |
              (1 << (ECLParser.BACKSLASH - 64)) |
              (1 << (ECLParser.RIGHT_BRACE - 64)) |
              (1 << (ECLParser.CARAT - 64)) |
              (1 << (ECLParser.UNDERSCORE - 64)) |
              (1 << (ECLParser.ACCENT - 64)) |
              (1 << (ECLParser.A - 64)) |
              (1 << (ECLParser.B - 64)) |
              (1 << (ECLParser.C - 64)) |
              (1 << (ECLParser.D - 64)) |
              (1 << (ECLParser.E - 64)) |
              (1 << (ECLParser.F - 64)) |
              (1 << (ECLParser.G - 64)) |
              (1 << (ECLParser.H - 64)) |
              (1 << (ECLParser.I - 64)) |
              (1 << (ECLParser.J - 64)) |
              (1 << (ECLParser.K - 64)) |
              (1 << (ECLParser.L - 64)) |
              (1 << (ECLParser.M - 64)) |
              (1 << (ECLParser.N - 64)) |
              (1 << (ECLParser.O - 64)) |
              (1 << (ECLParser.P - 64)) |
              (1 << (ECLParser.Q - 64)) |
              (1 << (ECLParser.R - 64)) |
              (1 << (ECLParser.S - 64)) |
              (1 << (ECLParser.T - 64)) |
              (1 << (ECLParser.U - 64)) |
              (1 << (ECLParser.V - 64)) |
              (1 << (ECLParser.W - 64)) |
              (1 << (ECLParser.X - 64)) |
              (1 << (ECLParser.Y - 64)) |
              (1 << (ECLParser.Z - 64)))) !==
            0) ||
        (((_la - 96) & ~0x1f) == 0 &&
          ((1 << (_la - 96)) &
            ((1 << (ECLParser.LEFT_CURLY_BRACE - 96)) |
              (1 << (ECLParser.PIPE - 96)) |
              (1 << (ECLParser.RIGHT_CURLY_BRACE - 96)) |
              (1 << (ECLParser.TILDE - 96)))) !==
            0)
      );
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  wildsearchtermset() {
    let localctx = new WildsearchtermsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ECLParser.RULE_wildsearchtermset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 925;
      this.qm();
      this.state = 926;
      this.wildsearchterm();
      this.state = 927;
      this.qm();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  languagefilter() {
    let localctx = new LanguagefilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ECLParser.RULE_languagefilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 929;
      this.language();
      this.state = 930;
      this.ws();
      this.state = 931;
      this.booleancomparisonoperator();
      this.state = 932;
      this.ws();
      this.state = 935;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
          this.state = 933;
          this.languagecode();
          break;
        case ECLParser.LEFT_PAREN:
          this.state = 934;
          this.languagecodeset();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  language() {
    let localctx = new LanguageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ECLParser.RULE_language);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 939;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);
      switch (la_) {
        case 1:
          this.state = 937;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 938;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 943;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 84, this._ctx);
      switch (la_) {
        case 1:
          this.state = 941;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 942;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 947;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);
      switch (la_) {
        case 1:
          this.state = 945;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 946;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 951;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
      switch (la_) {
        case 1:
          this.state = 949;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_G || _la === ECLParser.G)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 950;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_G || _la === ECLParser.G)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 955;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
      switch (la_) {
        case 1:
          this.state = 953;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 954;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 959;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
      switch (la_) {
        case 1:
          this.state = 957;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 958;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 963;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
      switch (la_) {
        case 1:
          this.state = 961;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_G || _la === ECLParser.G)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 962;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_G || _la === ECLParser.G)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 967;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
      switch (la_) {
        case 1:
          this.state = 965;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 966;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  languagecode() {
    let localctx = new LanguagecodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ECLParser.RULE_languagecode);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 969;
      this.alpha();
      this.state = 970;
      this.alpha();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  languagecodeset() {
    let localctx = new LanguagecodesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ECLParser.RULE_languagecodeset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 972;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 973;
      this.ws();
      this.state = 974;
      this.languagecode();
      this.state = 980;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 91, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 975;
          this.mws();
          this.state = 976;
          this.languagecode();
        }
        this.state = 982;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 91, this._ctx);
      }

      this.state = 983;
      this.ws();
      this.state = 984;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typefilter() {
    let localctx = new TypefilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ECLParser.RULE_typefilter);
    try {
      this.state = 988;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 92, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 986;
          this.typeidfilter();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 987;
          this.typetokenfilter();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typeidfilter() {
    let localctx = new TypeidfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ECLParser.RULE_typeidfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 990;
      this.typeid();
      this.state = 991;
      this.ws();
      this.state = 992;
      this.booleancomparisonoperator();
      this.state = 993;
      this.ws();
      this.state = 996;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 93, this._ctx);
      switch (la_) {
        case 1:
          this.state = 994;
          this.subexpressionconstraint();
          break;

        case 2:
          this.state = 995;
          this.eclconceptreferenceset();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typeid() {
    let localctx = new TypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ECLParser.RULE_typeid);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1000;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 94, this._ctx);
      switch (la_) {
        case 1:
          this.state = 998;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 999;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1004;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1002;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1003;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1008;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1006;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1007;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1012;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1010;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1011;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1016;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1014;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1015;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1020;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1018;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1019;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typetokenfilter() {
    let localctx = new TypetokenfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ECLParser.RULE_typetokenfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1022;
      this.type();
      this.state = 1023;
      this.ws();
      this.state = 1024;
      this.booleancomparisonoperator();
      this.state = 1025;
      this.ws();
      this.state = 1028;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_D:
        case ECLParser.CAP_F:
        case ECLParser.CAP_S:
        case ECLParser.D:
        case ECLParser.F:
        case ECLParser.S:
          this.state = 1026;
          this.typetoken();
          break;
        case ECLParser.LEFT_PAREN:
          this.state = 1027;
          this.typetokenset();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  type() {
    let localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ECLParser.RULE_type);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1032;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1030;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1031;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1036;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1034;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1035;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1040;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1038;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1039;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1044;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 104, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1042;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1043;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typetoken() {
    let localctx = new TypetokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ECLParser.RULE_typetoken);
    try {
      this.state = 1049;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_S:
        case ECLParser.S:
          this.enterOuterAlt(localctx, 1);
          this.state = 1046;
          this.synonym();
          break;
        case ECLParser.CAP_F:
        case ECLParser.F:
          this.enterOuterAlt(localctx, 2);
          this.state = 1047;
          this.fullyspecifiedname();
          break;
        case ECLParser.CAP_D:
        case ECLParser.D:
          this.enterOuterAlt(localctx, 3);
          this.state = 1048;
          this.definition();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  typetokenset() {
    let localctx = new TypetokensetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ECLParser.RULE_typetokenset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1051;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 1052;
      this.ws();
      this.state = 1053;
      this.typetoken();
      this.state = 1059;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 106, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1054;
          this.mws();
          this.state = 1055;
          this.typetoken();
        }
        this.state = 1061;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 106, this._ctx);
      }

      this.state = 1062;
      this.ws();
      this.state = 1063;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  synonym() {
    let localctx = new SynonymContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ECLParser.RULE_synonym);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1067;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 107, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1065;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1066;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1071;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1069;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1070;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1075;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 109, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1073;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1074;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  fullyspecifiedname() {
    let localctx = new FullyspecifiednameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ECLParser.RULE_fullyspecifiedname);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1079;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 110, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1077;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1078;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1083;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 111, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1081;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1082;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1087;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 112, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1085;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1086;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definition() {
    let localctx = new DefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ECLParser.RULE_definition);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1091;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 113, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1089;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1090;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1095;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 114, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1093;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1094;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1099;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 115, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1097;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1098;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialectfilter() {
    let localctx = new DialectfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ECLParser.RULE_dialectfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1103;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 116, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1101;
          this.dialectidfilter();
          break;

        case 2:
          this.state = 1102;
          this.dialectaliasfilter();
          break;
      }
      this.state = 1108;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);
      if (la_ === 1) {
        this.state = 1105;
        this.ws();
        this.state = 1106;
        this.acceptabilityset();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialectidfilter() {
    let localctx = new DialectidfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ECLParser.RULE_dialectidfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1110;
      this.dialectid();
      this.state = 1111;
      this.ws();
      this.state = 1112;
      this.booleancomparisonoperator();
      this.state = 1113;
      this.ws();
      this.state = 1116;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 118, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1114;
          this.subexpressionconstraint();
          break;

        case 2:
          this.state = 1115;
          this.dialectidset();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialectid() {
    let localctx = new DialectidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ECLParser.RULE_dialectid);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1120;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 119, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1118;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1119;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1124;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 120, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1122;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1123;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1128;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 121, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1126;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1127;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1132;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 122, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1130;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1131;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1136;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 123, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1134;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1135;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1140;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 124, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1138;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1139;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1144;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 125, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1142;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1143;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1148;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1146;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1147;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1152;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 127, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1150;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1151;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialectaliasfilter() {
    let localctx = new DialectaliasfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ECLParser.RULE_dialectaliasfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1154;
      this.dialect();
      this.state = 1155;
      this.ws();
      this.state = 1156;
      this.booleancomparisonoperator();
      this.state = 1157;
      this.ws();
      this.state = 1160;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
          this.state = 1158;
          this.dialectalias();
          break;
        case ECLParser.LEFT_PAREN:
          this.state = 1159;
          this.dialectaliasset();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialect() {
    let localctx = new DialectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ECLParser.RULE_dialect);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1164;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 129, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1162;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1163;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1168;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 130, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1166;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1167;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1172;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 131, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1170;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1171;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1176;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 132, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1174;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1175;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1180;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 133, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1178;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1179;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1184;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 134, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1182;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1183;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1188;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1186;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1187;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialectalias() {
    let localctx = new DialectaliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ECLParser.RULE_dialectalias);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1190;
      this.alpha();
      this.state = 1196;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.DASH) |
              (1 << ECLParser.ZERO) |
              (1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE))) !==
            0) ||
        (((_la - 38) & ~0x1f) == 0 &&
          ((1 << (_la - 38)) &
            ((1 << (ECLParser.CAP_A - 38)) |
              (1 << (ECLParser.CAP_B - 38)) |
              (1 << (ECLParser.CAP_C - 38)) |
              (1 << (ECLParser.CAP_D - 38)) |
              (1 << (ECLParser.CAP_E - 38)) |
              (1 << (ECLParser.CAP_F - 38)) |
              (1 << (ECLParser.CAP_G - 38)) |
              (1 << (ECLParser.CAP_H - 38)) |
              (1 << (ECLParser.CAP_I - 38)) |
              (1 << (ECLParser.CAP_J - 38)) |
              (1 << (ECLParser.CAP_K - 38)) |
              (1 << (ECLParser.CAP_L - 38)) |
              (1 << (ECLParser.CAP_M - 38)) |
              (1 << (ECLParser.CAP_N - 38)) |
              (1 << (ECLParser.CAP_O - 38)) |
              (1 << (ECLParser.CAP_P - 38)) |
              (1 << (ECLParser.CAP_Q - 38)) |
              (1 << (ECLParser.CAP_R - 38)) |
              (1 << (ECLParser.CAP_S - 38)) |
              (1 << (ECLParser.CAP_T - 38)) |
              (1 << (ECLParser.CAP_U - 38)) |
              (1 << (ECLParser.CAP_V - 38)) |
              (1 << (ECLParser.CAP_W - 38)) |
              (1 << (ECLParser.CAP_X - 38)) |
              (1 << (ECLParser.CAP_Y - 38)) |
              (1 << (ECLParser.CAP_Z - 38)))) !==
            0) ||
        (((_la - 70) & ~0x1f) == 0 &&
          ((1 << (_la - 70)) &
            ((1 << (ECLParser.A - 70)) |
              (1 << (ECLParser.B - 70)) |
              (1 << (ECLParser.C - 70)) |
              (1 << (ECLParser.D - 70)) |
              (1 << (ECLParser.E - 70)) |
              (1 << (ECLParser.F - 70)) |
              (1 << (ECLParser.G - 70)) |
              (1 << (ECLParser.H - 70)) |
              (1 << (ECLParser.I - 70)) |
              (1 << (ECLParser.J - 70)) |
              (1 << (ECLParser.K - 70)) |
              (1 << (ECLParser.L - 70)) |
              (1 << (ECLParser.M - 70)) |
              (1 << (ECLParser.N - 70)) |
              (1 << (ECLParser.O - 70)) |
              (1 << (ECLParser.P - 70)) |
              (1 << (ECLParser.Q - 70)) |
              (1 << (ECLParser.R - 70)) |
              (1 << (ECLParser.S - 70)) |
              (1 << (ECLParser.T - 70)) |
              (1 << (ECLParser.U - 70)) |
              (1 << (ECLParser.V - 70)) |
              (1 << (ECLParser.W - 70)) |
              (1 << (ECLParser.X - 70)) |
              (1 << (ECLParser.Y - 70)) |
              (1 << (ECLParser.Z - 70)))) !==
            0)
      ) {
        this.state = 1194;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case ECLParser.DASH:
            this.state = 1191;
            this.dash();
            break;
          case ECLParser.CAP_A:
          case ECLParser.CAP_B:
          case ECLParser.CAP_C:
          case ECLParser.CAP_D:
          case ECLParser.CAP_E:
          case ECLParser.CAP_F:
          case ECLParser.CAP_G:
          case ECLParser.CAP_H:
          case ECLParser.CAP_I:
          case ECLParser.CAP_J:
          case ECLParser.CAP_K:
          case ECLParser.CAP_L:
          case ECLParser.CAP_M:
          case ECLParser.CAP_N:
          case ECLParser.CAP_O:
          case ECLParser.CAP_P:
          case ECLParser.CAP_Q:
          case ECLParser.CAP_R:
          case ECLParser.CAP_S:
          case ECLParser.CAP_T:
          case ECLParser.CAP_U:
          case ECLParser.CAP_V:
          case ECLParser.CAP_W:
          case ECLParser.CAP_X:
          case ECLParser.CAP_Y:
          case ECLParser.CAP_Z:
          case ECLParser.A:
          case ECLParser.B:
          case ECLParser.C:
          case ECLParser.D:
          case ECLParser.E:
          case ECLParser.F:
          case ECLParser.G:
          case ECLParser.H:
          case ECLParser.I:
          case ECLParser.J:
          case ECLParser.K:
          case ECLParser.L:
          case ECLParser.M:
          case ECLParser.N:
          case ECLParser.O:
          case ECLParser.P:
          case ECLParser.Q:
          case ECLParser.R:
          case ECLParser.S:
          case ECLParser.T:
          case ECLParser.U:
          case ECLParser.V:
          case ECLParser.W:
          case ECLParser.X:
          case ECLParser.Y:
          case ECLParser.Z:
            this.state = 1192;
            this.alpha();
            break;
          case ECLParser.ZERO:
          case ECLParser.ONE:
          case ECLParser.TWO:
          case ECLParser.THREE:
          case ECLParser.FOUR:
          case ECLParser.FIVE:
          case ECLParser.SIX:
          case ECLParser.SEVEN:
          case ECLParser.EIGHT:
          case ECLParser.NINE:
            this.state = 1193;
            this.integervalue();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialectaliasset() {
    let localctx = new DialectaliassetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ECLParser.RULE_dialectaliasset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1199;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 1200;
      this.ws();
      this.state = 1201;
      this.dialectalias();
      this.state = 1205;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
      if (la_ === 1) {
        this.state = 1202;
        this.ws();
        this.state = 1203;
        this.acceptabilityset();
      }
      this.state = 1216;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1207;
          this.mws();
          this.state = 1208;
          this.dialectalias();
          this.state = 1212;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 139, this._ctx);
          if (la_ === 1) {
            this.state = 1209;
            this.ws();
            this.state = 1210;
            this.acceptabilityset();
          }
        }
        this.state = 1218;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
      }

      this.state = 1219;
      this.ws();
      this.state = 1220;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dialectidset() {
    let localctx = new DialectidsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ECLParser.RULE_dialectidset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1222;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 1223;
      this.ws();
      this.state = 1224;
      this.eclconceptreference();
      this.state = 1228;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 141, this._ctx);
      if (la_ === 1) {
        this.state = 1225;
        this.ws();
        this.state = 1226;
        this.acceptabilityset();
      }
      this.state = 1239;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 143, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1230;
          this.mws();
          this.state = 1231;
          this.eclconceptreference();
          this.state = 1235;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 142, this._ctx);
          if (la_ === 1) {
            this.state = 1232;
            this.ws();
            this.state = 1233;
            this.acceptabilityset();
          }
        }
        this.state = 1241;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 143, this._ctx);
      }

      this.state = 1242;
      this.ws();
      this.state = 1243;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  acceptabilityset() {
    let localctx = new AcceptabilitysetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ECLParser.RULE_acceptabilityset);
    try {
      this.state = 1247;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 144, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1245;
          this.acceptabilityconceptreferenceset();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1246;
          this.acceptabilitytokenset();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  acceptabilityconceptreferenceset() {
    let localctx = new AcceptabilityconceptreferencesetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(
      localctx,
      180,
      ECLParser.RULE_acceptabilityconceptreferenceset,
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1249;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 1250;
      this.ws();
      this.state = 1251;
      this.eclconceptreference();
      this.state = 1257;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 145, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1252;
          this.mws();
          this.state = 1253;
          this.eclconceptreference();
        }
        this.state = 1259;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 145, this._ctx);
      }

      this.state = 1260;
      this.ws();
      this.state = 1261;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  acceptabilitytokenset() {
    let localctx = new AcceptabilitytokensetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 182, ECLParser.RULE_acceptabilitytokenset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1263;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 1264;
      this.ws();
      this.state = 1265;
      this.acceptabilitytoken();
      this.state = 1271;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 146, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1266;
          this.mws();
          this.state = 1267;
          this.acceptabilitytoken();
        }
        this.state = 1273;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 146, this._ctx);
      }

      this.state = 1274;
      this.ws();
      this.state = 1275;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  acceptabilitytoken() {
    let localctx = new AcceptabilitytokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ECLParser.RULE_acceptabilitytoken);
    try {
      this.state = 1279;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_A:
        case ECLParser.A:
          this.enterOuterAlt(localctx, 1);
          this.state = 1277;
          this.acceptable();
          break;
        case ECLParser.CAP_P:
        case ECLParser.P:
          this.enterOuterAlt(localctx, 2);
          this.state = 1278;
          this.preferred();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  acceptable() {
    let localctx = new AcceptableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ECLParser.RULE_acceptable);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1283;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 148, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1281;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1282;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1287;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 149, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1285;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1286;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1291;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1289;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1290;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1295;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 151, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1293;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1294;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1299;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 152, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1297;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1298;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1303;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 153, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1301;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1302;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  preferred() {
    let localctx = new PreferredContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ECLParser.RULE_preferred);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1307;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 154, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1305;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1306;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1311;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 155, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1309;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1310;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1315;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1313;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1314;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1319;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1317;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1318;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1323;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 158, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1321;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1322;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1327;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1325;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1326;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  conceptfilterconstraint() {
    let localctx = new ConceptfilterconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 190, ECLParser.RULE_conceptfilterconstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1329;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 1330;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 1332;
      this.ws();
      this.state = 1335;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 160, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1333;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1334;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1337;
      this.ws();
      this.state = 1338;
      this.conceptfilter();
      this.state = 1346;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 161, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1339;
          this.ws();
          this.state = 1340;
          this.match(ECLParser.COMMA);
          this.state = 1341;
          this.ws();
          this.state = 1342;
          this.conceptfilter();
        }
        this.state = 1348;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 161, this._ctx);
      }

      this.state = 1349;
      this.ws();

      this.state = 1350;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
      this.state = 1351;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  conceptfilter() {
    let localctx = new ConceptfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ECLParser.RULE_conceptfilter);
    try {
      this.state = 1357;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_D:
        case ECLParser.D:
          this.enterOuterAlt(localctx, 1);
          this.state = 1353;
          this.definitionstatusfilter();
          break;
        case ECLParser.CAP_M:
        case ECLParser.M:
          this.enterOuterAlt(localctx, 2);
          this.state = 1354;
          this.modulefilter();
          break;
        case ECLParser.CAP_E:
        case ECLParser.E:
          this.enterOuterAlt(localctx, 3);
          this.state = 1355;
          this.effectivetimefilter();
          break;
        case ECLParser.CAP_A:
        case ECLParser.A:
          this.enterOuterAlt(localctx, 4);
          this.state = 1356;
          this.activefilter();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definitionstatusfilter() {
    let localctx = new DefinitionstatusfilterContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 194, ECLParser.RULE_definitionstatusfilter);
    try {
      this.state = 1361;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 163, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1359;
          this.definitionstatusidfilter();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1360;
          this.definitionstatustokenfilter();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definitionstatusidfilter() {
    let localctx = new DefinitionstatusidfilterContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 196, ECLParser.RULE_definitionstatusidfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1363;
      this.definitionstatusidkeyword();
      this.state = 1364;
      this.ws();
      this.state = 1365;
      this.booleancomparisonoperator();
      this.state = 1366;
      this.ws();
      this.state = 1369;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 164, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1367;
          this.subexpressionconstraint();
          break;

        case 2:
          this.state = 1368;
          this.eclconceptreferenceset();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definitionstatusidkeyword() {
    let localctx = new DefinitionstatusidkeywordContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 198, ECLParser.RULE_definitionstatusidkeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1373;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 165, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1371;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1372;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1377;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 166, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1375;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1376;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1381;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 167, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1379;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1380;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1385;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 168, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1383;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1384;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1389;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1387;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1388;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1393;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 170, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1391;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1392;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1397;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 171, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1395;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1396;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1401;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 172, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1399;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1400;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1405;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 173, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1403;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1404;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1409;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 174, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1407;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1408;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1413;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 175, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1411;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1412;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1417;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 176, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1415;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1416;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1421;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 177, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1419;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1420;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1425;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1423;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1424;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1429;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 179, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1427;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1428;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1433;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 180, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1431;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1432;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1437;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 181, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1435;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1436;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1441;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 182, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1439;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1440;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definitionstatustokenfilter() {
    let localctx = new DefinitionstatustokenfilterContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 200, ECLParser.RULE_definitionstatustokenfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1443;
      this.definitionstatuskeyword();
      this.state = 1444;
      this.ws();
      this.state = 1445;
      this.booleancomparisonoperator();
      this.state = 1446;
      this.ws();
      this.state = 1449;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_D:
        case ECLParser.CAP_P:
        case ECLParser.D:
        case ECLParser.P:
          this.state = 1447;
          this.definitionstatustoken();
          break;
        case ECLParser.LEFT_PAREN:
          this.state = 1448;
          this.definitionstatustokenset();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definitionstatuskeyword() {
    let localctx = new DefinitionstatuskeywordContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 202, ECLParser.RULE_definitionstatuskeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1453;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 184, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1451;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1452;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1457;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 185, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1455;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1456;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1461;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 186, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1459;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1460;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1465;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 187, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1463;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1464;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1469;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 188, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1467;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1468;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1473;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 189, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1471;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1472;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1477;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 190, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1475;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1476;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1481;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 191, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1479;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1480;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1485;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 192, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1483;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1484;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1489;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 193, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1487;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1488;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1493;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 194, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1491;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1492;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1497;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 195, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1495;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1496;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1501;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 196, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1499;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1500;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1505;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 197, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1503;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1504;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1509;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 198, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1507;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1508;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1513;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 199, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1511;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1512;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definitionstatustoken() {
    let localctx = new DefinitionstatustokenContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 204, ECLParser.RULE_definitionstatustoken);
    try {
      this.state = 1517;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_P:
        case ECLParser.P:
          this.enterOuterAlt(localctx, 1);
          this.state = 1515;
          this.primitivetoken();
          break;
        case ECLParser.CAP_D:
        case ECLParser.D:
          this.enterOuterAlt(localctx, 2);
          this.state = 1516;
          this.definedtoken();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definitionstatustokenset() {
    let localctx = new DefinitionstatustokensetContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 206, ECLParser.RULE_definitionstatustokenset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1519;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 1520;
      this.ws();
      this.state = 1521;
      this.definitionstatustoken();
      this.state = 1527;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 201, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1522;
          this.mws();
          this.state = 1523;
          this.definitionstatustoken();
        }
        this.state = 1529;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 201, this._ctx);
      }

      this.state = 1530;
      this.ws();
      this.state = 1531;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  primitivetoken() {
    let localctx = new PrimitivetokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ECLParser.RULE_primitivetoken);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1535;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 202, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1533;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1534;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_P || _la === ECLParser.P)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1539;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 203, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1537;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1538;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1543;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1541;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1542;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1547;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 205, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1545;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1546;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1551;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 206, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1549;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1550;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1555;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 207, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1553;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1554;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1559;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 208, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1557;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1558;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1563;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1561;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_V || _la === ECLParser.V)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1562;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_V || _la === ECLParser.V)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1567;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 210, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1565;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1566;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  definedtoken() {
    let localctx = new DefinedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ECLParser.RULE_definedtoken);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1571;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 211, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1569;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1570;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1575;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 212, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1573;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1574;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1579;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 213, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1577;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1578;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1583;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 214, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1581;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1582;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1587;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 215, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1585;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1586;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1591;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 216, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1589;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1590;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1595;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 217, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1593;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1594;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  modulefilter() {
    let localctx = new ModulefilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ECLParser.RULE_modulefilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1597;
      this.moduleidkeyword();
      this.state = 1598;
      this.ws();
      this.state = 1599;
      this.booleancomparisonoperator();
      this.state = 1600;
      this.ws();
      this.state = 1603;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 218, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1601;
          this.subexpressionconstraint();
          break;

        case 2:
          this.state = 1602;
          this.eclconceptreferenceset();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  moduleidkeyword() {
    let localctx = new ModuleidkeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ECLParser.RULE_moduleidkeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1607;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 219, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1605;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1606;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1611;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 220, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1609;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1610;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1615;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 221, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1613;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1614;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1619;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 222, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1617;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1618;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1623;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 223, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1621;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1622;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1627;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 224, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1625;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1626;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1631;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 225, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1629;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1630;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1635;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 226, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1633;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1634;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  effectivetimefilter() {
    let localctx = new EffectivetimefilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ECLParser.RULE_effectivetimefilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1637;
      this.effectivetimekeyword();
      this.state = 1638;
      this.ws();
      this.state = 1639;
      this.timecomparisonoperator();
      this.state = 1640;
      this.ws();
      this.state = 1643;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.QUOTE:
          this.state = 1641;
          this.timevalue();
          break;
        case ECLParser.LEFT_PAREN:
          this.state = 1642;
          this.timevalueset();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  effectivetimekeyword() {
    let localctx = new EffectivetimekeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ECLParser.RULE_effectivetimekeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1647;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 228, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1645;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1646;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1651;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 229, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1649;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1650;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1655;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 230, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1653;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1654;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1659;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 231, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1657;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1658;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1663;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 232, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1661;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1662;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1667;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 233, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1665;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1666;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1671;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1669;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1670;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1675;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 235, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1673;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_V || _la === ECLParser.V)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1674;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_V || _la === ECLParser.V)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1679;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 236, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1677;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1678;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1683;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 237, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1681;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1682;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1687;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 238, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1685;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1686;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1691;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 239, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1689;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1690;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1695;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 240, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1693;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1694;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  timevalue() {
    let localctx = new TimevalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ECLParser.RULE_timevalue);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1697;
      this.qm();
      this.state = 1702;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        (_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << ECLParser.ONE) |
            (1 << ECLParser.TWO) |
            (1 << ECLParser.THREE) |
            (1 << ECLParser.FOUR) |
            (1 << ECLParser.FIVE) |
            (1 << ECLParser.SIX) |
            (1 << ECLParser.SEVEN) |
            (1 << ECLParser.EIGHT) |
            (1 << ECLParser.NINE))) !==
          0
      ) {
        this.state = 1698;
        this.year();
        this.state = 1699;
        this.month();
        this.state = 1700;
        this.day();
      }

      this.state = 1704;
      this.qm();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  timevalueset() {
    let localctx = new TimevaluesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ECLParser.RULE_timevalueset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1706;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 1707;
      this.ws();
      this.state = 1708;
      this.timevalue();
      this.state = 1714;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1709;
          this.mws();
          this.state = 1710;
          this.timevalue();
        }
        this.state = 1716;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
      }

      this.state = 1717;
      this.ws();
      this.state = 1718;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  year() {
    let localctx = new YearContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ECLParser.RULE_year);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1720;
      this.digitnonzero();
      this.state = 1721;
      this.digit();
      this.state = 1722;
      this.digit();
      this.state = 1723;
      this.digit();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  month() {
    let localctx = new MonthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ECLParser.RULE_month);
    try {
      this.state = 1749;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 243, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1725;
          this.match(ECLParser.ZERO);
          this.state = 1726;
          this.match(ECLParser.ONE);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1727;
          this.match(ECLParser.ZERO);
          this.state = 1728;
          this.match(ECLParser.TWO);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1729;
          this.match(ECLParser.ZERO);
          this.state = 1730;
          this.match(ECLParser.THREE);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1731;
          this.match(ECLParser.ZERO);
          this.state = 1732;
          this.match(ECLParser.FOUR);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1733;
          this.match(ECLParser.ZERO);
          this.state = 1734;
          this.match(ECLParser.FIVE);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1735;
          this.match(ECLParser.ZERO);
          this.state = 1736;
          this.match(ECLParser.SIX);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1737;
          this.match(ECLParser.ZERO);
          this.state = 1738;
          this.match(ECLParser.SEVEN);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1739;
          this.match(ECLParser.ZERO);
          this.state = 1740;
          this.match(ECLParser.EIGHT);
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1741;
          this.match(ECLParser.ZERO);
          this.state = 1742;
          this.match(ECLParser.NINE);
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1743;
          this.match(ECLParser.ONE);
          this.state = 1744;
          this.match(ECLParser.ZERO);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1745;
          this.match(ECLParser.ONE);
          this.state = 1746;
          this.match(ECLParser.ONE);
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1747;
          this.match(ECLParser.ONE);
          this.state = 1748;
          this.match(ECLParser.TWO);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  day() {
    let localctx = new DayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ECLParser.RULE_day);
    try {
      this.state = 1813;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 244, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1751;
          this.match(ECLParser.ZERO);
          this.state = 1752;
          this.match(ECLParser.ONE);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1753;
          this.match(ECLParser.ZERO);
          this.state = 1754;
          this.match(ECLParser.TWO);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1755;
          this.match(ECLParser.ZERO);
          this.state = 1756;
          this.match(ECLParser.THREE);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1757;
          this.match(ECLParser.ZERO);
          this.state = 1758;
          this.match(ECLParser.FOUR);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1759;
          this.match(ECLParser.ZERO);
          this.state = 1760;
          this.match(ECLParser.FIVE);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1761;
          this.match(ECLParser.ZERO);
          this.state = 1762;
          this.match(ECLParser.SIX);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1763;
          this.match(ECLParser.ZERO);
          this.state = 1764;
          this.match(ECLParser.SEVEN);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1765;
          this.match(ECLParser.ZERO);
          this.state = 1766;
          this.match(ECLParser.EIGHT);
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1767;
          this.match(ECLParser.ZERO);
          this.state = 1768;
          this.match(ECLParser.NINE);
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1769;
          this.match(ECLParser.ONE);
          this.state = 1770;
          this.match(ECLParser.ZERO);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1771;
          this.match(ECLParser.ONE);
          this.state = 1772;
          this.match(ECLParser.ONE);
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1773;
          this.match(ECLParser.ONE);
          this.state = 1774;
          this.match(ECLParser.TWO);
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1775;
          this.match(ECLParser.ONE);
          this.state = 1776;
          this.match(ECLParser.THREE);
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1777;
          this.match(ECLParser.ONE);
          this.state = 1778;
          this.match(ECLParser.FOUR);
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 1779;
          this.match(ECLParser.ONE);
          this.state = 1780;
          this.match(ECLParser.FIVE);
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 1781;
          this.match(ECLParser.ONE);
          this.state = 1782;
          this.match(ECLParser.SIX);
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 1783;
          this.match(ECLParser.ONE);
          this.state = 1784;
          this.match(ECLParser.SEVEN);
          break;

        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 1785;
          this.match(ECLParser.ONE);
          this.state = 1786;
          this.match(ECLParser.EIGHT);
          break;

        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 1787;
          this.match(ECLParser.ONE);
          this.state = 1788;
          this.match(ECLParser.NINE);
          break;

        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 1789;
          this.match(ECLParser.TWO);
          this.state = 1790;
          this.match(ECLParser.ZERO);
          break;

        case 21:
          this.enterOuterAlt(localctx, 21);
          this.state = 1791;
          this.match(ECLParser.TWO);
          this.state = 1792;
          this.match(ECLParser.ONE);
          break;

        case 22:
          this.enterOuterAlt(localctx, 22);
          this.state = 1793;
          this.match(ECLParser.TWO);
          this.state = 1794;
          this.match(ECLParser.TWO);
          break;

        case 23:
          this.enterOuterAlt(localctx, 23);
          this.state = 1795;
          this.match(ECLParser.TWO);
          this.state = 1796;
          this.match(ECLParser.THREE);
          break;

        case 24:
          this.enterOuterAlt(localctx, 24);
          this.state = 1797;
          this.match(ECLParser.TWO);
          this.state = 1798;
          this.match(ECLParser.FOUR);
          break;

        case 25:
          this.enterOuterAlt(localctx, 25);
          this.state = 1799;
          this.match(ECLParser.TWO);
          this.state = 1800;
          this.match(ECLParser.FIVE);
          break;

        case 26:
          this.enterOuterAlt(localctx, 26);
          this.state = 1801;
          this.match(ECLParser.TWO);
          this.state = 1802;
          this.match(ECLParser.SIX);
          break;

        case 27:
          this.enterOuterAlt(localctx, 27);
          this.state = 1803;
          this.match(ECLParser.TWO);
          this.state = 1804;
          this.match(ECLParser.SEVEN);
          break;

        case 28:
          this.enterOuterAlt(localctx, 28);
          this.state = 1805;
          this.match(ECLParser.TWO);
          this.state = 1806;
          this.match(ECLParser.EIGHT);
          break;

        case 29:
          this.enterOuterAlt(localctx, 29);
          this.state = 1807;
          this.match(ECLParser.TWO);
          this.state = 1808;
          this.match(ECLParser.NINE);
          break;

        case 30:
          this.enterOuterAlt(localctx, 30);
          this.state = 1809;
          this.match(ECLParser.THREE);
          this.state = 1810;
          this.match(ECLParser.ZERO);
          break;

        case 31:
          this.enterOuterAlt(localctx, 31);
          this.state = 1811;
          this.match(ECLParser.THREE);
          this.state = 1812;
          this.match(ECLParser.ONE);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  activefilter() {
    let localctx = new ActivefilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ECLParser.RULE_activefilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1815;
      this.activekeyword();
      this.state = 1816;
      this.ws();
      this.state = 1817;
      this.booleancomparisonoperator();
      this.state = 1818;
      this.ws();
      this.state = 1819;
      this.activevalue();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  activekeyword() {
    let localctx = new ActivekeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ECLParser.RULE_activekeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1823;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 245, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1821;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1822;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1827;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 246, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1825;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1826;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_C || _la === ECLParser.C)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1831;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 247, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1829;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1830;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1835;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 248, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1833;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1834;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1839;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 249, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1837;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_V || _la === ECLParser.V)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1838;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_V || _la === ECLParser.V)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1843;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 250, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1841;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1842;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  activevalue() {
    let localctx = new ActivevalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ECLParser.RULE_activevalue);
    try {
      this.state = 1847;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.ONE:
        case ECLParser.CAP_T:
        case ECLParser.T:
          this.enterOuterAlt(localctx, 1);
          this.state = 1845;
          this.activetruevalue();
          break;
        case ECLParser.ZERO:
        case ECLParser.CAP_F:
        case ECLParser.F:
          this.enterOuterAlt(localctx, 2);
          this.state = 1846;
          this.activefalsevalue();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  activetruevalue() {
    let localctx = new ActivetruevalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ECLParser.RULE_activetruevalue);
    var _la = 0; // Token type
    try {
      this.state = 1854;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.ONE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1849;
          this.match(ECLParser.ONE);
          break;
        case ECLParser.CAP_T:
        case ECLParser.T:
          this.enterOuterAlt(localctx, 2);
          this.state = 1850;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1851;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1852;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1853;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  activefalsevalue() {
    let localctx = new ActivefalsevalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ECLParser.RULE_activefalsevalue);
    var _la = 0; // Token type
    try {
      this.state = 1862;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.ZERO:
          this.enterOuterAlt(localctx, 1);
          this.state = 1856;
          this.match(ECLParser.ZERO);
          break;
        case ECLParser.CAP_F:
        case ECLParser.F:
          this.enterOuterAlt(localctx, 2);
          this.state = 1857;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1858;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1859;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1860;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1861;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  memberfilterconstraint() {
    let localctx = new MemberfilterconstraintContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 240, ECLParser.RULE_memberfilterconstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1864;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 1865;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 1867;
      this.ws();
      this.state = 1870;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 254, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1868;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1869;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1872;
      this.ws();
      this.state = 1873;
      this.memberfilter();
      this.state = 1881;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 255, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1874;
          this.ws();
          this.state = 1875;
          this.match(ECLParser.COMMA);
          this.state = 1876;
          this.ws();
          this.state = 1877;
          this.memberfilter();
        }
        this.state = 1883;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 255, this._ctx);
      }

      this.state = 1884;
      this.ws();

      this.state = 1885;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
      this.state = 1886;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  memberfilter() {
    let localctx = new MemberfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ECLParser.RULE_memberfilter);
    try {
      this.state = 1892;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 256, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1888;
          this.memberfieldfilter();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1889;
          this.modulefilter();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1890;
          this.effectivetimefilter();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1891;
          this.activefilter();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  memberfieldfilter() {
    let localctx = new MemberfieldfilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ECLParser.RULE_memberfieldfilter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1894;
      this.refsetfieldname();
      this.state = 1895;
      this.ws();
      this.state = 1922;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 259, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1896;
          this.expressioncomparisonoperator();
          this.state = 1897;
          this.ws();
          this.state = 1898;
          this.subexpressionconstraint();
          break;

        case 2:
          this.state = 1900;
          this.numericcomparisonoperator();
          this.state = 1901;
          this.ws();
          this.state = 1902;
          this.match(ECLParser.HASH);
          this.state = 1903;
          this.numericvalue();
          break;

        case 3:
          this.state = 1905;
          this.stringcomparisonoperator();
          this.state = 1906;
          this.ws();
          this.state = 1909;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case ECLParser.QUOTE:
            case ECLParser.CAP_M:
            case ECLParser.CAP_W:
            case ECLParser.M:
            case ECLParser.W:
              this.state = 1907;
              this.typedsearchterm();
              break;
            case ECLParser.LEFT_PAREN:
              this.state = 1908;
              this.typedsearchtermset();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;

        case 4:
          this.state = 1911;
          this.booleancomparisonoperator();
          this.state = 1912;
          this.ws();
          this.state = 1913;
          this.booleanvalue();
          break;

        case 5:
          this.state = 1915;
          this.ws();
          this.state = 1916;
          this.timecomparisonoperator();
          this.state = 1917;
          this.ws();
          this.state = 1920;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case ECLParser.QUOTE:
              this.state = 1918;
              this.timevalue();
              break;
            case ECLParser.LEFT_PAREN:
              this.state = 1919;
              this.timevalueset();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  historysupplement() {
    let localctx = new HistorysupplementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ECLParser.RULE_historysupplement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1924;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 1925;
      this.match(ECLParser.LEFT_CURLY_BRACE);
      this.state = 1927;
      this.ws();
      this.state = 1928;
      this.match(ECLParser.PLUS);
      this.state = 1929;
      this.ws();
      this.state = 1930;
      this.historykeyword();
      this.state = 1935;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 260, this._ctx);
      if (la_ === 1) {
        this.state = 1931;
        this.historyprofilesuffix();
      } else if (la_ === 2) {
        this.state = 1932;
        this.ws();
        this.state = 1933;
        this.historysubset();
      }
      this.state = 1937;
      this.ws();

      this.state = 1938;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
      this.state = 1939;
      this.match(ECLParser.RIGHT_CURLY_BRACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  historykeyword() {
    let localctx = new HistorykeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ECLParser.RULE_historykeyword);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1943;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 261, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1941;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_H || _la === ECLParser.H)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1942;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_H || _la === ECLParser.H)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1947;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 262, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1945;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1946;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1951;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 263, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1949;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1950;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1955;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 264, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1953;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1954;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1959;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 265, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1957;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1958;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1963;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 266, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1961;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1962;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1967;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 267, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1965;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1966;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_Y || _la === ECLParser.Y)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  historyprofilesuffix() {
    let localctx = new HistoryprofilesuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ECLParser.RULE_historyprofilesuffix);
    try {
      this.state = 1972;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 268, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1969;
          this.historyminimumsuffix();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1970;
          this.historymoderatesuffix();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1971;
          this.historymaximumsuffix();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  historyminimumsuffix() {
    let localctx = new HistoryminimumsuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ECLParser.RULE_historyminimumsuffix);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1974;
      _la = this._input.LA(1);
      if (!(_la === ECLParser.DASH || _la === ECLParser.UNDERSCORE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1977;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 269, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1975;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1976;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1981;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 270, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1979;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1980;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1985;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 271, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1983;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1984;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  historymoderatesuffix() {
    let localctx = new HistorymoderatesuffixContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 254, ECLParser.RULE_historymoderatesuffix);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1987;
      _la = this._input.LA(1);
      if (!(_la === ECLParser.DASH || _la === ECLParser.UNDERSCORE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1990;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 272, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1988;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1989;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1994;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 273, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1992;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1993;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 1998;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 274, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1996;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 1997;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  historymaximumsuffix() {
    let localctx = new HistorymaximumsuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ECLParser.RULE_historymaximumsuffix);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2000;
      _la = this._input.LA(1);
      if (!(_la === ECLParser.DASH || _la === ECLParser.UNDERSCORE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 2003;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 275, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2001;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2002;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2007;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 276, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2005;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2006;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2011;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 277, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2009;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_X || _la === ECLParser.X)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2010;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_X || _la === ECLParser.X)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  historysubset() {
    let localctx = new HistorysubsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ECLParser.RULE_historysubset);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2013;
      this.match(ECLParser.LEFT_PAREN);
      this.state = 2014;
      this.ws();
      this.state = 2015;
      this.expressionconstraint();
      this.state = 2016;
      this.ws();
      this.state = 2017;
      this.match(ECLParser.RIGHT_PAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  numericvalue() {
    let localctx = new NumericvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ECLParser.RULE_numericvalue);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2020;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === ECLParser.PLUS || _la === ECLParser.DASH) {
        this.state = 2019;
        _la = this._input.LA(1);
        if (!(_la === ECLParser.PLUS || _la === ECLParser.DASH)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }

      this.state = 2024;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 279, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2022;
          this.decimalvalue();
          break;

        case 2:
          this.state = 2023;
          this.integervalue();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  stringvalue() {
    let localctx = new StringvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, ECLParser.RULE_stringvalue);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2028;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 2028;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case ECLParser.UTF8_LETTER:
          case ECLParser.TAB:
          case ECLParser.LF:
          case ECLParser.CR:
          case ECLParser.SPACE:
          case ECLParser.EXCLAMATION:
          case ECLParser.HASH:
          case ECLParser.DOLLAR:
          case ECLParser.PERCENT:
          case ECLParser.AMPERSAND:
          case ECLParser.APOSTROPHE:
          case ECLParser.LEFT_PAREN:
          case ECLParser.RIGHT_PAREN:
          case ECLParser.ASTERISK:
          case ECLParser.PLUS:
          case ECLParser.COMMA:
          case ECLParser.DASH:
          case ECLParser.PERIOD:
          case ECLParser.SLASH:
          case ECLParser.ZERO:
          case ECLParser.ONE:
          case ECLParser.TWO:
          case ECLParser.THREE:
          case ECLParser.FOUR:
          case ECLParser.FIVE:
          case ECLParser.SIX:
          case ECLParser.SEVEN:
          case ECLParser.EIGHT:
          case ECLParser.NINE:
          case ECLParser.COLON:
          case ECLParser.SEMICOLON:
          case ECLParser.LESS_THAN:
          case ECLParser.EQUALS:
          case ECLParser.GREATER_THAN:
          case ECLParser.QUESTION:
          case ECLParser.AT:
          case ECLParser.CAP_A:
          case ECLParser.CAP_B:
          case ECLParser.CAP_C:
          case ECLParser.CAP_D:
          case ECLParser.CAP_E:
          case ECLParser.CAP_F:
          case ECLParser.CAP_G:
          case ECLParser.CAP_H:
          case ECLParser.CAP_I:
          case ECLParser.CAP_J:
          case ECLParser.CAP_K:
          case ECLParser.CAP_L:
          case ECLParser.CAP_M:
          case ECLParser.CAP_N:
          case ECLParser.CAP_O:
          case ECLParser.CAP_P:
          case ECLParser.CAP_Q:
          case ECLParser.CAP_R:
          case ECLParser.CAP_S:
          case ECLParser.CAP_T:
          case ECLParser.CAP_U:
          case ECLParser.CAP_V:
          case ECLParser.CAP_W:
          case ECLParser.CAP_X:
          case ECLParser.CAP_Y:
          case ECLParser.CAP_Z:
          case ECLParser.LEFT_BRACE:
          case ECLParser.RIGHT_BRACE:
          case ECLParser.CARAT:
          case ECLParser.UNDERSCORE:
          case ECLParser.ACCENT:
          case ECLParser.A:
          case ECLParser.B:
          case ECLParser.C:
          case ECLParser.D:
          case ECLParser.E:
          case ECLParser.F:
          case ECLParser.G:
          case ECLParser.H:
          case ECLParser.I:
          case ECLParser.J:
          case ECLParser.K:
          case ECLParser.L:
          case ECLParser.M:
          case ECLParser.N:
          case ECLParser.O:
          case ECLParser.P:
          case ECLParser.Q:
          case ECLParser.R:
          case ECLParser.S:
          case ECLParser.T:
          case ECLParser.U:
          case ECLParser.V:
          case ECLParser.W:
          case ECLParser.X:
          case ECLParser.Y:
          case ECLParser.Z:
          case ECLParser.LEFT_CURLY_BRACE:
          case ECLParser.PIPE:
          case ECLParser.RIGHT_CURLY_BRACE:
          case ECLParser.TILDE:
            this.state = 2026;
            this.anynonescapedchar();
            break;
          case ECLParser.BACKSLASH:
            this.state = 2027;
            this.escapedchar();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2030;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.UTF8_LETTER) |
              (1 << ECLParser.TAB) |
              (1 << ECLParser.LF) |
              (1 << ECLParser.CR) |
              (1 << ECLParser.SPACE) |
              (1 << ECLParser.EXCLAMATION) |
              (1 << ECLParser.HASH) |
              (1 << ECLParser.DOLLAR) |
              (1 << ECLParser.PERCENT) |
              (1 << ECLParser.AMPERSAND) |
              (1 << ECLParser.APOSTROPHE) |
              (1 << ECLParser.LEFT_PAREN) |
              (1 << ECLParser.RIGHT_PAREN) |
              (1 << ECLParser.ASTERISK) |
              (1 << ECLParser.PLUS) |
              (1 << ECLParser.COMMA) |
              (1 << ECLParser.DASH) |
              (1 << ECLParser.PERIOD) |
              (1 << ECLParser.SLASH) |
              (1 << ECLParser.ZERO) |
              (1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE) |
              (1 << ECLParser.COLON))) !==
            0) ||
        (((_la - 32) & ~0x1f) == 0 &&
          ((1 << (_la - 32)) &
            ((1 << (ECLParser.SEMICOLON - 32)) |
              (1 << (ECLParser.LESS_THAN - 32)) |
              (1 << (ECLParser.EQUALS - 32)) |
              (1 << (ECLParser.GREATER_THAN - 32)) |
              (1 << (ECLParser.QUESTION - 32)) |
              (1 << (ECLParser.AT - 32)) |
              (1 << (ECLParser.CAP_A - 32)) |
              (1 << (ECLParser.CAP_B - 32)) |
              (1 << (ECLParser.CAP_C - 32)) |
              (1 << (ECLParser.CAP_D - 32)) |
              (1 << (ECLParser.CAP_E - 32)) |
              (1 << (ECLParser.CAP_F - 32)) |
              (1 << (ECLParser.CAP_G - 32)) |
              (1 << (ECLParser.CAP_H - 32)) |
              (1 << (ECLParser.CAP_I - 32)) |
              (1 << (ECLParser.CAP_J - 32)) |
              (1 << (ECLParser.CAP_K - 32)) |
              (1 << (ECLParser.CAP_L - 32)) |
              (1 << (ECLParser.CAP_M - 32)) |
              (1 << (ECLParser.CAP_N - 32)) |
              (1 << (ECLParser.CAP_O - 32)) |
              (1 << (ECLParser.CAP_P - 32)) |
              (1 << (ECLParser.CAP_Q - 32)) |
              (1 << (ECLParser.CAP_R - 32)) |
              (1 << (ECLParser.CAP_S - 32)) |
              (1 << (ECLParser.CAP_T - 32)) |
              (1 << (ECLParser.CAP_U - 32)) |
              (1 << (ECLParser.CAP_V - 32)) |
              (1 << (ECLParser.CAP_W - 32)) |
              (1 << (ECLParser.CAP_X - 32)) |
              (1 << (ECLParser.CAP_Y - 32)) |
              (1 << (ECLParser.CAP_Z - 32)))) !==
            0) ||
        (((_la - 64) & ~0x1f) == 0 &&
          ((1 << (_la - 64)) &
            ((1 << (ECLParser.LEFT_BRACE - 64)) |
              (1 << (ECLParser.BACKSLASH - 64)) |
              (1 << (ECLParser.RIGHT_BRACE - 64)) |
              (1 << (ECLParser.CARAT - 64)) |
              (1 << (ECLParser.UNDERSCORE - 64)) |
              (1 << (ECLParser.ACCENT - 64)) |
              (1 << (ECLParser.A - 64)) |
              (1 << (ECLParser.B - 64)) |
              (1 << (ECLParser.C - 64)) |
              (1 << (ECLParser.D - 64)) |
              (1 << (ECLParser.E - 64)) |
              (1 << (ECLParser.F - 64)) |
              (1 << (ECLParser.G - 64)) |
              (1 << (ECLParser.H - 64)) |
              (1 << (ECLParser.I - 64)) |
              (1 << (ECLParser.J - 64)) |
              (1 << (ECLParser.K - 64)) |
              (1 << (ECLParser.L - 64)) |
              (1 << (ECLParser.M - 64)) |
              (1 << (ECLParser.N - 64)) |
              (1 << (ECLParser.O - 64)) |
              (1 << (ECLParser.P - 64)) |
              (1 << (ECLParser.Q - 64)) |
              (1 << (ECLParser.R - 64)) |
              (1 << (ECLParser.S - 64)) |
              (1 << (ECLParser.T - 64)) |
              (1 << (ECLParser.U - 64)) |
              (1 << (ECLParser.V - 64)) |
              (1 << (ECLParser.W - 64)) |
              (1 << (ECLParser.X - 64)) |
              (1 << (ECLParser.Y - 64)) |
              (1 << (ECLParser.Z - 64)))) !==
            0) ||
        (((_la - 96) & ~0x1f) == 0 &&
          ((1 << (_la - 96)) &
            ((1 << (ECLParser.LEFT_CURLY_BRACE - 96)) |
              (1 << (ECLParser.PIPE - 96)) |
              (1 << (ECLParser.RIGHT_CURLY_BRACE - 96)) |
              (1 << (ECLParser.TILDE - 96)))) !==
            0)
      );
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  integervalue() {
    let localctx = new IntegervalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ECLParser.RULE_integervalue);
    try {
      this.state = 2040;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2032;
          this.digitnonzero();
          this.state = 2036;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 282, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 2033;
              this.digit();
            }
            this.state = 2038;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 282, this._ctx);
          }

          break;
        case ECLParser.ZERO:
          this.enterOuterAlt(localctx, 2);
          this.state = 2039;
          this.zero();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  decimalvalue() {
    let localctx = new DecimalvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ECLParser.RULE_decimalvalue);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2042;
      this.integervalue();
      this.state = 2043;
      this.match(ECLParser.PERIOD);
      this.state = 2045;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 2044;
        this.digit();
        this.state = 2047;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (
        (_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << ECLParser.ZERO) |
            (1 << ECLParser.ONE) |
            (1 << ECLParser.TWO) |
            (1 << ECLParser.THREE) |
            (1 << ECLParser.FOUR) |
            (1 << ECLParser.FIVE) |
            (1 << ECLParser.SIX) |
            (1 << ECLParser.SEVEN) |
            (1 << ECLParser.EIGHT) |
            (1 << ECLParser.NINE))) !==
          0
      );
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  booleanvalue() {
    let localctx = new BooleanvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ECLParser.RULE_booleanvalue);
    try {
      this.state = 2051;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_T:
        case ECLParser.T:
          this.enterOuterAlt(localctx, 1);
          this.state = 2049;
          this.true_1();
          break;
        case ECLParser.CAP_F:
        case ECLParser.F:
          this.enterOuterAlt(localctx, 2);
          this.state = 2050;
          this.false_1();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  true_1() {
    let localctx = new True_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ECLParser.RULE_true_1);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2055;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 286, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2053;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2054;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_T || _la === ECLParser.T)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2059;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 287, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2057;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2058;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2063;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 288, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2061;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2062;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2067;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 289, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2065;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2066;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  false_1() {
    let localctx = new False_1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ECLParser.RULE_false_1);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2071;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 290, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2069;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2070;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_F || _la === ECLParser.F)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2075;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 291, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2073;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2074;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2079;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 292, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2077;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2078;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_L || _la === ECLParser.L)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2083;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 293, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2081;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2082;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
      this.state = 2087;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 294, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2085;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 2:
          this.state = 2086;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.CAP_E || _la === ECLParser.E)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  nonnegativeintegervalue() {
    let localctx = new NonnegativeintegervalueContext(
      this,
      this._ctx,
      this.state,
    );
    this.enterRule(localctx, 274, ECLParser.RULE_nonnegativeintegervalue);
    var _la = 0; // Token type
    try {
      this.state = 2097;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2089;
          this.digitnonzero();
          this.state = 2093;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (
            (_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << ECLParser.ZERO) |
                (1 << ECLParser.ONE) |
                (1 << ECLParser.TWO) |
                (1 << ECLParser.THREE) |
                (1 << ECLParser.FOUR) |
                (1 << ECLParser.FIVE) |
                (1 << ECLParser.SIX) |
                (1 << ECLParser.SEVEN) |
                (1 << ECLParser.EIGHT) |
                (1 << ECLParser.NINE))) !==
              0
          ) {
            this.state = 2090;
            this.digit();
            this.state = 2095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        case ECLParser.ZERO:
          this.enterOuterAlt(localctx, 2);
          this.state = 2096;
          this.zero();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  sctid() {
    let localctx = new SctidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, ECLParser.RULE_sctid);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2099;
      this.digitnonzero();

      this.state = 2100;
      this.digit();

      this.state = 2101;
      this.digit();

      this.state = 2102;
      this.digit();

      this.state = 2103;
      this.digit();

      this.state = 2104;
      this.digit();
      this.state = 2196;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 298, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2105;
          this.digit();

          this.state = 2106;
          this.digit();

          this.state = 2107;
          this.digit();

          this.state = 2108;
          this.digit();

          this.state = 2109;
          this.digit();

          this.state = 2110;
          this.digit();

          this.state = 2111;
          this.digit();

          this.state = 2112;
          this.digit();

          this.state = 2113;
          this.digit();

          this.state = 2114;
          this.digit();

          this.state = 2115;
          this.digit();

          this.state = 2116;
          this.digit();
          break;

        case 2:
          this.state = 2118;
          this.digit();

          this.state = 2119;
          this.digit();

          this.state = 2120;
          this.digit();

          this.state = 2121;
          this.digit();

          this.state = 2122;
          this.digit();

          this.state = 2123;
          this.digit();

          this.state = 2124;
          this.digit();

          this.state = 2125;
          this.digit();

          this.state = 2126;
          this.digit();

          this.state = 2127;
          this.digit();

          this.state = 2128;
          this.digit();
          break;

        case 3:
          this.state = 2130;
          this.digit();

          this.state = 2131;
          this.digit();

          this.state = 2132;
          this.digit();

          this.state = 2133;
          this.digit();

          this.state = 2134;
          this.digit();

          this.state = 2135;
          this.digit();

          this.state = 2136;
          this.digit();

          this.state = 2137;
          this.digit();

          this.state = 2138;
          this.digit();

          this.state = 2139;
          this.digit();
          break;

        case 4:
          this.state = 2141;
          this.digit();

          this.state = 2142;
          this.digit();

          this.state = 2143;
          this.digit();

          this.state = 2144;
          this.digit();

          this.state = 2145;
          this.digit();

          this.state = 2146;
          this.digit();

          this.state = 2147;
          this.digit();

          this.state = 2148;
          this.digit();

          this.state = 2149;
          this.digit();
          break;

        case 5:
          this.state = 2151;
          this.digit();

          this.state = 2152;
          this.digit();

          this.state = 2153;
          this.digit();

          this.state = 2154;
          this.digit();

          this.state = 2155;
          this.digit();

          this.state = 2156;
          this.digit();

          this.state = 2157;
          this.digit();

          this.state = 2158;
          this.digit();
          break;

        case 6:
          this.state = 2160;
          this.digit();

          this.state = 2161;
          this.digit();

          this.state = 2162;
          this.digit();

          this.state = 2163;
          this.digit();

          this.state = 2164;
          this.digit();

          this.state = 2165;
          this.digit();

          this.state = 2166;
          this.digit();
          break;

        case 7:
          this.state = 2168;
          this.digit();

          this.state = 2169;
          this.digit();

          this.state = 2170;
          this.digit();

          this.state = 2171;
          this.digit();

          this.state = 2172;
          this.digit();

          this.state = 2173;
          this.digit();
          break;

        case 8:
          this.state = 2175;
          this.digit();

          this.state = 2176;
          this.digit();

          this.state = 2177;
          this.digit();

          this.state = 2178;
          this.digit();

          this.state = 2179;
          this.digit();
          break;

        case 9:
          this.state = 2181;
          this.digit();

          this.state = 2182;
          this.digit();

          this.state = 2183;
          this.digit();

          this.state = 2184;
          this.digit();
          break;

        case 10:
          this.state = 2186;
          this.digit();

          this.state = 2187;
          this.digit();

          this.state = 2188;
          this.digit();
          break;

        case 11:
          this.state = 2190;
          this.digit();

          this.state = 2191;
          this.digit();
          break;

        case 12:
          this.state = 2194;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            (_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << ECLParser.ZERO) |
                (1 << ECLParser.ONE) |
                (1 << ECLParser.TWO) |
                (1 << ECLParser.THREE) |
                (1 << ECLParser.FOUR) |
                (1 << ECLParser.FIVE) |
                (1 << ECLParser.SIX) |
                (1 << ECLParser.SEVEN) |
                (1 << ECLParser.EIGHT) |
                (1 << ECLParser.NINE))) !==
              0
          ) {
            this.state = 2193;
            this.digit();
          }

          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ws() {
    let localctx = new WsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ECLParser.RULE_ws);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2205;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 300, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2203;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case ECLParser.SPACE:
              this.state = 2198;
              this.sp();
              break;
            case ECLParser.TAB:
              this.state = 2199;
              this.htab();
              break;
            case ECLParser.CR:
              this.state = 2200;
              this.cr();
              break;
            case ECLParser.LF:
              this.state = 2201;
              this.lf();
              break;
            case ECLParser.SLASH:
              this.state = 2202;
              this.comment();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        }
        this.state = 2207;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 300, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  mws() {
    let localctx = new MwsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ECLParser.RULE_mws);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2213;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 2213;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case ECLParser.SPACE:
                this.state = 2208;
                this.sp();
                break;
              case ECLParser.TAB:
                this.state = 2209;
                this.htab();
                break;
              case ECLParser.CR:
                this.state = 2210;
                this.cr();
                break;
              case ECLParser.LF:
                this.state = 2211;
                this.lf();
                break;
              case ECLParser.SLASH:
                this.state = 2212;
                this.comment();
                break;
              default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2215;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 302, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  comment() {
    let localctx = new CommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ECLParser.RULE_comment);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2217;
      this.match(ECLParser.SLASH);
      this.state = 2218;
      this.match(ECLParser.ASTERISK);
      this.state = 2224;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 304, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2222;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case ECLParser.UTF8_LETTER:
            case ECLParser.TAB:
            case ECLParser.LF:
            case ECLParser.CR:
            case ECLParser.SPACE:
            case ECLParser.EXCLAMATION:
            case ECLParser.QUOTE:
            case ECLParser.HASH:
            case ECLParser.DOLLAR:
            case ECLParser.PERCENT:
            case ECLParser.AMPERSAND:
            case ECLParser.APOSTROPHE:
            case ECLParser.LEFT_PAREN:
            case ECLParser.RIGHT_PAREN:
            case ECLParser.PLUS:
            case ECLParser.COMMA:
            case ECLParser.DASH:
            case ECLParser.PERIOD:
            case ECLParser.SLASH:
            case ECLParser.ZERO:
            case ECLParser.ONE:
            case ECLParser.TWO:
            case ECLParser.THREE:
            case ECLParser.FOUR:
            case ECLParser.FIVE:
            case ECLParser.SIX:
            case ECLParser.SEVEN:
            case ECLParser.EIGHT:
            case ECLParser.NINE:
            case ECLParser.COLON:
            case ECLParser.SEMICOLON:
            case ECLParser.LESS_THAN:
            case ECLParser.EQUALS:
            case ECLParser.GREATER_THAN:
            case ECLParser.QUESTION:
            case ECLParser.AT:
            case ECLParser.CAP_A:
            case ECLParser.CAP_B:
            case ECLParser.CAP_C:
            case ECLParser.CAP_D:
            case ECLParser.CAP_E:
            case ECLParser.CAP_F:
            case ECLParser.CAP_G:
            case ECLParser.CAP_H:
            case ECLParser.CAP_I:
            case ECLParser.CAP_J:
            case ECLParser.CAP_K:
            case ECLParser.CAP_L:
            case ECLParser.CAP_M:
            case ECLParser.CAP_N:
            case ECLParser.CAP_O:
            case ECLParser.CAP_P:
            case ECLParser.CAP_Q:
            case ECLParser.CAP_R:
            case ECLParser.CAP_S:
            case ECLParser.CAP_T:
            case ECLParser.CAP_U:
            case ECLParser.CAP_V:
            case ECLParser.CAP_W:
            case ECLParser.CAP_X:
            case ECLParser.CAP_Y:
            case ECLParser.CAP_Z:
            case ECLParser.LEFT_BRACE:
            case ECLParser.BACKSLASH:
            case ECLParser.RIGHT_BRACE:
            case ECLParser.CARAT:
            case ECLParser.UNDERSCORE:
            case ECLParser.ACCENT:
            case ECLParser.A:
            case ECLParser.B:
            case ECLParser.C:
            case ECLParser.D:
            case ECLParser.E:
            case ECLParser.F:
            case ECLParser.G:
            case ECLParser.H:
            case ECLParser.I:
            case ECLParser.J:
            case ECLParser.K:
            case ECLParser.L:
            case ECLParser.M:
            case ECLParser.N:
            case ECLParser.O:
            case ECLParser.P:
            case ECLParser.Q:
            case ECLParser.R:
            case ECLParser.S:
            case ECLParser.T:
            case ECLParser.U:
            case ECLParser.V:
            case ECLParser.W:
            case ECLParser.X:
            case ECLParser.Y:
            case ECLParser.Z:
            case ECLParser.LEFT_CURLY_BRACE:
            case ECLParser.PIPE:
            case ECLParser.RIGHT_CURLY_BRACE:
            case ECLParser.TILDE:
              this.state = 2220;
              this.nonstarchar();
              break;
            case ECLParser.ASTERISK:
              this.state = 2221;
              this.starwithnonfslash();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        }
        this.state = 2226;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 304, this._ctx);
      }

      this.state = 2227;
      this.match(ECLParser.ASTERISK);
      this.state = 2228;
      this.match(ECLParser.SLASH);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  nonstarchar() {
    let localctx = new NonstarcharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ECLParser.RULE_nonstarchar);
    var _la = 0; // Token type
    try {
      this.state = 2237;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.SPACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2230;
          this.sp();
          break;
        case ECLParser.TAB:
          this.enterOuterAlt(localctx, 2);
          this.state = 2231;
          this.htab();
          break;
        case ECLParser.CR:
          this.enterOuterAlt(localctx, 3);
          this.state = 2232;
          this.cr();
          break;
        case ECLParser.LF:
          this.enterOuterAlt(localctx, 4);
          this.state = 2233;
          this.lf();
          break;
        case ECLParser.EXCLAMATION:
        case ECLParser.QUOTE:
        case ECLParser.HASH:
        case ECLParser.DOLLAR:
        case ECLParser.PERCENT:
        case ECLParser.AMPERSAND:
        case ECLParser.APOSTROPHE:
        case ECLParser.LEFT_PAREN:
        case ECLParser.RIGHT_PAREN:
          this.enterOuterAlt(localctx, 5);
          this.state = 2234;
          _la = this._input.LA(1);
          if (
            !(
              (_la & ~0x1f) == 0 &&
              ((1 << _la) &
                ((1 << ECLParser.EXCLAMATION) |
                  (1 << ECLParser.QUOTE) |
                  (1 << ECLParser.HASH) |
                  (1 << ECLParser.DOLLAR) |
                  (1 << ECLParser.PERCENT) |
                  (1 << ECLParser.AMPERSAND) |
                  (1 << ECLParser.APOSTROPHE) |
                  (1 << ECLParser.LEFT_PAREN) |
                  (1 << ECLParser.RIGHT_PAREN))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.PLUS:
        case ECLParser.COMMA:
        case ECLParser.DASH:
        case ECLParser.PERIOD:
        case ECLParser.SLASH:
        case ECLParser.ZERO:
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
        case ECLParser.COLON:
        case ECLParser.SEMICOLON:
        case ECLParser.LESS_THAN:
        case ECLParser.EQUALS:
        case ECLParser.GREATER_THAN:
        case ECLParser.QUESTION:
        case ECLParser.AT:
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.LEFT_BRACE:
        case ECLParser.BACKSLASH:
        case ECLParser.RIGHT_BRACE:
        case ECLParser.CARAT:
        case ECLParser.UNDERSCORE:
        case ECLParser.ACCENT:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
        case ECLParser.LEFT_CURLY_BRACE:
        case ECLParser.PIPE:
        case ECLParser.RIGHT_CURLY_BRACE:
        case ECLParser.TILDE:
          this.enterOuterAlt(localctx, 6);
          this.state = 2235;
          _la = this._input.LA(1);
          if (
            !(
              (((_la - 16) & ~0x1f) == 0 &&
                ((1 << (_la - 16)) &
                  ((1 << (ECLParser.PLUS - 16)) |
                    (1 << (ECLParser.COMMA - 16)) |
                    (1 << (ECLParser.DASH - 16)) |
                    (1 << (ECLParser.PERIOD - 16)) |
                    (1 << (ECLParser.SLASH - 16)) |
                    (1 << (ECLParser.ZERO - 16)) |
                    (1 << (ECLParser.ONE - 16)) |
                    (1 << (ECLParser.TWO - 16)) |
                    (1 << (ECLParser.THREE - 16)) |
                    (1 << (ECLParser.FOUR - 16)) |
                    (1 << (ECLParser.FIVE - 16)) |
                    (1 << (ECLParser.SIX - 16)) |
                    (1 << (ECLParser.SEVEN - 16)) |
                    (1 << (ECLParser.EIGHT - 16)) |
                    (1 << (ECLParser.NINE - 16)) |
                    (1 << (ECLParser.COLON - 16)) |
                    (1 << (ECLParser.SEMICOLON - 16)) |
                    (1 << (ECLParser.LESS_THAN - 16)) |
                    (1 << (ECLParser.EQUALS - 16)) |
                    (1 << (ECLParser.GREATER_THAN - 16)) |
                    (1 << (ECLParser.QUESTION - 16)) |
                    (1 << (ECLParser.AT - 16)) |
                    (1 << (ECLParser.CAP_A - 16)) |
                    (1 << (ECLParser.CAP_B - 16)) |
                    (1 << (ECLParser.CAP_C - 16)) |
                    (1 << (ECLParser.CAP_D - 16)) |
                    (1 << (ECLParser.CAP_E - 16)) |
                    (1 << (ECLParser.CAP_F - 16)) |
                    (1 << (ECLParser.CAP_G - 16)) |
                    (1 << (ECLParser.CAP_H - 16)) |
                    (1 << (ECLParser.CAP_I - 16)) |
                    (1 << (ECLParser.CAP_J - 16)))) !==
                  0) ||
              (((_la - 48) & ~0x1f) == 0 &&
                ((1 << (_la - 48)) &
                  ((1 << (ECLParser.CAP_K - 48)) |
                    (1 << (ECLParser.CAP_L - 48)) |
                    (1 << (ECLParser.CAP_M - 48)) |
                    (1 << (ECLParser.CAP_N - 48)) |
                    (1 << (ECLParser.CAP_O - 48)) |
                    (1 << (ECLParser.CAP_P - 48)) |
                    (1 << (ECLParser.CAP_Q - 48)) |
                    (1 << (ECLParser.CAP_R - 48)) |
                    (1 << (ECLParser.CAP_S - 48)) |
                    (1 << (ECLParser.CAP_T - 48)) |
                    (1 << (ECLParser.CAP_U - 48)) |
                    (1 << (ECLParser.CAP_V - 48)) |
                    (1 << (ECLParser.CAP_W - 48)) |
                    (1 << (ECLParser.CAP_X - 48)) |
                    (1 << (ECLParser.CAP_Y - 48)) |
                    (1 << (ECLParser.CAP_Z - 48)) |
                    (1 << (ECLParser.LEFT_BRACE - 48)) |
                    (1 << (ECLParser.BACKSLASH - 48)) |
                    (1 << (ECLParser.RIGHT_BRACE - 48)) |
                    (1 << (ECLParser.CARAT - 48)) |
                    (1 << (ECLParser.UNDERSCORE - 48)) |
                    (1 << (ECLParser.ACCENT - 48)) |
                    (1 << (ECLParser.A - 48)) |
                    (1 << (ECLParser.B - 48)) |
                    (1 << (ECLParser.C - 48)) |
                    (1 << (ECLParser.D - 48)) |
                    (1 << (ECLParser.E - 48)) |
                    (1 << (ECLParser.F - 48)) |
                    (1 << (ECLParser.G - 48)) |
                    (1 << (ECLParser.H - 48)) |
                    (1 << (ECLParser.I - 48)) |
                    (1 << (ECLParser.J - 48)))) !==
                  0) ||
              (((_la - 80) & ~0x1f) == 0 &&
                ((1 << (_la - 80)) &
                  ((1 << (ECLParser.K - 80)) |
                    (1 << (ECLParser.L - 80)) |
                    (1 << (ECLParser.M - 80)) |
                    (1 << (ECLParser.N - 80)) |
                    (1 << (ECLParser.O - 80)) |
                    (1 << (ECLParser.P - 80)) |
                    (1 << (ECLParser.Q - 80)) |
                    (1 << (ECLParser.R - 80)) |
                    (1 << (ECLParser.S - 80)) |
                    (1 << (ECLParser.T - 80)) |
                    (1 << (ECLParser.U - 80)) |
                    (1 << (ECLParser.V - 80)) |
                    (1 << (ECLParser.W - 80)) |
                    (1 << (ECLParser.X - 80)) |
                    (1 << (ECLParser.Y - 80)) |
                    (1 << (ECLParser.Z - 80)) |
                    (1 << (ECLParser.LEFT_CURLY_BRACE - 80)) |
                    (1 << (ECLParser.PIPE - 80)) |
                    (1 << (ECLParser.RIGHT_CURLY_BRACE - 80)) |
                    (1 << (ECLParser.TILDE - 80)))) !==
                  0)
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.UTF8_LETTER:
          this.enterOuterAlt(localctx, 7);
          this.state = 2236;
          this.match(ECLParser.UTF8_LETTER);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  starwithnonfslash() {
    let localctx = new StarwithnonfslashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ECLParser.RULE_starwithnonfslash);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2239;
      this.match(ECLParser.ASTERISK);
      this.state = 2240;
      this.nonfslash();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  nonfslash() {
    let localctx = new NonfslashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, ECLParser.RULE_nonfslash);
    var _la = 0; // Token type
    try {
      this.state = 2249;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.SPACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2242;
          this.sp();
          break;
        case ECLParser.TAB:
          this.enterOuterAlt(localctx, 2);
          this.state = 2243;
          this.htab();
          break;
        case ECLParser.CR:
          this.enterOuterAlt(localctx, 3);
          this.state = 2244;
          this.cr();
          break;
        case ECLParser.LF:
          this.enterOuterAlt(localctx, 4);
          this.state = 2245;
          this.lf();
          break;
        case ECLParser.EXCLAMATION:
        case ECLParser.QUOTE:
        case ECLParser.HASH:
        case ECLParser.DOLLAR:
        case ECLParser.PERCENT:
        case ECLParser.AMPERSAND:
        case ECLParser.APOSTROPHE:
        case ECLParser.LEFT_PAREN:
        case ECLParser.RIGHT_PAREN:
        case ECLParser.ASTERISK:
        case ECLParser.PLUS:
        case ECLParser.COMMA:
        case ECLParser.DASH:
        case ECLParser.PERIOD:
          this.enterOuterAlt(localctx, 5);
          this.state = 2246;
          _la = this._input.LA(1);
          if (
            !(
              (_la & ~0x1f) == 0 &&
              ((1 << _la) &
                ((1 << ECLParser.EXCLAMATION) |
                  (1 << ECLParser.QUOTE) |
                  (1 << ECLParser.HASH) |
                  (1 << ECLParser.DOLLAR) |
                  (1 << ECLParser.PERCENT) |
                  (1 << ECLParser.AMPERSAND) |
                  (1 << ECLParser.APOSTROPHE) |
                  (1 << ECLParser.LEFT_PAREN) |
                  (1 << ECLParser.RIGHT_PAREN) |
                  (1 << ECLParser.ASTERISK) |
                  (1 << ECLParser.PLUS) |
                  (1 << ECLParser.COMMA) |
                  (1 << ECLParser.DASH) |
                  (1 << ECLParser.PERIOD))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.ZERO:
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
        case ECLParser.COLON:
        case ECLParser.SEMICOLON:
        case ECLParser.LESS_THAN:
        case ECLParser.EQUALS:
        case ECLParser.GREATER_THAN:
        case ECLParser.QUESTION:
        case ECLParser.AT:
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.LEFT_BRACE:
        case ECLParser.BACKSLASH:
        case ECLParser.RIGHT_BRACE:
        case ECLParser.CARAT:
        case ECLParser.UNDERSCORE:
        case ECLParser.ACCENT:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
        case ECLParser.LEFT_CURLY_BRACE:
        case ECLParser.PIPE:
        case ECLParser.RIGHT_CURLY_BRACE:
        case ECLParser.TILDE:
          this.enterOuterAlt(localctx, 6);
          this.state = 2247;
          _la = this._input.LA(1);
          if (
            !(
              (((_la - 21) & ~0x1f) == 0 &&
                ((1 << (_la - 21)) &
                  ((1 << (ECLParser.ZERO - 21)) |
                    (1 << (ECLParser.ONE - 21)) |
                    (1 << (ECLParser.TWO - 21)) |
                    (1 << (ECLParser.THREE - 21)) |
                    (1 << (ECLParser.FOUR - 21)) |
                    (1 << (ECLParser.FIVE - 21)) |
                    (1 << (ECLParser.SIX - 21)) |
                    (1 << (ECLParser.SEVEN - 21)) |
                    (1 << (ECLParser.EIGHT - 21)) |
                    (1 << (ECLParser.NINE - 21)) |
                    (1 << (ECLParser.COLON - 21)) |
                    (1 << (ECLParser.SEMICOLON - 21)) |
                    (1 << (ECLParser.LESS_THAN - 21)) |
                    (1 << (ECLParser.EQUALS - 21)) |
                    (1 << (ECLParser.GREATER_THAN - 21)) |
                    (1 << (ECLParser.QUESTION - 21)) |
                    (1 << (ECLParser.AT - 21)) |
                    (1 << (ECLParser.CAP_A - 21)) |
                    (1 << (ECLParser.CAP_B - 21)) |
                    (1 << (ECLParser.CAP_C - 21)) |
                    (1 << (ECLParser.CAP_D - 21)) |
                    (1 << (ECLParser.CAP_E - 21)) |
                    (1 << (ECLParser.CAP_F - 21)) |
                    (1 << (ECLParser.CAP_G - 21)) |
                    (1 << (ECLParser.CAP_H - 21)) |
                    (1 << (ECLParser.CAP_I - 21)) |
                    (1 << (ECLParser.CAP_J - 21)) |
                    (1 << (ECLParser.CAP_K - 21)) |
                    (1 << (ECLParser.CAP_L - 21)) |
                    (1 << (ECLParser.CAP_M - 21)) |
                    (1 << (ECLParser.CAP_N - 21)) |
                    (1 << (ECLParser.CAP_O - 21)))) !==
                  0) ||
              (((_la - 53) & ~0x1f) == 0 &&
                ((1 << (_la - 53)) &
                  ((1 << (ECLParser.CAP_P - 53)) |
                    (1 << (ECLParser.CAP_Q - 53)) |
                    (1 << (ECLParser.CAP_R - 53)) |
                    (1 << (ECLParser.CAP_S - 53)) |
                    (1 << (ECLParser.CAP_T - 53)) |
                    (1 << (ECLParser.CAP_U - 53)) |
                    (1 << (ECLParser.CAP_V - 53)) |
                    (1 << (ECLParser.CAP_W - 53)) |
                    (1 << (ECLParser.CAP_X - 53)) |
                    (1 << (ECLParser.CAP_Y - 53)) |
                    (1 << (ECLParser.CAP_Z - 53)) |
                    (1 << (ECLParser.LEFT_BRACE - 53)) |
                    (1 << (ECLParser.BACKSLASH - 53)) |
                    (1 << (ECLParser.RIGHT_BRACE - 53)) |
                    (1 << (ECLParser.CARAT - 53)) |
                    (1 << (ECLParser.UNDERSCORE - 53)) |
                    (1 << (ECLParser.ACCENT - 53)) |
                    (1 << (ECLParser.A - 53)) |
                    (1 << (ECLParser.B - 53)) |
                    (1 << (ECLParser.C - 53)) |
                    (1 << (ECLParser.D - 53)) |
                    (1 << (ECLParser.E - 53)) |
                    (1 << (ECLParser.F - 53)) |
                    (1 << (ECLParser.G - 53)) |
                    (1 << (ECLParser.H - 53)) |
                    (1 << (ECLParser.I - 53)) |
                    (1 << (ECLParser.J - 53)) |
                    (1 << (ECLParser.K - 53)) |
                    (1 << (ECLParser.L - 53)) |
                    (1 << (ECLParser.M - 53)) |
                    (1 << (ECLParser.N - 53)) |
                    (1 << (ECLParser.O - 53)))) !==
                  0) ||
              (((_la - 85) & ~0x1f) == 0 &&
                ((1 << (_la - 85)) &
                  ((1 << (ECLParser.P - 85)) |
                    (1 << (ECLParser.Q - 85)) |
                    (1 << (ECLParser.R - 85)) |
                    (1 << (ECLParser.S - 85)) |
                    (1 << (ECLParser.T - 85)) |
                    (1 << (ECLParser.U - 85)) |
                    (1 << (ECLParser.V - 85)) |
                    (1 << (ECLParser.W - 85)) |
                    (1 << (ECLParser.X - 85)) |
                    (1 << (ECLParser.Y - 85)) |
                    (1 << (ECLParser.Z - 85)) |
                    (1 << (ECLParser.LEFT_CURLY_BRACE - 85)) |
                    (1 << (ECLParser.PIPE - 85)) |
                    (1 << (ECLParser.RIGHT_CURLY_BRACE - 85)) |
                    (1 << (ECLParser.TILDE - 85)))) !==
                  0)
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.UTF8_LETTER:
          this.enterOuterAlt(localctx, 7);
          this.state = 2248;
          this.match(ECLParser.UTF8_LETTER);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  sp() {
    let localctx = new SpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ECLParser.RULE_sp);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2251;
      this.match(ECLParser.SPACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  htab() {
    let localctx = new HtabContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ECLParser.RULE_htab);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2253;
      this.match(ECLParser.TAB);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  cr() {
    let localctx = new CrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, ECLParser.RULE_cr);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2255;
      this.match(ECLParser.CR);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  lf() {
    let localctx = new LfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, ECLParser.RULE_lf);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2257;
      this.match(ECLParser.LF);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  qm() {
    let localctx = new QmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, ECLParser.RULE_qm);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2259;
      this.match(ECLParser.QUOTE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  bs() {
    let localctx = new BsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, ECLParser.RULE_bs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2261;
      this.match(ECLParser.BACKSLASH);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  star() {
    let localctx = new StarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, ECLParser.RULE_star);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2263;
      this.match(ECLParser.ASTERISK);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  digit() {
    let localctx = new DigitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, ECLParser.RULE_digit);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2265;
      _la = this._input.LA(1);
      if (
        !(
          (_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.ZERO) |
              (1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  zero() {
    let localctx = new ZeroContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, ECLParser.RULE_zero);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2267;
      this.match(ECLParser.ZERO);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  digitnonzero() {
    let localctx = new DigitnonzeroContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, ECLParser.RULE_digitnonzero);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2269;
      _la = this._input.LA(1);
      if (
        !(
          (_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  nonwsnonpipe() {
    let localctx = new NonwsnonpipeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, ECLParser.RULE_nonwsnonpipe);
    var _la = 0; // Token type
    try {
      this.state = 2274;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.EXCLAMATION:
        case ECLParser.QUOTE:
        case ECLParser.HASH:
        case ECLParser.DOLLAR:
        case ECLParser.PERCENT:
        case ECLParser.AMPERSAND:
        case ECLParser.APOSTROPHE:
        case ECLParser.LEFT_PAREN:
        case ECLParser.RIGHT_PAREN:
        case ECLParser.ASTERISK:
        case ECLParser.PLUS:
        case ECLParser.COMMA:
        case ECLParser.DASH:
        case ECLParser.PERIOD:
        case ECLParser.SLASH:
        case ECLParser.ZERO:
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
        case ECLParser.COLON:
        case ECLParser.SEMICOLON:
        case ECLParser.LESS_THAN:
        case ECLParser.EQUALS:
        case ECLParser.GREATER_THAN:
        case ECLParser.QUESTION:
        case ECLParser.AT:
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.LEFT_BRACE:
        case ECLParser.BACKSLASH:
        case ECLParser.RIGHT_BRACE:
        case ECLParser.CARAT:
        case ECLParser.UNDERSCORE:
        case ECLParser.ACCENT:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
        case ECLParser.LEFT_CURLY_BRACE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2271;
          _la = this._input.LA(1);
          if (
            !(
              (((_la - 6) & ~0x1f) == 0 &&
                ((1 << (_la - 6)) &
                  ((1 << (ECLParser.EXCLAMATION - 6)) |
                    (1 << (ECLParser.QUOTE - 6)) |
                    (1 << (ECLParser.HASH - 6)) |
                    (1 << (ECLParser.DOLLAR - 6)) |
                    (1 << (ECLParser.PERCENT - 6)) |
                    (1 << (ECLParser.AMPERSAND - 6)) |
                    (1 << (ECLParser.APOSTROPHE - 6)) |
                    (1 << (ECLParser.LEFT_PAREN - 6)) |
                    (1 << (ECLParser.RIGHT_PAREN - 6)) |
                    (1 << (ECLParser.ASTERISK - 6)) |
                    (1 << (ECLParser.PLUS - 6)) |
                    (1 << (ECLParser.COMMA - 6)) |
                    (1 << (ECLParser.DASH - 6)) |
                    (1 << (ECLParser.PERIOD - 6)) |
                    (1 << (ECLParser.SLASH - 6)) |
                    (1 << (ECLParser.ZERO - 6)) |
                    (1 << (ECLParser.ONE - 6)) |
                    (1 << (ECLParser.TWO - 6)) |
                    (1 << (ECLParser.THREE - 6)) |
                    (1 << (ECLParser.FOUR - 6)) |
                    (1 << (ECLParser.FIVE - 6)) |
                    (1 << (ECLParser.SIX - 6)) |
                    (1 << (ECLParser.SEVEN - 6)) |
                    (1 << (ECLParser.EIGHT - 6)) |
                    (1 << (ECLParser.NINE - 6)) |
                    (1 << (ECLParser.COLON - 6)) |
                    (1 << (ECLParser.SEMICOLON - 6)) |
                    (1 << (ECLParser.LESS_THAN - 6)) |
                    (1 << (ECLParser.EQUALS - 6)) |
                    (1 << (ECLParser.GREATER_THAN - 6)) |
                    (1 << (ECLParser.QUESTION - 6)) |
                    (1 << (ECLParser.AT - 6)))) !==
                  0) ||
              (((_la - 38) & ~0x1f) == 0 &&
                ((1 << (_la - 38)) &
                  ((1 << (ECLParser.CAP_A - 38)) |
                    (1 << (ECLParser.CAP_B - 38)) |
                    (1 << (ECLParser.CAP_C - 38)) |
                    (1 << (ECLParser.CAP_D - 38)) |
                    (1 << (ECLParser.CAP_E - 38)) |
                    (1 << (ECLParser.CAP_F - 38)) |
                    (1 << (ECLParser.CAP_G - 38)) |
                    (1 << (ECLParser.CAP_H - 38)) |
                    (1 << (ECLParser.CAP_I - 38)) |
                    (1 << (ECLParser.CAP_J - 38)) |
                    (1 << (ECLParser.CAP_K - 38)) |
                    (1 << (ECLParser.CAP_L - 38)) |
                    (1 << (ECLParser.CAP_M - 38)) |
                    (1 << (ECLParser.CAP_N - 38)) |
                    (1 << (ECLParser.CAP_O - 38)) |
                    (1 << (ECLParser.CAP_P - 38)) |
                    (1 << (ECLParser.CAP_Q - 38)) |
                    (1 << (ECLParser.CAP_R - 38)) |
                    (1 << (ECLParser.CAP_S - 38)) |
                    (1 << (ECLParser.CAP_T - 38)) |
                    (1 << (ECLParser.CAP_U - 38)) |
                    (1 << (ECLParser.CAP_V - 38)) |
                    (1 << (ECLParser.CAP_W - 38)) |
                    (1 << (ECLParser.CAP_X - 38)) |
                    (1 << (ECLParser.CAP_Y - 38)) |
                    (1 << (ECLParser.CAP_Z - 38)) |
                    (1 << (ECLParser.LEFT_BRACE - 38)) |
                    (1 << (ECLParser.BACKSLASH - 38)) |
                    (1 << (ECLParser.RIGHT_BRACE - 38)) |
                    (1 << (ECLParser.CARAT - 38)) |
                    (1 << (ECLParser.UNDERSCORE - 38)) |
                    (1 << (ECLParser.ACCENT - 38)))) !==
                  0) ||
              (((_la - 70) & ~0x1f) == 0 &&
                ((1 << (_la - 70)) &
                  ((1 << (ECLParser.A - 70)) |
                    (1 << (ECLParser.B - 70)) |
                    (1 << (ECLParser.C - 70)) |
                    (1 << (ECLParser.D - 70)) |
                    (1 << (ECLParser.E - 70)) |
                    (1 << (ECLParser.F - 70)) |
                    (1 << (ECLParser.G - 70)) |
                    (1 << (ECLParser.H - 70)) |
                    (1 << (ECLParser.I - 70)) |
                    (1 << (ECLParser.J - 70)) |
                    (1 << (ECLParser.K - 70)) |
                    (1 << (ECLParser.L - 70)) |
                    (1 << (ECLParser.M - 70)) |
                    (1 << (ECLParser.N - 70)) |
                    (1 << (ECLParser.O - 70)) |
                    (1 << (ECLParser.P - 70)) |
                    (1 << (ECLParser.Q - 70)) |
                    (1 << (ECLParser.R - 70)) |
                    (1 << (ECLParser.S - 70)) |
                    (1 << (ECLParser.T - 70)) |
                    (1 << (ECLParser.U - 70)) |
                    (1 << (ECLParser.V - 70)) |
                    (1 << (ECLParser.W - 70)) |
                    (1 << (ECLParser.X - 70)) |
                    (1 << (ECLParser.Y - 70)) |
                    (1 << (ECLParser.Z - 70)) |
                    (1 << (ECLParser.LEFT_CURLY_BRACE - 70)))) !==
                  0)
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.RIGHT_CURLY_BRACE:
        case ECLParser.TILDE:
          this.enterOuterAlt(localctx, 2);
          this.state = 2272;
          _la = this._input.LA(1);
          if (
            !(_la === ECLParser.RIGHT_CURLY_BRACE || _la === ECLParser.TILDE)
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.UTF8_LETTER:
          this.enterOuterAlt(localctx, 3);
          this.state = 2273;
          this.match(ECLParser.UTF8_LETTER);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  anynonescapedchar() {
    let localctx = new AnynonescapedcharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, ECLParser.RULE_anynonescapedchar);
    var _la = 0; // Token type
    try {
      this.state = 2284;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 308, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2276;
          this.sp();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2277;
          this.htab();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2278;
          this.cr();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2279;
          this.lf();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2280;
          _la = this._input.LA(1);
          if (!(_la === ECLParser.SPACE || _la === ECLParser.EXCLAMATION)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2281;
          _la = this._input.LA(1);
          if (
            !(
              (((_la - 8) & ~0x1f) == 0 &&
                ((1 << (_la - 8)) &
                  ((1 << (ECLParser.HASH - 8)) |
                    (1 << (ECLParser.DOLLAR - 8)) |
                    (1 << (ECLParser.PERCENT - 8)) |
                    (1 << (ECLParser.AMPERSAND - 8)) |
                    (1 << (ECLParser.APOSTROPHE - 8)) |
                    (1 << (ECLParser.LEFT_PAREN - 8)) |
                    (1 << (ECLParser.RIGHT_PAREN - 8)) |
                    (1 << (ECLParser.ASTERISK - 8)) |
                    (1 << (ECLParser.PLUS - 8)) |
                    (1 << (ECLParser.COMMA - 8)) |
                    (1 << (ECLParser.DASH - 8)) |
                    (1 << (ECLParser.PERIOD - 8)) |
                    (1 << (ECLParser.SLASH - 8)) |
                    (1 << (ECLParser.ZERO - 8)) |
                    (1 << (ECLParser.ONE - 8)) |
                    (1 << (ECLParser.TWO - 8)) |
                    (1 << (ECLParser.THREE - 8)) |
                    (1 << (ECLParser.FOUR - 8)) |
                    (1 << (ECLParser.FIVE - 8)) |
                    (1 << (ECLParser.SIX - 8)) |
                    (1 << (ECLParser.SEVEN - 8)) |
                    (1 << (ECLParser.EIGHT - 8)) |
                    (1 << (ECLParser.NINE - 8)) |
                    (1 << (ECLParser.COLON - 8)) |
                    (1 << (ECLParser.SEMICOLON - 8)) |
                    (1 << (ECLParser.LESS_THAN - 8)) |
                    (1 << (ECLParser.EQUALS - 8)) |
                    (1 << (ECLParser.GREATER_THAN - 8)) |
                    (1 << (ECLParser.QUESTION - 8)) |
                    (1 << (ECLParser.AT - 8)) |
                    (1 << (ECLParser.CAP_A - 8)) |
                    (1 << (ECLParser.CAP_B - 8)))) !==
                  0) ||
              (((_la - 40) & ~0x1f) == 0 &&
                ((1 << (_la - 40)) &
                  ((1 << (ECLParser.CAP_C - 40)) |
                    (1 << (ECLParser.CAP_D - 40)) |
                    (1 << (ECLParser.CAP_E - 40)) |
                    (1 << (ECLParser.CAP_F - 40)) |
                    (1 << (ECLParser.CAP_G - 40)) |
                    (1 << (ECLParser.CAP_H - 40)) |
                    (1 << (ECLParser.CAP_I - 40)) |
                    (1 << (ECLParser.CAP_J - 40)) |
                    (1 << (ECLParser.CAP_K - 40)) |
                    (1 << (ECLParser.CAP_L - 40)) |
                    (1 << (ECLParser.CAP_M - 40)) |
                    (1 << (ECLParser.CAP_N - 40)) |
                    (1 << (ECLParser.CAP_O - 40)) |
                    (1 << (ECLParser.CAP_P - 40)) |
                    (1 << (ECLParser.CAP_Q - 40)) |
                    (1 << (ECLParser.CAP_R - 40)) |
                    (1 << (ECLParser.CAP_S - 40)) |
                    (1 << (ECLParser.CAP_T - 40)) |
                    (1 << (ECLParser.CAP_U - 40)) |
                    (1 << (ECLParser.CAP_V - 40)) |
                    (1 << (ECLParser.CAP_W - 40)) |
                    (1 << (ECLParser.CAP_X - 40)) |
                    (1 << (ECLParser.CAP_Y - 40)) |
                    (1 << (ECLParser.CAP_Z - 40)) |
                    (1 << (ECLParser.LEFT_BRACE - 40)))) !==
                  0)
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2282;
          _la = this._input.LA(1);
          if (
            !(
              (((_la - 66) & ~0x1f) == 0 &&
                ((1 << (_la - 66)) &
                  ((1 << (ECLParser.RIGHT_BRACE - 66)) |
                    (1 << (ECLParser.CARAT - 66)) |
                    (1 << (ECLParser.UNDERSCORE - 66)) |
                    (1 << (ECLParser.ACCENT - 66)) |
                    (1 << (ECLParser.A - 66)) |
                    (1 << (ECLParser.B - 66)) |
                    (1 << (ECLParser.C - 66)) |
                    (1 << (ECLParser.D - 66)) |
                    (1 << (ECLParser.E - 66)) |
                    (1 << (ECLParser.F - 66)) |
                    (1 << (ECLParser.G - 66)) |
                    (1 << (ECLParser.H - 66)) |
                    (1 << (ECLParser.I - 66)) |
                    (1 << (ECLParser.J - 66)) |
                    (1 << (ECLParser.K - 66)) |
                    (1 << (ECLParser.L - 66)) |
                    (1 << (ECLParser.M - 66)) |
                    (1 << (ECLParser.N - 66)) |
                    (1 << (ECLParser.O - 66)) |
                    (1 << (ECLParser.P - 66)) |
                    (1 << (ECLParser.Q - 66)) |
                    (1 << (ECLParser.R - 66)) |
                    (1 << (ECLParser.S - 66)) |
                    (1 << (ECLParser.T - 66)) |
                    (1 << (ECLParser.U - 66)) |
                    (1 << (ECLParser.V - 66)) |
                    (1 << (ECLParser.W - 66)) |
                    (1 << (ECLParser.X - 66)) |
                    (1 << (ECLParser.Y - 66)) |
                    (1 << (ECLParser.Z - 66)) |
                    (1 << (ECLParser.LEFT_CURLY_BRACE - 66)) |
                    (1 << (ECLParser.PIPE - 66)))) !==
                  0) ||
              _la === ECLParser.RIGHT_CURLY_BRACE ||
              _la === ECLParser.TILDE
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2283;
          this.match(ECLParser.UTF8_LETTER);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  escapedchar() {
    let localctx = new EscapedcharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, ECLParser.RULE_escapedchar);
    try {
      this.state = 2292;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 309, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2286;
          this.bs();
          this.state = 2287;
          this.qm();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2289;
          this.bs();
          this.state = 2290;
          this.bs();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  escapedwildchar() {
    let localctx = new EscapedwildcharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, ECLParser.RULE_escapedwildchar);
    try {
      this.state = 2303;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 310, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2294;
          this.bs();
          this.state = 2295;
          this.qm();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2297;
          this.bs();
          this.state = 2298;
          this.bs();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2300;
          this.bs();
          this.state = 2301;
          this.star();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  nonwsnonescapedchar() {
    let localctx = new NonwsnonescapedcharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, ECLParser.RULE_nonwsnonescapedchar);
    var _la = 0; // Token type
    try {
      this.state = 2309;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.EXCLAMATION:
          this.enterOuterAlt(localctx, 1);
          this.state = 2305;
          this.match(ECLParser.EXCLAMATION);
          break;
        case ECLParser.HASH:
        case ECLParser.DOLLAR:
        case ECLParser.PERCENT:
        case ECLParser.AMPERSAND:
        case ECLParser.APOSTROPHE:
        case ECLParser.LEFT_PAREN:
        case ECLParser.RIGHT_PAREN:
        case ECLParser.ASTERISK:
        case ECLParser.PLUS:
        case ECLParser.COMMA:
        case ECLParser.DASH:
        case ECLParser.PERIOD:
        case ECLParser.SLASH:
        case ECLParser.ZERO:
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
        case ECLParser.COLON:
        case ECLParser.SEMICOLON:
        case ECLParser.LESS_THAN:
        case ECLParser.EQUALS:
        case ECLParser.GREATER_THAN:
        case ECLParser.QUESTION:
        case ECLParser.AT:
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.LEFT_BRACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 2306;
          _la = this._input.LA(1);
          if (
            !(
              (((_la - 8) & ~0x1f) == 0 &&
                ((1 << (_la - 8)) &
                  ((1 << (ECLParser.HASH - 8)) |
                    (1 << (ECLParser.DOLLAR - 8)) |
                    (1 << (ECLParser.PERCENT - 8)) |
                    (1 << (ECLParser.AMPERSAND - 8)) |
                    (1 << (ECLParser.APOSTROPHE - 8)) |
                    (1 << (ECLParser.LEFT_PAREN - 8)) |
                    (1 << (ECLParser.RIGHT_PAREN - 8)) |
                    (1 << (ECLParser.ASTERISK - 8)) |
                    (1 << (ECLParser.PLUS - 8)) |
                    (1 << (ECLParser.COMMA - 8)) |
                    (1 << (ECLParser.DASH - 8)) |
                    (1 << (ECLParser.PERIOD - 8)) |
                    (1 << (ECLParser.SLASH - 8)) |
                    (1 << (ECLParser.ZERO - 8)) |
                    (1 << (ECLParser.ONE - 8)) |
                    (1 << (ECLParser.TWO - 8)) |
                    (1 << (ECLParser.THREE - 8)) |
                    (1 << (ECLParser.FOUR - 8)) |
                    (1 << (ECLParser.FIVE - 8)) |
                    (1 << (ECLParser.SIX - 8)) |
                    (1 << (ECLParser.SEVEN - 8)) |
                    (1 << (ECLParser.EIGHT - 8)) |
                    (1 << (ECLParser.NINE - 8)) |
                    (1 << (ECLParser.COLON - 8)) |
                    (1 << (ECLParser.SEMICOLON - 8)) |
                    (1 << (ECLParser.LESS_THAN - 8)) |
                    (1 << (ECLParser.EQUALS - 8)) |
                    (1 << (ECLParser.GREATER_THAN - 8)) |
                    (1 << (ECLParser.QUESTION - 8)) |
                    (1 << (ECLParser.AT - 8)) |
                    (1 << (ECLParser.CAP_A - 8)) |
                    (1 << (ECLParser.CAP_B - 8)))) !==
                  0) ||
              (((_la - 40) & ~0x1f) == 0 &&
                ((1 << (_la - 40)) &
                  ((1 << (ECLParser.CAP_C - 40)) |
                    (1 << (ECLParser.CAP_D - 40)) |
                    (1 << (ECLParser.CAP_E - 40)) |
                    (1 << (ECLParser.CAP_F - 40)) |
                    (1 << (ECLParser.CAP_G - 40)) |
                    (1 << (ECLParser.CAP_H - 40)) |
                    (1 << (ECLParser.CAP_I - 40)) |
                    (1 << (ECLParser.CAP_J - 40)) |
                    (1 << (ECLParser.CAP_K - 40)) |
                    (1 << (ECLParser.CAP_L - 40)) |
                    (1 << (ECLParser.CAP_M - 40)) |
                    (1 << (ECLParser.CAP_N - 40)) |
                    (1 << (ECLParser.CAP_O - 40)) |
                    (1 << (ECLParser.CAP_P - 40)) |
                    (1 << (ECLParser.CAP_Q - 40)) |
                    (1 << (ECLParser.CAP_R - 40)) |
                    (1 << (ECLParser.CAP_S - 40)) |
                    (1 << (ECLParser.CAP_T - 40)) |
                    (1 << (ECLParser.CAP_U - 40)) |
                    (1 << (ECLParser.CAP_V - 40)) |
                    (1 << (ECLParser.CAP_W - 40)) |
                    (1 << (ECLParser.CAP_X - 40)) |
                    (1 << (ECLParser.CAP_Y - 40)) |
                    (1 << (ECLParser.CAP_Z - 40)) |
                    (1 << (ECLParser.LEFT_BRACE - 40)))) !==
                  0)
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.RIGHT_BRACE:
        case ECLParser.CARAT:
        case ECLParser.UNDERSCORE:
        case ECLParser.ACCENT:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
        case ECLParser.LEFT_CURLY_BRACE:
        case ECLParser.PIPE:
        case ECLParser.RIGHT_CURLY_BRACE:
        case ECLParser.TILDE:
          this.enterOuterAlt(localctx, 3);
          this.state = 2307;
          _la = this._input.LA(1);
          if (
            !(
              (((_la - 66) & ~0x1f) == 0 &&
                ((1 << (_la - 66)) &
                  ((1 << (ECLParser.RIGHT_BRACE - 66)) |
                    (1 << (ECLParser.CARAT - 66)) |
                    (1 << (ECLParser.UNDERSCORE - 66)) |
                    (1 << (ECLParser.ACCENT - 66)) |
                    (1 << (ECLParser.A - 66)) |
                    (1 << (ECLParser.B - 66)) |
                    (1 << (ECLParser.C - 66)) |
                    (1 << (ECLParser.D - 66)) |
                    (1 << (ECLParser.E - 66)) |
                    (1 << (ECLParser.F - 66)) |
                    (1 << (ECLParser.G - 66)) |
                    (1 << (ECLParser.H - 66)) |
                    (1 << (ECLParser.I - 66)) |
                    (1 << (ECLParser.J - 66)) |
                    (1 << (ECLParser.K - 66)) |
                    (1 << (ECLParser.L - 66)) |
                    (1 << (ECLParser.M - 66)) |
                    (1 << (ECLParser.N - 66)) |
                    (1 << (ECLParser.O - 66)) |
                    (1 << (ECLParser.P - 66)) |
                    (1 << (ECLParser.Q - 66)) |
                    (1 << (ECLParser.R - 66)) |
                    (1 << (ECLParser.S - 66)) |
                    (1 << (ECLParser.T - 66)) |
                    (1 << (ECLParser.U - 66)) |
                    (1 << (ECLParser.V - 66)) |
                    (1 << (ECLParser.W - 66)) |
                    (1 << (ECLParser.X - 66)) |
                    (1 << (ECLParser.Y - 66)) |
                    (1 << (ECLParser.Z - 66)) |
                    (1 << (ECLParser.LEFT_CURLY_BRACE - 66)) |
                    (1 << (ECLParser.PIPE - 66)))) !==
                  0) ||
              _la === ECLParser.RIGHT_CURLY_BRACE ||
              _la === ECLParser.TILDE
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.UTF8_LETTER:
          this.enterOuterAlt(localctx, 4);
          this.state = 2308;
          this.match(ECLParser.UTF8_LETTER);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alpha() {
    let localctx = new AlphaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, ECLParser.RULE_alpha);
    var _la = 0; // Token type
    try {
      this.state = 2313;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
          this.enterOuterAlt(localctx, 1);
          this.state = 2311;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 38) & ~0x1f) == 0 &&
              ((1 << (_la - 38)) &
                ((1 << (ECLParser.CAP_A - 38)) |
                  (1 << (ECLParser.CAP_B - 38)) |
                  (1 << (ECLParser.CAP_C - 38)) |
                  (1 << (ECLParser.CAP_D - 38)) |
                  (1 << (ECLParser.CAP_E - 38)) |
                  (1 << (ECLParser.CAP_F - 38)) |
                  (1 << (ECLParser.CAP_G - 38)) |
                  (1 << (ECLParser.CAP_H - 38)) |
                  (1 << (ECLParser.CAP_I - 38)) |
                  (1 << (ECLParser.CAP_J - 38)) |
                  (1 << (ECLParser.CAP_K - 38)) |
                  (1 << (ECLParser.CAP_L - 38)) |
                  (1 << (ECLParser.CAP_M - 38)) |
                  (1 << (ECLParser.CAP_N - 38)) |
                  (1 << (ECLParser.CAP_O - 38)) |
                  (1 << (ECLParser.CAP_P - 38)) |
                  (1 << (ECLParser.CAP_Q - 38)) |
                  (1 << (ECLParser.CAP_R - 38)) |
                  (1 << (ECLParser.CAP_S - 38)) |
                  (1 << (ECLParser.CAP_T - 38)) |
                  (1 << (ECLParser.CAP_U - 38)) |
                  (1 << (ECLParser.CAP_V - 38)) |
                  (1 << (ECLParser.CAP_W - 38)) |
                  (1 << (ECLParser.CAP_X - 38)) |
                  (1 << (ECLParser.CAP_Y - 38)) |
                  (1 << (ECLParser.CAP_Z - 38)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
          this.enterOuterAlt(localctx, 2);
          this.state = 2312;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 70) & ~0x1f) == 0 &&
              ((1 << (_la - 70)) &
                ((1 << (ECLParser.A - 70)) |
                  (1 << (ECLParser.B - 70)) |
                  (1 << (ECLParser.C - 70)) |
                  (1 << (ECLParser.D - 70)) |
                  (1 << (ECLParser.E - 70)) |
                  (1 << (ECLParser.F - 70)) |
                  (1 << (ECLParser.G - 70)) |
                  (1 << (ECLParser.H - 70)) |
                  (1 << (ECLParser.I - 70)) |
                  (1 << (ECLParser.J - 70)) |
                  (1 << (ECLParser.K - 70)) |
                  (1 << (ECLParser.L - 70)) |
                  (1 << (ECLParser.M - 70)) |
                  (1 << (ECLParser.N - 70)) |
                  (1 << (ECLParser.O - 70)) |
                  (1 << (ECLParser.P - 70)) |
                  (1 << (ECLParser.Q - 70)) |
                  (1 << (ECLParser.R - 70)) |
                  (1 << (ECLParser.S - 70)) |
                  (1 << (ECLParser.T - 70)) |
                  (1 << (ECLParser.U - 70)) |
                  (1 << (ECLParser.V - 70)) |
                  (1 << (ECLParser.W - 70)) |
                  (1 << (ECLParser.X - 70)) |
                  (1 << (ECLParser.Y - 70)) |
                  (1 << (ECLParser.Z - 70)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dash() {
    let localctx = new DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, ECLParser.RULE_dash);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2315;
      this.match(ECLParser.DASH);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
}

ECLParser.EOF = antlr4.Token.EOF;
ECLParser.UTF8_LETTER = 1;
ECLParser.TAB = 2;
ECLParser.LF = 3;
ECLParser.CR = 4;
ECLParser.SPACE = 5;
ECLParser.EXCLAMATION = 6;
ECLParser.QUOTE = 7;
ECLParser.HASH = 8;
ECLParser.DOLLAR = 9;
ECLParser.PERCENT = 10;
ECLParser.AMPERSAND = 11;
ECLParser.APOSTROPHE = 12;
ECLParser.LEFT_PAREN = 13;
ECLParser.RIGHT_PAREN = 14;
ECLParser.ASTERISK = 15;
ECLParser.PLUS = 16;
ECLParser.COMMA = 17;
ECLParser.DASH = 18;
ECLParser.PERIOD = 19;
ECLParser.SLASH = 20;
ECLParser.ZERO = 21;
ECLParser.ONE = 22;
ECLParser.TWO = 23;
ECLParser.THREE = 24;
ECLParser.FOUR = 25;
ECLParser.FIVE = 26;
ECLParser.SIX = 27;
ECLParser.SEVEN = 28;
ECLParser.EIGHT = 29;
ECLParser.NINE = 30;
ECLParser.COLON = 31;
ECLParser.SEMICOLON = 32;
ECLParser.LESS_THAN = 33;
ECLParser.EQUALS = 34;
ECLParser.GREATER_THAN = 35;
ECLParser.QUESTION = 36;
ECLParser.AT = 37;
ECLParser.CAP_A = 38;
ECLParser.CAP_B = 39;
ECLParser.CAP_C = 40;
ECLParser.CAP_D = 41;
ECLParser.CAP_E = 42;
ECLParser.CAP_F = 43;
ECLParser.CAP_G = 44;
ECLParser.CAP_H = 45;
ECLParser.CAP_I = 46;
ECLParser.CAP_J = 47;
ECLParser.CAP_K = 48;
ECLParser.CAP_L = 49;
ECLParser.CAP_M = 50;
ECLParser.CAP_N = 51;
ECLParser.CAP_O = 52;
ECLParser.CAP_P = 53;
ECLParser.CAP_Q = 54;
ECLParser.CAP_R = 55;
ECLParser.CAP_S = 56;
ECLParser.CAP_T = 57;
ECLParser.CAP_U = 58;
ECLParser.CAP_V = 59;
ECLParser.CAP_W = 60;
ECLParser.CAP_X = 61;
ECLParser.CAP_Y = 62;
ECLParser.CAP_Z = 63;
ECLParser.LEFT_BRACE = 64;
ECLParser.BACKSLASH = 65;
ECLParser.RIGHT_BRACE = 66;
ECLParser.CARAT = 67;
ECLParser.UNDERSCORE = 68;
ECLParser.ACCENT = 69;
ECLParser.A = 70;
ECLParser.B = 71;
ECLParser.C = 72;
ECLParser.D = 73;
ECLParser.E = 74;
ECLParser.F = 75;
ECLParser.G = 76;
ECLParser.H = 77;
ECLParser.I = 78;
ECLParser.J = 79;
ECLParser.K = 80;
ECLParser.L = 81;
ECLParser.M = 82;
ECLParser.N = 83;
ECLParser.O = 84;
ECLParser.P = 85;
ECLParser.Q = 86;
ECLParser.R = 87;
ECLParser.S = 88;
ECLParser.T = 89;
ECLParser.U = 90;
ECLParser.V = 91;
ECLParser.W = 92;
ECLParser.X = 93;
ECLParser.Y = 94;
ECLParser.Z = 95;
ECLParser.LEFT_CURLY_BRACE = 96;
ECLParser.PIPE = 97;
ECLParser.RIGHT_CURLY_BRACE = 98;
ECLParser.TILDE = 99;

ECLParser.RULE_expressionconstraint = 0;
ECLParser.RULE_refinedexpressionconstraint = 1;
ECLParser.RULE_compoundexpressionconstraint = 2;
ECLParser.RULE_conjunctionexpressionconstraint = 3;
ECLParser.RULE_disjunctionexpressionconstraint = 4;
ECLParser.RULE_exclusionexpressionconstraint = 5;
ECLParser.RULE_dottedexpressionconstraint = 6;
ECLParser.RULE_dottedexpressionattribute = 7;
ECLParser.RULE_subexpressionconstraint = 8;
ECLParser.RULE_eclfocusconcept = 9;
ECLParser.RULE_dot = 10;
ECLParser.RULE_memberof = 11;
ECLParser.RULE_refsetfieldset = 12;
ECLParser.RULE_refsetfield = 13;
ECLParser.RULE_refsetfieldname = 14;
ECLParser.RULE_refsetfieldref = 15;
ECLParser.RULE_eclconceptreference = 16;
ECLParser.RULE_eclconceptreferenceset = 17;
ECLParser.RULE_conceptid = 18;
ECLParser.RULE_term = 19;
ECLParser.RULE_wildcard = 20;
ECLParser.RULE_constraintoperator = 21;
ECLParser.RULE_descendantof = 22;
ECLParser.RULE_descendantorselfof = 23;
ECLParser.RULE_childof = 24;
ECLParser.RULE_childorselfof = 25;
ECLParser.RULE_ancestorof = 26;
ECLParser.RULE_ancestororselfof = 27;
ECLParser.RULE_parentof = 28;
ECLParser.RULE_parentorselfof = 29;
ECLParser.RULE_conjunction = 30;
ECLParser.RULE_disjunction = 31;
ECLParser.RULE_exclusion = 32;
ECLParser.RULE_eclrefinement = 33;
ECLParser.RULE_conjunctionrefinementset = 34;
ECLParser.RULE_disjunctionrefinementset = 35;
ECLParser.RULE_subrefinement = 36;
ECLParser.RULE_eclattributeset = 37;
ECLParser.RULE_conjunctionattributeset = 38;
ECLParser.RULE_disjunctionattributeset = 39;
ECLParser.RULE_subattributeset = 40;
ECLParser.RULE_eclattributegroup = 41;
ECLParser.RULE_eclattribute = 42;
ECLParser.RULE_cardinality = 43;
ECLParser.RULE_minvalue = 44;
ECLParser.RULE_to = 45;
ECLParser.RULE_maxvalue = 46;
ECLParser.RULE_many = 47;
ECLParser.RULE_reverseflag = 48;
ECLParser.RULE_eclattributename = 49;
ECLParser.RULE_expressioncomparisonoperator = 50;
ECLParser.RULE_numericcomparisonoperator = 51;
ECLParser.RULE_timecomparisonoperator = 52;
ECLParser.RULE_stringcomparisonoperator = 53;
ECLParser.RULE_booleancomparisonoperator = 54;
ECLParser.RULE_descriptionfilterconstraint = 55;
ECLParser.RULE_descriptionfilter = 56;
ECLParser.RULE_termfilter = 57;
ECLParser.RULE_termkeyword = 58;
ECLParser.RULE_typedsearchterm = 59;
ECLParser.RULE_typedsearchtermset = 60;
ECLParser.RULE_wild = 61;
ECLParser.RULE_matchkeyword = 62;
ECLParser.RULE_matchsearchterm = 63;
ECLParser.RULE_matchsearchtermset = 64;
ECLParser.RULE_wildsearchterm = 65;
ECLParser.RULE_wildsearchtermset = 66;
ECLParser.RULE_languagefilter = 67;
ECLParser.RULE_language = 68;
ECLParser.RULE_languagecode = 69;
ECLParser.RULE_languagecodeset = 70;
ECLParser.RULE_typefilter = 71;
ECLParser.RULE_typeidfilter = 72;
ECLParser.RULE_typeid = 73;
ECLParser.RULE_typetokenfilter = 74;
ECLParser.RULE_type = 75;
ECLParser.RULE_typetoken = 76;
ECLParser.RULE_typetokenset = 77;
ECLParser.RULE_synonym = 78;
ECLParser.RULE_fullyspecifiedname = 79;
ECLParser.RULE_definition = 80;
ECLParser.RULE_dialectfilter = 81;
ECLParser.RULE_dialectidfilter = 82;
ECLParser.RULE_dialectid = 83;
ECLParser.RULE_dialectaliasfilter = 84;
ECLParser.RULE_dialect = 85;
ECLParser.RULE_dialectalias = 86;
ECLParser.RULE_dialectaliasset = 87;
ECLParser.RULE_dialectidset = 88;
ECLParser.RULE_acceptabilityset = 89;
ECLParser.RULE_acceptabilityconceptreferenceset = 90;
ECLParser.RULE_acceptabilitytokenset = 91;
ECLParser.RULE_acceptabilitytoken = 92;
ECLParser.RULE_acceptable = 93;
ECLParser.RULE_preferred = 94;
ECLParser.RULE_conceptfilterconstraint = 95;
ECLParser.RULE_conceptfilter = 96;
ECLParser.RULE_definitionstatusfilter = 97;
ECLParser.RULE_definitionstatusidfilter = 98;
ECLParser.RULE_definitionstatusidkeyword = 99;
ECLParser.RULE_definitionstatustokenfilter = 100;
ECLParser.RULE_definitionstatuskeyword = 101;
ECLParser.RULE_definitionstatustoken = 102;
ECLParser.RULE_definitionstatustokenset = 103;
ECLParser.RULE_primitivetoken = 104;
ECLParser.RULE_definedtoken = 105;
ECLParser.RULE_modulefilter = 106;
ECLParser.RULE_moduleidkeyword = 107;
ECLParser.RULE_effectivetimefilter = 108;
ECLParser.RULE_effectivetimekeyword = 109;
ECLParser.RULE_timevalue = 110;
ECLParser.RULE_timevalueset = 111;
ECLParser.RULE_year = 112;
ECLParser.RULE_month = 113;
ECLParser.RULE_day = 114;
ECLParser.RULE_activefilter = 115;
ECLParser.RULE_activekeyword = 116;
ECLParser.RULE_activevalue = 117;
ECLParser.RULE_activetruevalue = 118;
ECLParser.RULE_activefalsevalue = 119;
ECLParser.RULE_memberfilterconstraint = 120;
ECLParser.RULE_memberfilter = 121;
ECLParser.RULE_memberfieldfilter = 122;
ECLParser.RULE_historysupplement = 123;
ECLParser.RULE_historykeyword = 124;
ECLParser.RULE_historyprofilesuffix = 125;
ECLParser.RULE_historyminimumsuffix = 126;
ECLParser.RULE_historymoderatesuffix = 127;
ECLParser.RULE_historymaximumsuffix = 128;
ECLParser.RULE_historysubset = 129;
ECLParser.RULE_numericvalue = 130;
ECLParser.RULE_stringvalue = 131;
ECLParser.RULE_integervalue = 132;
ECLParser.RULE_decimalvalue = 133;
ECLParser.RULE_booleanvalue = 134;
ECLParser.RULE_true_1 = 135;
ECLParser.RULE_false_1 = 136;
ECLParser.RULE_nonnegativeintegervalue = 137;
ECLParser.RULE_sctid = 138;
ECLParser.RULE_ws = 139;
ECLParser.RULE_mws = 140;
ECLParser.RULE_comment = 141;
ECLParser.RULE_nonstarchar = 142;
ECLParser.RULE_starwithnonfslash = 143;
ECLParser.RULE_nonfslash = 144;
ECLParser.RULE_sp = 145;
ECLParser.RULE_htab = 146;
ECLParser.RULE_cr = 147;
ECLParser.RULE_lf = 148;
ECLParser.RULE_qm = 149;
ECLParser.RULE_bs = 150;
ECLParser.RULE_star = 151;
ECLParser.RULE_digit = 152;
ECLParser.RULE_zero = 153;
ECLParser.RULE_digitnonzero = 154;
ECLParser.RULE_nonwsnonpipe = 155;
ECLParser.RULE_anynonescapedchar = 156;
ECLParser.RULE_escapedchar = 157;
ECLParser.RULE_escapedwildchar = 158;
ECLParser.RULE_nonwsnonescapedchar = 159;
ECLParser.RULE_alpha = 160;
ECLParser.RULE_dash = 161;

class ExpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_expressionconstraint;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  refinedexpressionconstraint() {
    return this.getTypedRuleContext(RefinedexpressionconstraintContext, 0);
  }

  compoundexpressionconstraint() {
    return this.getTypedRuleContext(CompoundexpressionconstraintContext, 0);
  }

  dottedexpressionconstraint() {
    return this.getTypedRuleContext(DottedexpressionconstraintContext, 0);
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterExpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitExpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitExpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RefinedexpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_refinedexpressionconstraint;
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  COLON() {
    return this.getToken(ECLParser.COLON, 0);
  }

  eclrefinement() {
    return this.getTypedRuleContext(EclrefinementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterRefinedexpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitRefinedexpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitRefinedexpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CompoundexpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_compoundexpressionconstraint;
  }

  conjunctionexpressionconstraint() {
    return this.getTypedRuleContext(ConjunctionexpressionconstraintContext, 0);
  }

  disjunctionexpressionconstraint() {
    return this.getTypedRuleContext(DisjunctionexpressionconstraintContext, 0);
  }

  exclusionexpressionconstraint() {
    return this.getTypedRuleContext(ExclusionexpressionconstraintContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterCompoundexpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitCompoundexpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitCompoundexpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConjunctionexpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_conjunctionexpressionconstraint;
  }

  subexpressionconstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SubexpressionconstraintContext);
    } else {
      return this.getTypedRuleContext(SubexpressionconstraintContext, i);
    }
  };

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  conjunction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConjunctionContext);
    } else {
      return this.getTypedRuleContext(ConjunctionContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConjunctionexpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConjunctionexpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConjunctionexpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DisjunctionexpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_disjunctionexpressionconstraint;
  }

  subexpressionconstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SubexpressionconstraintContext);
    } else {
      return this.getTypedRuleContext(SubexpressionconstraintContext, i);
    }
  };

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  disjunction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DisjunctionContext);
    } else {
      return this.getTypedRuleContext(DisjunctionContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDisjunctionexpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDisjunctionexpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDisjunctionexpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExclusionexpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_exclusionexpressionconstraint;
  }

  subexpressionconstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SubexpressionconstraintContext);
    } else {
      return this.getTypedRuleContext(SubexpressionconstraintContext, i);
    }
  };

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  exclusion() {
    return this.getTypedRuleContext(ExclusionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterExclusionexpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitExclusionexpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitExclusionexpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DottedexpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dottedexpressionconstraint;
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  dottedexpressionattribute = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DottedexpressionattributeContext);
    } else {
      return this.getTypedRuleContext(DottedexpressionattributeContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDottedexpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDottedexpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDottedexpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DottedexpressionattributeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dottedexpressionattribute;
  }

  dot() {
    return this.getTypedRuleContext(DotContext, 0);
  }

  ws() {
    return this.getTypedRuleContext(WsContext, 0);
  }

  eclattributename() {
    return this.getTypedRuleContext(EclattributenameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDottedexpressionattribute(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDottedexpressionattribute(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDottedexpressionattribute(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SubexpressionconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_subexpressionconstraint;
  }

  constraintoperator() {
    return this.getTypedRuleContext(ConstraintoperatorContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  historysupplement() {
    return this.getTypedRuleContext(HistorysupplementContext, 0);
  }

  eclfocusconcept() {
    return this.getTypedRuleContext(EclfocusconceptContext, 0);
  }

  descriptionfilterconstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DescriptionfilterconstraintContext);
    } else {
      return this.getTypedRuleContext(DescriptionfilterconstraintContext, i);
    }
  };

  conceptfilterconstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConceptfilterconstraintContext);
    } else {
      return this.getTypedRuleContext(ConceptfilterconstraintContext, i);
    }
  };

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  expressionconstraint() {
    return this.getTypedRuleContext(ExpressionconstraintContext, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  memberof() {
    return this.getTypedRuleContext(MemberofContext, 0);
  }

  memberfilterconstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MemberfilterconstraintContext);
    } else {
      return this.getTypedRuleContext(MemberfilterconstraintContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterSubexpressionconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitSubexpressionconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitSubexpressionconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclfocusconceptContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclfocusconcept;
  }

  eclconceptreference() {
    return this.getTypedRuleContext(EclconceptreferenceContext, 0);
  }

  wildcard() {
    return this.getTypedRuleContext(WildcardContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclfocusconcept(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclfocusconcept(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclfocusconcept(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DotContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dot;
  }

  PERIOD() {
    return this.getToken(ECLParser.PERIOD, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDot(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDot(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDot(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MemberofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_memberof;
  }

  CARAT() {
    return this.getToken(ECLParser.CARAT, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  refsetfieldset() {
    return this.getTypedRuleContext(RefsetfieldsetContext, 0);
  }

  wildcard() {
    return this.getTypedRuleContext(WildcardContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMemberof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMemberof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMemberof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RefsetfieldsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_refsetfieldset;
  }

  refsetfield = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RefsetfieldContext);
    } else {
      return this.getTypedRuleContext(RefsetfieldContext, i);
    }
  };

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.COMMA);
    } else {
      return this.getToken(ECLParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterRefsetfieldset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitRefsetfieldset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitRefsetfieldset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RefsetfieldContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_refsetfield;
  }

  refsetfieldname() {
    return this.getTypedRuleContext(RefsetfieldnameContext, 0);
  }

  refsetfieldref() {
    return this.getTypedRuleContext(RefsetfieldrefContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterRefsetfield(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitRefsetfield(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitRefsetfield(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RefsetfieldnameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_refsetfieldname;
  }

  alpha = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AlphaContext);
    } else {
      return this.getTypedRuleContext(AlphaContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterRefsetfieldname(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitRefsetfieldname(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitRefsetfieldname(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RefsetfieldrefContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_refsetfieldref;
  }

  eclconceptreference() {
    return this.getTypedRuleContext(EclconceptreferenceContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterRefsetfieldref(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitRefsetfieldref(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitRefsetfieldref(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclconceptreferenceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclconceptreference;
  }

  conceptid() {
    return this.getTypedRuleContext(ConceptidContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PIPE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.PIPE);
    } else {
      return this.getToken(ECLParser.PIPE, i);
    }
  };

  term() {
    return this.getTypedRuleContext(TermContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclconceptreference(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclconceptreference(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclconceptreference(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclconceptreferencesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclconceptreferenceset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  eclconceptreference = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EclconceptreferenceContext);
    } else {
      return this.getTypedRuleContext(EclconceptreferenceContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclconceptreferenceset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclconceptreferenceset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclconceptreferenceset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConceptidContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_conceptid;
  }

  sctid() {
    return this.getTypedRuleContext(SctidContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConceptid(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConceptid(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConceptid(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TermContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_term;
  }

  nonwsnonpipe = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NonwsnonpipeContext);
    } else {
      return this.getTypedRuleContext(NonwsnonpipeContext, i);
    }
  };

  sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTerm(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTerm(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTerm(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WildcardContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_wildcard;
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterWildcard(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitWildcard(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitWildcard(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConstraintoperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_constraintoperator;
  }

  childof() {
    return this.getTypedRuleContext(ChildofContext, 0);
  }

  childorselfof() {
    return this.getTypedRuleContext(ChildorselfofContext, 0);
  }

  descendantorselfof() {
    return this.getTypedRuleContext(DescendantorselfofContext, 0);
  }

  descendantof() {
    return this.getTypedRuleContext(DescendantofContext, 0);
  }

  parentof() {
    return this.getTypedRuleContext(ParentofContext, 0);
  }

  parentorselfof() {
    return this.getTypedRuleContext(ParentorselfofContext, 0);
  }

  ancestororselfof() {
    return this.getTypedRuleContext(AncestororselfofContext, 0);
  }

  ancestorof() {
    return this.getTypedRuleContext(AncestorofContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConstraintoperator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConstraintoperator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConstraintoperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DescendantofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_descendantof;
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDescendantof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDescendantof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDescendantof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DescendantorselfofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_descendantorselfof;
  }

  LESS_THAN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.LESS_THAN);
    } else {
      return this.getToken(ECLParser.LESS_THAN, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDescendantorselfof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDescendantorselfof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDescendantorselfof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ChildofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_childof;
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterChildof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitChildof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitChildof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ChildorselfofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_childorselfof;
  }

  LESS_THAN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.LESS_THAN);
    } else {
      return this.getToken(ECLParser.LESS_THAN, i);
    }
  };

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterChildorselfof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitChildorselfof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitChildorselfof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AncestorofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_ancestorof;
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAncestorof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAncestorof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAncestorof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AncestororselfofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_ancestororselfof;
  }

  GREATER_THAN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.GREATER_THAN);
    } else {
      return this.getToken(ECLParser.GREATER_THAN, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAncestororselfof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAncestororselfof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAncestororselfof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ParentofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_parentof;
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterParentof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitParentof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitParentof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ParentorselfofContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_parentorselfof;
  }

  GREATER_THAN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.GREATER_THAN);
    } else {
      return this.getToken(ECLParser.GREATER_THAN, i);
    }
  };

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterParentorselfof(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitParentorselfof(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitParentorselfof(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConjunctionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_conjunction;
  }

  mws() {
    return this.getTypedRuleContext(MwsContext, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  COMMA() {
    return this.getToken(ECLParser.COMMA, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConjunction(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConjunction(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConjunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DisjunctionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_disjunction;
  }

  mws() {
    return this.getTypedRuleContext(MwsContext, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDisjunction(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDisjunction(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDisjunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExclusionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_exclusion;
  }

  mws() {
    return this.getTypedRuleContext(MwsContext, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterExclusion(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitExclusion(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitExclusion(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclrefinementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclrefinement;
  }

  subrefinement() {
    return this.getTypedRuleContext(SubrefinementContext, 0);
  }

  ws() {
    return this.getTypedRuleContext(WsContext, 0);
  }

  conjunctionrefinementset() {
    return this.getTypedRuleContext(ConjunctionrefinementsetContext, 0);
  }

  disjunctionrefinementset() {
    return this.getTypedRuleContext(DisjunctionrefinementsetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclrefinement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclrefinement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclrefinement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConjunctionrefinementsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_conjunctionrefinementset;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  conjunction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConjunctionContext);
    } else {
      return this.getTypedRuleContext(ConjunctionContext, i);
    }
  };

  subrefinement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SubrefinementContext);
    } else {
      return this.getTypedRuleContext(SubrefinementContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConjunctionrefinementset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConjunctionrefinementset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConjunctionrefinementset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DisjunctionrefinementsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_disjunctionrefinementset;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  disjunction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DisjunctionContext);
    } else {
      return this.getTypedRuleContext(DisjunctionContext, i);
    }
  };

  subrefinement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SubrefinementContext);
    } else {
      return this.getTypedRuleContext(SubrefinementContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDisjunctionrefinementset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDisjunctionrefinementset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDisjunctionrefinementset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SubrefinementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_subrefinement;
  }

  eclattributeset() {
    return this.getTypedRuleContext(EclattributesetContext, 0);
  }

  eclattributegroup() {
    return this.getTypedRuleContext(EclattributegroupContext, 0);
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  eclrefinement() {
    return this.getTypedRuleContext(EclrefinementContext, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterSubrefinement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitSubrefinement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitSubrefinement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclattributesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclattributeset;
  }

  subattributeset() {
    return this.getTypedRuleContext(SubattributesetContext, 0);
  }

  ws() {
    return this.getTypedRuleContext(WsContext, 0);
  }

  conjunctionattributeset() {
    return this.getTypedRuleContext(ConjunctionattributesetContext, 0);
  }

  disjunctionattributeset() {
    return this.getTypedRuleContext(DisjunctionattributesetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclattributeset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclattributeset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclattributeset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConjunctionattributesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_conjunctionattributeset;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  conjunction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConjunctionContext);
    } else {
      return this.getTypedRuleContext(ConjunctionContext, i);
    }
  };

  subattributeset = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SubattributesetContext);
    } else {
      return this.getTypedRuleContext(SubattributesetContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConjunctionattributeset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConjunctionattributeset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConjunctionattributeset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DisjunctionattributesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_disjunctionattributeset;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  disjunction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DisjunctionContext);
    } else {
      return this.getTypedRuleContext(DisjunctionContext, i);
    }
  };

  subattributeset = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SubattributesetContext);
    } else {
      return this.getTypedRuleContext(SubattributesetContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDisjunctionattributeset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDisjunctionattributeset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDisjunctionattributeset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SubattributesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_subattributeset;
  }

  eclattribute() {
    return this.getTypedRuleContext(EclattributeContext, 0);
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  eclattributeset() {
    return this.getTypedRuleContext(EclattributesetContext, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterSubattributeset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitSubattributeset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitSubattributeset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclattributegroupContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclattributegroup;
  }

  LEFT_CURLY_BRACE() {
    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  eclattributeset() {
    return this.getTypedRuleContext(EclattributesetContext, 0);
  }

  RIGHT_CURLY_BRACE() {
    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
  }

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  cardinality() {
    return this.getTypedRuleContext(CardinalityContext, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclattributegroup(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclattributegroup(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclattributegroup(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclattributeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclattribute;
  }

  eclattributename() {
    return this.getTypedRuleContext(EclattributenameContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  cardinality() {
    return this.getTypedRuleContext(CardinalityContext, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  reverseflag() {
    return this.getTypedRuleContext(ReverseflagContext, 0);
  }

  expressioncomparisonoperator() {
    return this.getTypedRuleContext(ExpressioncomparisonoperatorContext, 0);
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  numericcomparisonoperator() {
    return this.getTypedRuleContext(NumericcomparisonoperatorContext, 0);
  }

  HASH() {
    return this.getToken(ECLParser.HASH, 0);
  }

  numericvalue() {
    return this.getTypedRuleContext(NumericvalueContext, 0);
  }

  stringcomparisonoperator() {
    return this.getTypedRuleContext(StringcomparisonoperatorContext, 0);
  }

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  booleanvalue() {
    return this.getTypedRuleContext(BooleanvalueContext, 0);
  }

  typedsearchterm() {
    return this.getTypedRuleContext(TypedsearchtermContext, 0);
  }

  typedsearchtermset() {
    return this.getTypedRuleContext(TypedsearchtermsetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclattribute(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclattribute(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclattribute(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CardinalityContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_cardinality;
  }

  minvalue() {
    return this.getTypedRuleContext(MinvalueContext, 0);
  }

  to() {
    return this.getTypedRuleContext(ToContext, 0);
  }

  maxvalue() {
    return this.getTypedRuleContext(MaxvalueContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterCardinality(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitCardinality(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitCardinality(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MinvalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_minvalue;
  }

  nonnegativeintegervalue() {
    return this.getTypedRuleContext(NonnegativeintegervalueContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMinvalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMinvalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMinvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ToContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_to;
  }

  PERIOD = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.PERIOD);
    } else {
      return this.getToken(ECLParser.PERIOD, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTo(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTo(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTo(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MaxvalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_maxvalue;
  }

  nonnegativeintegervalue() {
    return this.getTypedRuleContext(NonnegativeintegervalueContext, 0);
  }

  many() {
    return this.getTypedRuleContext(ManyContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMaxvalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMaxvalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMaxvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ManyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_many;
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMany(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMany(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMany(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReverseflagContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_reverseflag;
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterReverseflag(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitReverseflag(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitReverseflag(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EclattributenameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_eclattributename;
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEclattributename(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEclattributename(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEclattributename(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressioncomparisonoperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_expressioncomparisonoperator;
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterExpressioncomparisonoperator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitExpressioncomparisonoperator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitExpressioncomparisonoperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NumericcomparisonoperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_numericcomparisonoperator;
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterNumericcomparisonoperator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitNumericcomparisonoperator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitNumericcomparisonoperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TimecomparisonoperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_timecomparisonoperator;
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTimecomparisonoperator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTimecomparisonoperator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTimecomparisonoperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StringcomparisonoperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_stringcomparisonoperator;
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterStringcomparisonoperator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitStringcomparisonoperator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitStringcomparisonoperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BooleancomparisonoperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_booleancomparisonoperator;
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterBooleancomparisonoperator(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitBooleancomparisonoperator(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitBooleancomparisonoperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DescriptionfilterconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_descriptionfilterconstraint;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  descriptionfilter = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DescriptionfilterContext);
    } else {
      return this.getTypedRuleContext(DescriptionfilterContext, i);
    }
  };

  LEFT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.LEFT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.LEFT_CURLY_BRACE, i);
    }
  };

  RIGHT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.RIGHT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.RIGHT_CURLY_BRACE, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.COMMA);
    } else {
      return this.getToken(ECLParser.COMMA, i);
    }
  };

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDescriptionfilterconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDescriptionfilterconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDescriptionfilterconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DescriptionfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_descriptionfilter;
  }

  termfilter() {
    return this.getTypedRuleContext(TermfilterContext, 0);
  }

  languagefilter() {
    return this.getTypedRuleContext(LanguagefilterContext, 0);
  }

  typefilter() {
    return this.getTypedRuleContext(TypefilterContext, 0);
  }

  dialectfilter() {
    return this.getTypedRuleContext(DialectfilterContext, 0);
  }

  modulefilter() {
    return this.getTypedRuleContext(ModulefilterContext, 0);
  }

  effectivetimefilter() {
    return this.getTypedRuleContext(EffectivetimefilterContext, 0);
  }

  activefilter() {
    return this.getTypedRuleContext(ActivefilterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDescriptionfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDescriptionfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDescriptionfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TermfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_termfilter;
  }

  termkeyword() {
    return this.getTypedRuleContext(TermkeywordContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  stringcomparisonoperator() {
    return this.getTypedRuleContext(StringcomparisonoperatorContext, 0);
  }

  typedsearchterm() {
    return this.getTypedRuleContext(TypedsearchtermContext, 0);
  }

  typedsearchtermset() {
    return this.getTypedRuleContext(TypedsearchtermsetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTermfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTermfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTermfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TermkeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_termkeyword;
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTermkeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTermkeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTermkeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypedsearchtermContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typedsearchterm;
  }

  matchsearchtermset() {
    return this.getTypedRuleContext(MatchsearchtermsetContext, 0);
  }

  matchkeyword() {
    return this.getTypedRuleContext(MatchkeywordContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  COLON() {
    return this.getToken(ECLParser.COLON, 0);
  }

  wild() {
    return this.getTypedRuleContext(WildContext, 0);
  }

  wildsearchtermset() {
    return this.getTypedRuleContext(WildsearchtermsetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypedsearchterm(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypedsearchterm(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypedsearchterm(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypedsearchtermsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typedsearchtermset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  typedsearchterm = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypedsearchtermContext);
    } else {
      return this.getTypedRuleContext(TypedsearchtermContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypedsearchtermset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypedsearchtermset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypedsearchtermset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WildContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_wild;
  }

  CAP_W() {
    return this.getToken(ECLParser.CAP_W, 0);
  }

  W() {
    return this.getToken(ECLParser.W, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterWild(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitWild(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitWild(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MatchkeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_matchkeyword;
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMatchkeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMatchkeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMatchkeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MatchsearchtermContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_matchsearchterm;
  }

  nonwsnonescapedchar = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NonwsnonescapedcharContext);
    } else {
      return this.getTypedRuleContext(NonwsnonescapedcharContext, i);
    }
  };

  escapedchar = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EscapedcharContext);
    } else {
      return this.getTypedRuleContext(EscapedcharContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMatchsearchterm(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMatchsearchterm(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMatchsearchterm(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MatchsearchtermsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_matchsearchtermset;
  }

  qm = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(QmContext);
    } else {
      return this.getTypedRuleContext(QmContext, i);
    }
  };

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  matchsearchterm = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MatchsearchtermContext);
    } else {
      return this.getTypedRuleContext(MatchsearchtermContext, i);
    }
  };

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMatchsearchtermset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMatchsearchtermset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMatchsearchtermset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WildsearchtermContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_wildsearchterm;
  }

  anynonescapedchar = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnynonescapedcharContext);
    } else {
      return this.getTypedRuleContext(AnynonescapedcharContext, i);
    }
  };

  escapedwildchar = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EscapedwildcharContext);
    } else {
      return this.getTypedRuleContext(EscapedwildcharContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterWildsearchterm(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitWildsearchterm(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitWildsearchterm(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WildsearchtermsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_wildsearchtermset;
  }

  qm = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(QmContext);
    } else {
      return this.getTypedRuleContext(QmContext, i);
    }
  };

  wildsearchterm() {
    return this.getTypedRuleContext(WildsearchtermContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterWildsearchtermset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitWildsearchtermset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitWildsearchtermset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LanguagefilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_languagefilter;
  }

  language() {
    return this.getTypedRuleContext(LanguageContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  languagecode() {
    return this.getTypedRuleContext(LanguagecodeContext, 0);
  }

  languagecodeset() {
    return this.getTypedRuleContext(LanguagecodesetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterLanguagefilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitLanguagefilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitLanguagefilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LanguageContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_language;
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  CAP_A = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_A);
    } else {
      return this.getToken(ECLParser.CAP_A, i);
    }
  };

  A = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.A);
    } else {
      return this.getToken(ECLParser.A, i);
    }
  };

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  CAP_G = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_G);
    } else {
      return this.getToken(ECLParser.CAP_G, i);
    }
  };

  G = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.G);
    } else {
      return this.getToken(ECLParser.G, i);
    }
  };

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterLanguage(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitLanguage(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitLanguage(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LanguagecodeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_languagecode;
  }

  alpha = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AlphaContext);
    } else {
      return this.getTypedRuleContext(AlphaContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterLanguagecode(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitLanguagecode(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitLanguagecode(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LanguagecodesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_languagecodeset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  languagecode = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LanguagecodeContext);
    } else {
      return this.getTypedRuleContext(LanguagecodeContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterLanguagecodeset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitLanguagecodeset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitLanguagecodeset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypefilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typefilter;
  }

  typeidfilter() {
    return this.getTypedRuleContext(TypeidfilterContext, 0);
  }

  typetokenfilter() {
    return this.getTypedRuleContext(TypetokenfilterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypefilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypefilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypefilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypeidfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typeidfilter;
  }

  typeid() {
    return this.getTypedRuleContext(TypeidContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  eclconceptreferenceset() {
    return this.getTypedRuleContext(EclconceptreferencesetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypeidfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypeidfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypeidfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypeidContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typeid;
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypeid(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypeid(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypeid(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypetokenfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typetokenfilter;
  }

  type() {
    return this.getTypedRuleContext(TypeContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  typetoken() {
    return this.getTypedRuleContext(TypetokenContext, 0);
  }

  typetokenset() {
    return this.getTypedRuleContext(TypetokensetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypetokenfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypetokenfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypetokenfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_type;
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterType(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitType(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypetokenContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typetoken;
  }

  synonym() {
    return this.getTypedRuleContext(SynonymContext, 0);
  }

  fullyspecifiedname() {
    return this.getTypedRuleContext(FullyspecifiednameContext, 0);
  }

  definition() {
    return this.getTypedRuleContext(DefinitionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypetoken(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypetoken(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypetoken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TypetokensetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_typetokenset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  typetoken = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TypetokenContext);
    } else {
      return this.getTypedRuleContext(TypetokenContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTypetokenset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTypetokenset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTypetokenset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SynonymContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_synonym;
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterSynonym(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitSynonym(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitSynonym(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FullyspecifiednameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_fullyspecifiedname;
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterFullyspecifiedname(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitFullyspecifiedname(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitFullyspecifiedname(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definition;
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinition(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinition(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialectfilter;
  }

  dialectidfilter() {
    return this.getTypedRuleContext(DialectidfilterContext, 0);
  }

  dialectaliasfilter() {
    return this.getTypedRuleContext(DialectaliasfilterContext, 0);
  }

  ws() {
    return this.getTypedRuleContext(WsContext, 0);
  }

  acceptabilityset() {
    return this.getTypedRuleContext(AcceptabilitysetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialectfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialectfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialectfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectidfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialectidfilter;
  }

  dialectid() {
    return this.getTypedRuleContext(DialectidContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  dialectidset() {
    return this.getTypedRuleContext(DialectidsetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialectidfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialectidfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialectidfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectidContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialectid;
  }

  CAP_D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_D);
    } else {
      return this.getToken(ECLParser.CAP_D, i);
    }
  };

  D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.D);
    } else {
      return this.getToken(ECLParser.D, i);
    }
  };

  CAP_I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_I);
    } else {
      return this.getToken(ECLParser.CAP_I, i);
    }
  };

  I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.I);
    } else {
      return this.getToken(ECLParser.I, i);
    }
  };

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialectid(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialectid(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialectid(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectaliasfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialectaliasfilter;
  }

  dialect() {
    return this.getTypedRuleContext(DialectContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  dialectalias() {
    return this.getTypedRuleContext(DialectaliasContext, 0);
  }

  dialectaliasset() {
    return this.getTypedRuleContext(DialectaliassetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialectaliasfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialectaliasfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialectaliasfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialect;
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialect(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialect(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialect(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectaliasContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialectalias;
  }

  alpha = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AlphaContext);
    } else {
      return this.getTypedRuleContext(AlphaContext, i);
    }
  };

  dash = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DashContext);
    } else {
      return this.getTypedRuleContext(DashContext, i);
    }
  };

  integervalue = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IntegervalueContext);
    } else {
      return this.getTypedRuleContext(IntegervalueContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialectalias(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialectalias(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialectalias(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectaliassetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialectaliasset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  dialectalias = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DialectaliasContext);
    } else {
      return this.getTypedRuleContext(DialectaliasContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  acceptabilityset = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AcceptabilitysetContext);
    } else {
      return this.getTypedRuleContext(AcceptabilitysetContext, i);
    }
  };

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialectaliasset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialectaliasset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialectaliasset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DialectidsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dialectidset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  eclconceptreference = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EclconceptreferenceContext);
    } else {
      return this.getTypedRuleContext(EclconceptreferenceContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  acceptabilityset = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AcceptabilitysetContext);
    } else {
      return this.getTypedRuleContext(AcceptabilitysetContext, i);
    }
  };

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDialectidset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDialectidset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDialectidset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AcceptabilitysetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_acceptabilityset;
  }

  acceptabilityconceptreferenceset() {
    return this.getTypedRuleContext(AcceptabilityconceptreferencesetContext, 0);
  }

  acceptabilitytokenset() {
    return this.getTypedRuleContext(AcceptabilitytokensetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAcceptabilityset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAcceptabilityset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAcceptabilityset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AcceptabilityconceptreferencesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_acceptabilityconceptreferenceset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  eclconceptreference = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EclconceptreferenceContext);
    } else {
      return this.getTypedRuleContext(EclconceptreferenceContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAcceptabilityconceptreferenceset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAcceptabilityconceptreferenceset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAcceptabilityconceptreferenceset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AcceptabilitytokensetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_acceptabilitytokenset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  acceptabilitytoken = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AcceptabilitytokenContext);
    } else {
      return this.getTypedRuleContext(AcceptabilitytokenContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAcceptabilitytokenset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAcceptabilitytokenset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAcceptabilitytokenset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AcceptabilitytokenContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_acceptabilitytoken;
  }

  acceptable() {
    return this.getTypedRuleContext(AcceptableContext, 0);
  }

  preferred() {
    return this.getTypedRuleContext(PreferredContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAcceptabilitytoken(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAcceptabilitytoken(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAcceptabilitytoken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AcceptableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_acceptable;
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_C = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_C);
    } else {
      return this.getToken(ECLParser.CAP_C, i);
    }
  };

  C = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.C);
    } else {
      return this.getToken(ECLParser.C, i);
    }
  };

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAcceptable(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAcceptable(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAcceptable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PreferredContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_preferred;
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  CAP_R = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_R);
    } else {
      return this.getToken(ECLParser.CAP_R, i);
    }
  };

  R = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.R);
    } else {
      return this.getToken(ECLParser.R, i);
    }
  };

  CAP_E = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_E);
    } else {
      return this.getToken(ECLParser.CAP_E, i);
    }
  };

  E = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.E);
    } else {
      return this.getToken(ECLParser.E, i);
    }
  };

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterPreferred(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitPreferred(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitPreferred(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConceptfilterconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_conceptfilterconstraint;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  conceptfilter = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ConceptfilterContext);
    } else {
      return this.getTypedRuleContext(ConceptfilterContext, i);
    }
  };

  LEFT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.LEFT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.LEFT_CURLY_BRACE, i);
    }
  };

  RIGHT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.RIGHT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.RIGHT_CURLY_BRACE, i);
    }
  };

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.COMMA);
    } else {
      return this.getToken(ECLParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConceptfilterconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConceptfilterconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConceptfilterconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConceptfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_conceptfilter;
  }

  definitionstatusfilter() {
    return this.getTypedRuleContext(DefinitionstatusfilterContext, 0);
  }

  modulefilter() {
    return this.getTypedRuleContext(ModulefilterContext, 0);
  }

  effectivetimefilter() {
    return this.getTypedRuleContext(EffectivetimefilterContext, 0);
  }

  activefilter() {
    return this.getTypedRuleContext(ActivefilterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterConceptfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitConceptfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitConceptfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionstatusfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definitionstatusfilter;
  }

  definitionstatusidfilter() {
    return this.getTypedRuleContext(DefinitionstatusidfilterContext, 0);
  }

  definitionstatustokenfilter() {
    return this.getTypedRuleContext(DefinitionstatustokenfilterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinitionstatusfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinitionstatusfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinitionstatusfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionstatusidfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definitionstatusidfilter;
  }

  definitionstatusidkeyword() {
    return this.getTypedRuleContext(DefinitionstatusidkeywordContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  eclconceptreferenceset() {
    return this.getTypedRuleContext(EclconceptreferencesetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinitionstatusidfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinitionstatusidfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinitionstatusidfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionstatusidkeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definitionstatusidkeyword;
  }

  CAP_D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_D);
    } else {
      return this.getToken(ECLParser.CAP_D, i);
    }
  };

  D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.D);
    } else {
      return this.getToken(ECLParser.D, i);
    }
  };

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  CAP_I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_I);
    } else {
      return this.getToken(ECLParser.CAP_I, i);
    }
  };

  I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.I);
    } else {
      return this.getToken(ECLParser.I, i);
    }
  };

  CAP_N = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_N);
    } else {
      return this.getToken(ECLParser.CAP_N, i);
    }
  };

  N = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.N);
    } else {
      return this.getToken(ECLParser.N, i);
    }
  };

  CAP_T = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_T);
    } else {
      return this.getToken(ECLParser.CAP_T, i);
    }
  };

  T = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.T);
    } else {
      return this.getToken(ECLParser.T, i);
    }
  };

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  CAP_S = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_S);
    } else {
      return this.getToken(ECLParser.CAP_S, i);
    }
  };

  S = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.S);
    } else {
      return this.getToken(ECLParser.S, i);
    }
  };

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinitionstatusidkeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinitionstatusidkeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinitionstatusidkeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionstatustokenfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definitionstatustokenfilter;
  }

  definitionstatuskeyword() {
    return this.getTypedRuleContext(DefinitionstatuskeywordContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  definitionstatustoken() {
    return this.getTypedRuleContext(DefinitionstatustokenContext, 0);
  }

  definitionstatustokenset() {
    return this.getTypedRuleContext(DefinitionstatustokensetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinitionstatustokenfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinitionstatustokenfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinitionstatustokenfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionstatuskeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definitionstatuskeyword;
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  CAP_I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_I);
    } else {
      return this.getToken(ECLParser.CAP_I, i);
    }
  };

  I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.I);
    } else {
      return this.getToken(ECLParser.I, i);
    }
  };

  CAP_N = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_N);
    } else {
      return this.getToken(ECLParser.CAP_N, i);
    }
  };

  N = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.N);
    } else {
      return this.getToken(ECLParser.N, i);
    }
  };

  CAP_T = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_T);
    } else {
      return this.getToken(ECLParser.CAP_T, i);
    }
  };

  T = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.T);
    } else {
      return this.getToken(ECLParser.T, i);
    }
  };

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  CAP_S = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_S);
    } else {
      return this.getToken(ECLParser.CAP_S, i);
    }
  };

  S = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.S);
    } else {
      return this.getToken(ECLParser.S, i);
    }
  };

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinitionstatuskeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinitionstatuskeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinitionstatuskeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionstatustokenContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definitionstatustoken;
  }

  primitivetoken() {
    return this.getTypedRuleContext(PrimitivetokenContext, 0);
  }

  definedtoken() {
    return this.getTypedRuleContext(DefinedtokenContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinitionstatustoken(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinitionstatustoken(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinitionstatustoken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinitionstatustokensetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definitionstatustokenset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  definitionstatustoken = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DefinitionstatustokenContext);
    } else {
      return this.getTypedRuleContext(DefinitionstatustokenContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinitionstatustokenset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinitionstatustokenset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinitionstatustokenset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrimitivetokenContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_primitivetoken;
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  CAP_I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_I);
    } else {
      return this.getToken(ECLParser.CAP_I, i);
    }
  };

  I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.I);
    } else {
      return this.getToken(ECLParser.I, i);
    }
  };

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterPrimitivetoken(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitPrimitivetoken(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitPrimitivetoken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefinedtokenContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_definedtoken;
  }

  CAP_D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_D);
    } else {
      return this.getToken(ECLParser.CAP_D, i);
    }
  };

  D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.D);
    } else {
      return this.getToken(ECLParser.D, i);
    }
  };

  CAP_E = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_E);
    } else {
      return this.getToken(ECLParser.CAP_E, i);
    }
  };

  E = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.E);
    } else {
      return this.getToken(ECLParser.E, i);
    }
  };

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDefinedtoken(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDefinedtoken(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDefinedtoken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ModulefilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_modulefilter;
  }

  moduleidkeyword() {
    return this.getTypedRuleContext(ModuleidkeywordContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  eclconceptreferenceset() {
    return this.getTypedRuleContext(EclconceptreferencesetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterModulefilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitModulefilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitModulefilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ModuleidkeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_moduleidkeyword;
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  CAP_D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_D);
    } else {
      return this.getToken(ECLParser.CAP_D, i);
    }
  };

  D = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.D);
    } else {
      return this.getToken(ECLParser.D, i);
    }
  };

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterModuleidkeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitModuleidkeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitModuleidkeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EffectivetimefilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_effectivetimefilter;
  }

  effectivetimekeyword() {
    return this.getTypedRuleContext(EffectivetimekeywordContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  timecomparisonoperator() {
    return this.getTypedRuleContext(TimecomparisonoperatorContext, 0);
  }

  timevalue() {
    return this.getTypedRuleContext(TimevalueContext, 0);
  }

  timevalueset() {
    return this.getTypedRuleContext(TimevaluesetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEffectivetimefilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEffectivetimefilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEffectivetimefilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EffectivetimekeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_effectivetimekeyword;
  }

  CAP_E = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_E);
    } else {
      return this.getToken(ECLParser.CAP_E, i);
    }
  };

  E = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.E);
    } else {
      return this.getToken(ECLParser.E, i);
    }
  };

  CAP_F = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_F);
    } else {
      return this.getToken(ECLParser.CAP_F, i);
    }
  };

  F = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.F);
    } else {
      return this.getToken(ECLParser.F, i);
    }
  };

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  CAP_T = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_T);
    } else {
      return this.getToken(ECLParser.CAP_T, i);
    }
  };

  T = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.T);
    } else {
      return this.getToken(ECLParser.T, i);
    }
  };

  CAP_I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.CAP_I);
    } else {
      return this.getToken(ECLParser.CAP_I, i);
    }
  };

  I = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.I);
    } else {
      return this.getToken(ECLParser.I, i);
    }
  };

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEffectivetimekeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEffectivetimekeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEffectivetimekeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TimevalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_timevalue;
  }

  qm = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(QmContext);
    } else {
      return this.getTypedRuleContext(QmContext, i);
    }
  };

  year() {
    return this.getTypedRuleContext(YearContext, 0);
  }

  month() {
    return this.getTypedRuleContext(MonthContext, 0);
  }

  day() {
    return this.getTypedRuleContext(DayContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTimevalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTimevalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTimevalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TimevaluesetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_timevalueset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  timevalue = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TimevalueContext);
    } else {
      return this.getTypedRuleContext(TimevalueContext, i);
    }
  };

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  mws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MwsContext);
    } else {
      return this.getTypedRuleContext(MwsContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTimevalueset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTimevalueset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTimevalueset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class YearContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_year;
  }

  digitnonzero() {
    return this.getTypedRuleContext(DigitnonzeroContext, 0);
  }

  digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterYear(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitYear(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitYear(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MonthContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_month;
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.ONE);
    } else {
      return this.getToken(ECLParser.ONE, i);
    }
  };

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMonth(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMonth(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMonth(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DayContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_day;
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.ONE);
    } else {
      return this.getToken(ECLParser.ONE, i);
    }
  };

  TWO = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.TWO);
    } else {
      return this.getToken(ECLParser.TWO, i);
    }
  };

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDay(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDay(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDay(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ActivefilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_activefilter;
  }

  activekeyword() {
    return this.getTypedRuleContext(ActivekeywordContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  activevalue() {
    return this.getTypedRuleContext(ActivevalueContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterActivefilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitActivefilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitActivefilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ActivekeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_activekeyword;
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterActivekeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitActivekeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitActivekeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ActivevalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_activevalue;
  }

  activetruevalue() {
    return this.getTypedRuleContext(ActivetruevalueContext, 0);
  }

  activefalsevalue() {
    return this.getTypedRuleContext(ActivefalsevalueContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterActivevalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitActivevalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitActivevalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ActivetruevalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_activetruevalue;
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterActivetruevalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitActivetruevalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitActivetruevalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ActivefalsevalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_activefalsevalue;
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterActivefalsevalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitActivefalsevalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitActivefalsevalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MemberfilterconstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_memberfilterconstraint;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  memberfilter = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(MemberfilterContext);
    } else {
      return this.getTypedRuleContext(MemberfilterContext, i);
    }
  };

  LEFT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.LEFT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.LEFT_CURLY_BRACE, i);
    }
  };

  RIGHT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.RIGHT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.RIGHT_CURLY_BRACE, i);
    }
  };

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.COMMA);
    } else {
      return this.getToken(ECLParser.COMMA, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMemberfilterconstraint(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMemberfilterconstraint(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMemberfilterconstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MemberfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_memberfilter;
  }

  memberfieldfilter() {
    return this.getTypedRuleContext(MemberfieldfilterContext, 0);
  }

  modulefilter() {
    return this.getTypedRuleContext(ModulefilterContext, 0);
  }

  effectivetimefilter() {
    return this.getTypedRuleContext(EffectivetimefilterContext, 0);
  }

  activefilter() {
    return this.getTypedRuleContext(ActivefilterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMemberfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMemberfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMemberfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MemberfieldfilterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_memberfieldfilter;
  }

  refsetfieldname() {
    return this.getTypedRuleContext(RefsetfieldnameContext, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  expressioncomparisonoperator() {
    return this.getTypedRuleContext(ExpressioncomparisonoperatorContext, 0);
  }

  subexpressionconstraint() {
    return this.getTypedRuleContext(SubexpressionconstraintContext, 0);
  }

  numericcomparisonoperator() {
    return this.getTypedRuleContext(NumericcomparisonoperatorContext, 0);
  }

  HASH() {
    return this.getToken(ECLParser.HASH, 0);
  }

  numericvalue() {
    return this.getTypedRuleContext(NumericvalueContext, 0);
  }

  stringcomparisonoperator() {
    return this.getTypedRuleContext(StringcomparisonoperatorContext, 0);
  }

  booleancomparisonoperator() {
    return this.getTypedRuleContext(BooleancomparisonoperatorContext, 0);
  }

  booleanvalue() {
    return this.getTypedRuleContext(BooleanvalueContext, 0);
  }

  timecomparisonoperator() {
    return this.getTypedRuleContext(TimecomparisonoperatorContext, 0);
  }

  typedsearchterm() {
    return this.getTypedRuleContext(TypedsearchtermContext, 0);
  }

  typedsearchtermset() {
    return this.getTypedRuleContext(TypedsearchtermsetContext, 0);
  }

  timevalue() {
    return this.getTypedRuleContext(TimevalueContext, 0);
  }

  timevalueset() {
    return this.getTypedRuleContext(TimevaluesetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMemberfieldfilter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMemberfieldfilter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMemberfieldfilter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HistorysupplementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_historysupplement;
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PLUS() {
    return this.getToken(ECLParser.PLUS, 0);
  }

  historykeyword() {
    return this.getTypedRuleContext(HistorykeywordContext, 0);
  }

  LEFT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.LEFT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.LEFT_CURLY_BRACE, i);
    }
  };

  RIGHT_CURLY_BRACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.RIGHT_CURLY_BRACE);
    } else {
      return this.getToken(ECLParser.RIGHT_CURLY_BRACE, i);
    }
  };

  historyprofilesuffix() {
    return this.getTypedRuleContext(HistoryprofilesuffixContext, 0);
  }

  historysubset() {
    return this.getTypedRuleContext(HistorysubsetContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHistorysupplement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHistorysupplement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHistorysupplement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HistorykeywordContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_historykeyword;
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHistorykeyword(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHistorykeyword(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHistorykeyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HistoryprofilesuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_historyprofilesuffix;
  }

  historyminimumsuffix() {
    return this.getTypedRuleContext(HistoryminimumsuffixContext, 0);
  }

  historymoderatesuffix() {
    return this.getTypedRuleContext(HistorymoderatesuffixContext, 0);
  }

  historymaximumsuffix() {
    return this.getTypedRuleContext(HistorymaximumsuffixContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHistoryprofilesuffix(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHistoryprofilesuffix(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHistoryprofilesuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HistoryminimumsuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_historyminimumsuffix;
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHistoryminimumsuffix(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHistoryminimumsuffix(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHistoryminimumsuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HistorymoderatesuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_historymoderatesuffix;
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHistorymoderatesuffix(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHistorymoderatesuffix(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHistorymoderatesuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HistorymaximumsuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_historymaximumsuffix;
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_X() {
    return this.getToken(ECLParser.CAP_X, 0);
  }

  X() {
    return this.getToken(ECLParser.X, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHistorymaximumsuffix(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHistorymaximumsuffix(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHistorymaximumsuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HistorysubsetContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_historysubset;
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  expressionconstraint() {
    return this.getTypedRuleContext(ExpressionconstraintContext, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHistorysubset(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHistorysubset(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHistorysubset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NumericvalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_numericvalue;
  }

  decimalvalue() {
    return this.getTypedRuleContext(DecimalvalueContext, 0);
  }

  integervalue() {
    return this.getTypedRuleContext(IntegervalueContext, 0);
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  PLUS() {
    return this.getToken(ECLParser.PLUS, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterNumericvalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitNumericvalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitNumericvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StringvalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_stringvalue;
  }

  anynonescapedchar = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AnynonescapedcharContext);
    } else {
      return this.getTypedRuleContext(AnynonescapedcharContext, i);
    }
  };

  escapedchar = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EscapedcharContext);
    } else {
      return this.getTypedRuleContext(EscapedcharContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterStringvalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitStringvalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitStringvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IntegervalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_integervalue;
  }

  digitnonzero() {
    return this.getTypedRuleContext(DigitnonzeroContext, 0);
  }

  digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  zero() {
    return this.getTypedRuleContext(ZeroContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterIntegervalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitIntegervalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitIntegervalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DecimalvalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_decimalvalue;
  }

  integervalue() {
    return this.getTypedRuleContext(IntegervalueContext, 0);
  }

  PERIOD() {
    return this.getToken(ECLParser.PERIOD, 0);
  }

  digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDecimalvalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDecimalvalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDecimalvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BooleanvalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_booleanvalue;
  }

  true_1() {
    return this.getTypedRuleContext(True_1Context, 0);
  }

  false_1() {
    return this.getTypedRuleContext(False_1Context, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterBooleanvalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitBooleanvalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitBooleanvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class True_1Context extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_true_1;
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterTrue_1(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitTrue_1(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitTrue_1(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class False_1Context extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_false_1;
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterFalse_1(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitFalse_1(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitFalse_1(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NonnegativeintegervalueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_nonnegativeintegervalue;
  }

  digitnonzero() {
    return this.getTypedRuleContext(DigitnonzeroContext, 0);
  }

  digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  zero() {
    return this.getTypedRuleContext(ZeroContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterNonnegativeintegervalue(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitNonnegativeintegervalue(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitNonnegativeintegervalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SctidContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_sctid;
  }

  digitnonzero() {
    return this.getTypedRuleContext(DigitnonzeroContext, 0);
  }

  digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterSctid(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitSctid(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitSctid(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_ws;
  }

  sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  htab = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(HtabContext);
    } else {
      return this.getTypedRuleContext(HtabContext, i);
    }
  };

  cr = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CrContext);
    } else {
      return this.getTypedRuleContext(CrContext, i);
    }
  };

  lf = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LfContext);
    } else {
      return this.getTypedRuleContext(LfContext, i);
    }
  };

  comment = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CommentContext);
    } else {
      return this.getTypedRuleContext(CommentContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterWs(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitWs(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitWs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MwsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_mws;
  }

  sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  htab = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(HtabContext);
    } else {
      return this.getTypedRuleContext(HtabContext, i);
    }
  };

  cr = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CrContext);
    } else {
      return this.getTypedRuleContext(CrContext, i);
    }
  };

  lf = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LfContext);
    } else {
      return this.getTypedRuleContext(LfContext, i);
    }
  };

  comment = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CommentContext);
    } else {
      return this.getTypedRuleContext(CommentContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterMws(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitMws(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitMws(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CommentContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_comment;
  }

  SLASH = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.SLASH);
    } else {
      return this.getToken(ECLParser.SLASH, i);
    }
  };

  ASTERISK = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(ECLParser.ASTERISK);
    } else {
      return this.getToken(ECLParser.ASTERISK, i);
    }
  };

  nonstarchar = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NonstarcharContext);
    } else {
      return this.getTypedRuleContext(NonstarcharContext, i);
    }
  };

  starwithnonfslash = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StarwithnonfslashContext);
    } else {
      return this.getTypedRuleContext(StarwithnonfslashContext, i);
    }
  };

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterComment(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitComment(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitComment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NonstarcharContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_nonstarchar;
  }

  sp() {
    return this.getTypedRuleContext(SpContext, 0);
  }

  htab() {
    return this.getTypedRuleContext(HtabContext, 0);
  }

  cr() {
    return this.getTypedRuleContext(CrContext, 0);
  }

  lf() {
    return this.getTypedRuleContext(LfContext, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  QUOTE() {
    return this.getToken(ECLParser.QUOTE, 0);
  }

  HASH() {
    return this.getToken(ECLParser.HASH, 0);
  }

  DOLLAR() {
    return this.getToken(ECLParser.DOLLAR, 0);
  }

  PERCENT() {
    return this.getToken(ECLParser.PERCENT, 0);
  }

  AMPERSAND() {
    return this.getToken(ECLParser.AMPERSAND, 0);
  }

  APOSTROPHE() {
    return this.getToken(ECLParser.APOSTROPHE, 0);
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  PLUS() {
    return this.getToken(ECLParser.PLUS, 0);
  }

  COMMA() {
    return this.getToken(ECLParser.COMMA, 0);
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  PERIOD() {
    return this.getToken(ECLParser.PERIOD, 0);
  }

  SLASH() {
    return this.getToken(ECLParser.SLASH, 0);
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  COLON() {
    return this.getToken(ECLParser.COLON, 0);
  }

  SEMICOLON() {
    return this.getToken(ECLParser.SEMICOLON, 0);
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  QUESTION() {
    return this.getToken(ECLParser.QUESTION, 0);
  }

  AT() {
    return this.getToken(ECLParser.AT, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  CAP_B() {
    return this.getToken(ECLParser.CAP_B, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  CAP_G() {
    return this.getToken(ECLParser.CAP_G, 0);
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  CAP_J() {
    return this.getToken(ECLParser.CAP_J, 0);
  }

  CAP_K() {
    return this.getToken(ECLParser.CAP_K, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  CAP_Q() {
    return this.getToken(ECLParser.CAP_Q, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  CAP_W() {
    return this.getToken(ECLParser.CAP_W, 0);
  }

  CAP_X() {
    return this.getToken(ECLParser.CAP_X, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  CAP_Z() {
    return this.getToken(ECLParser.CAP_Z, 0);
  }

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  BACKSLASH() {
    return this.getToken(ECLParser.BACKSLASH, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  CARAT() {
    return this.getToken(ECLParser.CARAT, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  ACCENT() {
    return this.getToken(ECLParser.ACCENT, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  B() {
    return this.getToken(ECLParser.B, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  G() {
    return this.getToken(ECLParser.G, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  J() {
    return this.getToken(ECLParser.J, 0);
  }

  K() {
    return this.getToken(ECLParser.K, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  Q() {
    return this.getToken(ECLParser.Q, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  W() {
    return this.getToken(ECLParser.W, 0);
  }

  X() {
    return this.getToken(ECLParser.X, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  Z() {
    return this.getToken(ECLParser.Z, 0);
  }

  LEFT_CURLY_BRACE() {
    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
  }

  PIPE() {
    return this.getToken(ECLParser.PIPE, 0);
  }

  RIGHT_CURLY_BRACE() {
    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
  }

  TILDE() {
    return this.getToken(ECLParser.TILDE, 0);
  }

  UTF8_LETTER() {
    return this.getToken(ECLParser.UTF8_LETTER, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterNonstarchar(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitNonstarchar(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitNonstarchar(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StarwithnonfslashContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_starwithnonfslash;
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  nonfslash() {
    return this.getTypedRuleContext(NonfslashContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterStarwithnonfslash(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitStarwithnonfslash(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitStarwithnonfslash(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NonfslashContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_nonfslash;
  }

  sp() {
    return this.getTypedRuleContext(SpContext, 0);
  }

  htab() {
    return this.getTypedRuleContext(HtabContext, 0);
  }

  cr() {
    return this.getTypedRuleContext(CrContext, 0);
  }

  lf() {
    return this.getTypedRuleContext(LfContext, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  QUOTE() {
    return this.getToken(ECLParser.QUOTE, 0);
  }

  HASH() {
    return this.getToken(ECLParser.HASH, 0);
  }

  DOLLAR() {
    return this.getToken(ECLParser.DOLLAR, 0);
  }

  PERCENT() {
    return this.getToken(ECLParser.PERCENT, 0);
  }

  AMPERSAND() {
    return this.getToken(ECLParser.AMPERSAND, 0);
  }

  APOSTROPHE() {
    return this.getToken(ECLParser.APOSTROPHE, 0);
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  PLUS() {
    return this.getToken(ECLParser.PLUS, 0);
  }

  COMMA() {
    return this.getToken(ECLParser.COMMA, 0);
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  PERIOD() {
    return this.getToken(ECLParser.PERIOD, 0);
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  COLON() {
    return this.getToken(ECLParser.COLON, 0);
  }

  SEMICOLON() {
    return this.getToken(ECLParser.SEMICOLON, 0);
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  QUESTION() {
    return this.getToken(ECLParser.QUESTION, 0);
  }

  AT() {
    return this.getToken(ECLParser.AT, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  CAP_B() {
    return this.getToken(ECLParser.CAP_B, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  CAP_G() {
    return this.getToken(ECLParser.CAP_G, 0);
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  CAP_J() {
    return this.getToken(ECLParser.CAP_J, 0);
  }

  CAP_K() {
    return this.getToken(ECLParser.CAP_K, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  CAP_Q() {
    return this.getToken(ECLParser.CAP_Q, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  CAP_W() {
    return this.getToken(ECLParser.CAP_W, 0);
  }

  CAP_X() {
    return this.getToken(ECLParser.CAP_X, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  CAP_Z() {
    return this.getToken(ECLParser.CAP_Z, 0);
  }

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  BACKSLASH() {
    return this.getToken(ECLParser.BACKSLASH, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  CARAT() {
    return this.getToken(ECLParser.CARAT, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  ACCENT() {
    return this.getToken(ECLParser.ACCENT, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  B() {
    return this.getToken(ECLParser.B, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  G() {
    return this.getToken(ECLParser.G, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  J() {
    return this.getToken(ECLParser.J, 0);
  }

  K() {
    return this.getToken(ECLParser.K, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  Q() {
    return this.getToken(ECLParser.Q, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  W() {
    return this.getToken(ECLParser.W, 0);
  }

  X() {
    return this.getToken(ECLParser.X, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  Z() {
    return this.getToken(ECLParser.Z, 0);
  }

  LEFT_CURLY_BRACE() {
    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
  }

  PIPE() {
    return this.getToken(ECLParser.PIPE, 0);
  }

  RIGHT_CURLY_BRACE() {
    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
  }

  TILDE() {
    return this.getToken(ECLParser.TILDE, 0);
  }

  UTF8_LETTER() {
    return this.getToken(ECLParser.UTF8_LETTER, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterNonfslash(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitNonfslash(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitNonfslash(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SpContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_sp;
  }

  SPACE() {
    return this.getToken(ECLParser.SPACE, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterSp(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitSp(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitSp(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HtabContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_htab;
  }

  TAB() {
    return this.getToken(ECLParser.TAB, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterHtab(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitHtab(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitHtab(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CrContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_cr;
  }

  CR() {
    return this.getToken(ECLParser.CR, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterCr(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitCr(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitCr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LfContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_lf;
  }

  LF() {
    return this.getToken(ECLParser.LF, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterLf(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitLf(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitLf(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class QmContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_qm;
  }

  QUOTE() {
    return this.getToken(ECLParser.QUOTE, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterQm(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitQm(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitQm(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_bs;
  }

  BACKSLASH() {
    return this.getToken(ECLParser.BACKSLASH, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterBs(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitBs(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitBs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StarContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_star;
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterStar(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitStar(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitStar(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DigitContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_digit;
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDigit(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDigit(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDigit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ZeroContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_zero;
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterZero(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitZero(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitZero(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DigitnonzeroContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_digitnonzero;
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDigitnonzero(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDigitnonzero(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDigitnonzero(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NonwsnonpipeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_nonwsnonpipe;
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  QUOTE() {
    return this.getToken(ECLParser.QUOTE, 0);
  }

  HASH() {
    return this.getToken(ECLParser.HASH, 0);
  }

  DOLLAR() {
    return this.getToken(ECLParser.DOLLAR, 0);
  }

  PERCENT() {
    return this.getToken(ECLParser.PERCENT, 0);
  }

  AMPERSAND() {
    return this.getToken(ECLParser.AMPERSAND, 0);
  }

  APOSTROPHE() {
    return this.getToken(ECLParser.APOSTROPHE, 0);
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  PLUS() {
    return this.getToken(ECLParser.PLUS, 0);
  }

  COMMA() {
    return this.getToken(ECLParser.COMMA, 0);
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  PERIOD() {
    return this.getToken(ECLParser.PERIOD, 0);
  }

  SLASH() {
    return this.getToken(ECLParser.SLASH, 0);
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  COLON() {
    return this.getToken(ECLParser.COLON, 0);
  }

  SEMICOLON() {
    return this.getToken(ECLParser.SEMICOLON, 0);
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  QUESTION() {
    return this.getToken(ECLParser.QUESTION, 0);
  }

  AT() {
    return this.getToken(ECLParser.AT, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  CAP_B() {
    return this.getToken(ECLParser.CAP_B, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  CAP_G() {
    return this.getToken(ECLParser.CAP_G, 0);
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  CAP_J() {
    return this.getToken(ECLParser.CAP_J, 0);
  }

  CAP_K() {
    return this.getToken(ECLParser.CAP_K, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  CAP_Q() {
    return this.getToken(ECLParser.CAP_Q, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  CAP_W() {
    return this.getToken(ECLParser.CAP_W, 0);
  }

  CAP_X() {
    return this.getToken(ECLParser.CAP_X, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  CAP_Z() {
    return this.getToken(ECLParser.CAP_Z, 0);
  }

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  BACKSLASH() {
    return this.getToken(ECLParser.BACKSLASH, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  CARAT() {
    return this.getToken(ECLParser.CARAT, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  ACCENT() {
    return this.getToken(ECLParser.ACCENT, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  B() {
    return this.getToken(ECLParser.B, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  G() {
    return this.getToken(ECLParser.G, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  J() {
    return this.getToken(ECLParser.J, 0);
  }

  K() {
    return this.getToken(ECLParser.K, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  Q() {
    return this.getToken(ECLParser.Q, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  W() {
    return this.getToken(ECLParser.W, 0);
  }

  X() {
    return this.getToken(ECLParser.X, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  Z() {
    return this.getToken(ECLParser.Z, 0);
  }

  LEFT_CURLY_BRACE() {
    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
  }

  RIGHT_CURLY_BRACE() {
    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
  }

  TILDE() {
    return this.getToken(ECLParser.TILDE, 0);
  }

  UTF8_LETTER() {
    return this.getToken(ECLParser.UTF8_LETTER, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterNonwsnonpipe(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitNonwsnonpipe(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitNonwsnonpipe(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AnynonescapedcharContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_anynonescapedchar;
  }

  sp() {
    return this.getTypedRuleContext(SpContext, 0);
  }

  htab() {
    return this.getTypedRuleContext(HtabContext, 0);
  }

  cr() {
    return this.getTypedRuleContext(CrContext, 0);
  }

  lf() {
    return this.getTypedRuleContext(LfContext, 0);
  }

  SPACE() {
    return this.getToken(ECLParser.SPACE, 0);
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  HASH() {
    return this.getToken(ECLParser.HASH, 0);
  }

  DOLLAR() {
    return this.getToken(ECLParser.DOLLAR, 0);
  }

  PERCENT() {
    return this.getToken(ECLParser.PERCENT, 0);
  }

  AMPERSAND() {
    return this.getToken(ECLParser.AMPERSAND, 0);
  }

  APOSTROPHE() {
    return this.getToken(ECLParser.APOSTROPHE, 0);
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  PLUS() {
    return this.getToken(ECLParser.PLUS, 0);
  }

  COMMA() {
    return this.getToken(ECLParser.COMMA, 0);
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  PERIOD() {
    return this.getToken(ECLParser.PERIOD, 0);
  }

  SLASH() {
    return this.getToken(ECLParser.SLASH, 0);
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  COLON() {
    return this.getToken(ECLParser.COLON, 0);
  }

  SEMICOLON() {
    return this.getToken(ECLParser.SEMICOLON, 0);
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  QUESTION() {
    return this.getToken(ECLParser.QUESTION, 0);
  }

  AT() {
    return this.getToken(ECLParser.AT, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  CAP_B() {
    return this.getToken(ECLParser.CAP_B, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  CAP_G() {
    return this.getToken(ECLParser.CAP_G, 0);
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  CAP_J() {
    return this.getToken(ECLParser.CAP_J, 0);
  }

  CAP_K() {
    return this.getToken(ECLParser.CAP_K, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  CAP_Q() {
    return this.getToken(ECLParser.CAP_Q, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  CAP_W() {
    return this.getToken(ECLParser.CAP_W, 0);
  }

  CAP_X() {
    return this.getToken(ECLParser.CAP_X, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  CAP_Z() {
    return this.getToken(ECLParser.CAP_Z, 0);
  }

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  CARAT() {
    return this.getToken(ECLParser.CARAT, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  ACCENT() {
    return this.getToken(ECLParser.ACCENT, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  B() {
    return this.getToken(ECLParser.B, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  G() {
    return this.getToken(ECLParser.G, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  J() {
    return this.getToken(ECLParser.J, 0);
  }

  K() {
    return this.getToken(ECLParser.K, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  Q() {
    return this.getToken(ECLParser.Q, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  W() {
    return this.getToken(ECLParser.W, 0);
  }

  X() {
    return this.getToken(ECLParser.X, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  Z() {
    return this.getToken(ECLParser.Z, 0);
  }

  LEFT_CURLY_BRACE() {
    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
  }

  PIPE() {
    return this.getToken(ECLParser.PIPE, 0);
  }

  RIGHT_CURLY_BRACE() {
    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
  }

  TILDE() {
    return this.getToken(ECLParser.TILDE, 0);
  }

  UTF8_LETTER() {
    return this.getToken(ECLParser.UTF8_LETTER, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAnynonescapedchar(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAnynonescapedchar(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAnynonescapedchar(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EscapedcharContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_escapedchar;
  }

  bs = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BsContext);
    } else {
      return this.getTypedRuleContext(BsContext, i);
    }
  };

  qm() {
    return this.getTypedRuleContext(QmContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEscapedchar(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEscapedchar(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEscapedchar(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EscapedwildcharContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_escapedwildchar;
  }

  bs = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BsContext);
    } else {
      return this.getTypedRuleContext(BsContext, i);
    }
  };

  qm() {
    return this.getTypedRuleContext(QmContext, 0);
  }

  star() {
    return this.getTypedRuleContext(StarContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterEscapedwildchar(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitEscapedwildchar(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitEscapedwildchar(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NonwsnonescapedcharContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_nonwsnonescapedchar;
  }

  EXCLAMATION() {
    return this.getToken(ECLParser.EXCLAMATION, 0);
  }

  HASH() {
    return this.getToken(ECLParser.HASH, 0);
  }

  DOLLAR() {
    return this.getToken(ECLParser.DOLLAR, 0);
  }

  PERCENT() {
    return this.getToken(ECLParser.PERCENT, 0);
  }

  AMPERSAND() {
    return this.getToken(ECLParser.AMPERSAND, 0);
  }

  APOSTROPHE() {
    return this.getToken(ECLParser.APOSTROPHE, 0);
  }

  LEFT_PAREN() {
    return this.getToken(ECLParser.LEFT_PAREN, 0);
  }

  RIGHT_PAREN() {
    return this.getToken(ECLParser.RIGHT_PAREN, 0);
  }

  ASTERISK() {
    return this.getToken(ECLParser.ASTERISK, 0);
  }

  PLUS() {
    return this.getToken(ECLParser.PLUS, 0);
  }

  COMMA() {
    return this.getToken(ECLParser.COMMA, 0);
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  PERIOD() {
    return this.getToken(ECLParser.PERIOD, 0);
  }

  SLASH() {
    return this.getToken(ECLParser.SLASH, 0);
  }

  ZERO() {
    return this.getToken(ECLParser.ZERO, 0);
  }

  ONE() {
    return this.getToken(ECLParser.ONE, 0);
  }

  TWO() {
    return this.getToken(ECLParser.TWO, 0);
  }

  THREE() {
    return this.getToken(ECLParser.THREE, 0);
  }

  FOUR() {
    return this.getToken(ECLParser.FOUR, 0);
  }

  FIVE() {
    return this.getToken(ECLParser.FIVE, 0);
  }

  SIX() {
    return this.getToken(ECLParser.SIX, 0);
  }

  SEVEN() {
    return this.getToken(ECLParser.SEVEN, 0);
  }

  EIGHT() {
    return this.getToken(ECLParser.EIGHT, 0);
  }

  NINE() {
    return this.getToken(ECLParser.NINE, 0);
  }

  COLON() {
    return this.getToken(ECLParser.COLON, 0);
  }

  SEMICOLON() {
    return this.getToken(ECLParser.SEMICOLON, 0);
  }

  LESS_THAN() {
    return this.getToken(ECLParser.LESS_THAN, 0);
  }

  EQUALS() {
    return this.getToken(ECLParser.EQUALS, 0);
  }

  GREATER_THAN() {
    return this.getToken(ECLParser.GREATER_THAN, 0);
  }

  QUESTION() {
    return this.getToken(ECLParser.QUESTION, 0);
  }

  AT() {
    return this.getToken(ECLParser.AT, 0);
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  CAP_B() {
    return this.getToken(ECLParser.CAP_B, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  CAP_G() {
    return this.getToken(ECLParser.CAP_G, 0);
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  CAP_J() {
    return this.getToken(ECLParser.CAP_J, 0);
  }

  CAP_K() {
    return this.getToken(ECLParser.CAP_K, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  CAP_Q() {
    return this.getToken(ECLParser.CAP_Q, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  CAP_W() {
    return this.getToken(ECLParser.CAP_W, 0);
  }

  CAP_X() {
    return this.getToken(ECLParser.CAP_X, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  CAP_Z() {
    return this.getToken(ECLParser.CAP_Z, 0);
  }

  LEFT_BRACE() {
    return this.getToken(ECLParser.LEFT_BRACE, 0);
  }

  RIGHT_BRACE() {
    return this.getToken(ECLParser.RIGHT_BRACE, 0);
  }

  CARAT() {
    return this.getToken(ECLParser.CARAT, 0);
  }

  UNDERSCORE() {
    return this.getToken(ECLParser.UNDERSCORE, 0);
  }

  ACCENT() {
    return this.getToken(ECLParser.ACCENT, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  B() {
    return this.getToken(ECLParser.B, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  G() {
    return this.getToken(ECLParser.G, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  J() {
    return this.getToken(ECLParser.J, 0);
  }

  K() {
    return this.getToken(ECLParser.K, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  Q() {
    return this.getToken(ECLParser.Q, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  W() {
    return this.getToken(ECLParser.W, 0);
  }

  X() {
    return this.getToken(ECLParser.X, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  Z() {
    return this.getToken(ECLParser.Z, 0);
  }

  LEFT_CURLY_BRACE() {
    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
  }

  PIPE() {
    return this.getToken(ECLParser.PIPE, 0);
  }

  RIGHT_CURLY_BRACE() {
    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
  }

  TILDE() {
    return this.getToken(ECLParser.TILDE, 0);
  }

  UTF8_LETTER() {
    return this.getToken(ECLParser.UTF8_LETTER, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterNonwsnonescapedchar(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitNonwsnonescapedchar(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitNonwsnonescapedchar(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlphaContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_alpha;
  }

  CAP_A() {
    return this.getToken(ECLParser.CAP_A, 0);
  }

  CAP_B() {
    return this.getToken(ECLParser.CAP_B, 0);
  }

  CAP_C() {
    return this.getToken(ECLParser.CAP_C, 0);
  }

  CAP_D() {
    return this.getToken(ECLParser.CAP_D, 0);
  }

  CAP_E() {
    return this.getToken(ECLParser.CAP_E, 0);
  }

  CAP_F() {
    return this.getToken(ECLParser.CAP_F, 0);
  }

  CAP_G() {
    return this.getToken(ECLParser.CAP_G, 0);
  }

  CAP_H() {
    return this.getToken(ECLParser.CAP_H, 0);
  }

  CAP_I() {
    return this.getToken(ECLParser.CAP_I, 0);
  }

  CAP_J() {
    return this.getToken(ECLParser.CAP_J, 0);
  }

  CAP_K() {
    return this.getToken(ECLParser.CAP_K, 0);
  }

  CAP_L() {
    return this.getToken(ECLParser.CAP_L, 0);
  }

  CAP_M() {
    return this.getToken(ECLParser.CAP_M, 0);
  }

  CAP_N() {
    return this.getToken(ECLParser.CAP_N, 0);
  }

  CAP_O() {
    return this.getToken(ECLParser.CAP_O, 0);
  }

  CAP_P() {
    return this.getToken(ECLParser.CAP_P, 0);
  }

  CAP_Q() {
    return this.getToken(ECLParser.CAP_Q, 0);
  }

  CAP_R() {
    return this.getToken(ECLParser.CAP_R, 0);
  }

  CAP_S() {
    return this.getToken(ECLParser.CAP_S, 0);
  }

  CAP_T() {
    return this.getToken(ECLParser.CAP_T, 0);
  }

  CAP_U() {
    return this.getToken(ECLParser.CAP_U, 0);
  }

  CAP_V() {
    return this.getToken(ECLParser.CAP_V, 0);
  }

  CAP_W() {
    return this.getToken(ECLParser.CAP_W, 0);
  }

  CAP_X() {
    return this.getToken(ECLParser.CAP_X, 0);
  }

  CAP_Y() {
    return this.getToken(ECLParser.CAP_Y, 0);
  }

  CAP_Z() {
    return this.getToken(ECLParser.CAP_Z, 0);
  }

  A() {
    return this.getToken(ECLParser.A, 0);
  }

  B() {
    return this.getToken(ECLParser.B, 0);
  }

  C() {
    return this.getToken(ECLParser.C, 0);
  }

  D() {
    return this.getToken(ECLParser.D, 0);
  }

  E() {
    return this.getToken(ECLParser.E, 0);
  }

  F() {
    return this.getToken(ECLParser.F, 0);
  }

  G() {
    return this.getToken(ECLParser.G, 0);
  }

  H() {
    return this.getToken(ECLParser.H, 0);
  }

  I() {
    return this.getToken(ECLParser.I, 0);
  }

  J() {
    return this.getToken(ECLParser.J, 0);
  }

  K() {
    return this.getToken(ECLParser.K, 0);
  }

  L() {
    return this.getToken(ECLParser.L, 0);
  }

  M() {
    return this.getToken(ECLParser.M, 0);
  }

  N() {
    return this.getToken(ECLParser.N, 0);
  }

  O() {
    return this.getToken(ECLParser.O, 0);
  }

  P() {
    return this.getToken(ECLParser.P, 0);
  }

  Q() {
    return this.getToken(ECLParser.Q, 0);
  }

  R() {
    return this.getToken(ECLParser.R, 0);
  }

  S() {
    return this.getToken(ECLParser.S, 0);
  }

  T() {
    return this.getToken(ECLParser.T, 0);
  }

  U() {
    return this.getToken(ECLParser.U, 0);
  }

  V() {
    return this.getToken(ECLParser.V, 0);
  }

  W() {
    return this.getToken(ECLParser.W, 0);
  }

  X() {
    return this.getToken(ECLParser.X, 0);
  }

  Y() {
    return this.getToken(ECLParser.Y, 0);
  }

  Z() {
    return this.getToken(ECLParser.Z, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterAlpha(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitAlpha(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitAlpha(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DashContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECLParser.RULE_dash;
  }

  DASH() {
    return this.getToken(ECLParser.DASH, 0);
  }

  enterRule(listener) {
    if (listener instanceof ECLListener) {
      listener.enterDash(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof ECLListener) {
      listener.exitDash(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof ECLVisitor) {
      return visitor.visitDash(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

ECLParser.ExpressionconstraintContext = ExpressionconstraintContext;
ECLParser.RefinedexpressionconstraintContext =
  RefinedexpressionconstraintContext;
ECLParser.CompoundexpressionconstraintContext =
  CompoundexpressionconstraintContext;
ECLParser.ConjunctionexpressionconstraintContext =
  ConjunctionexpressionconstraintContext;
ECLParser.DisjunctionexpressionconstraintContext =
  DisjunctionexpressionconstraintContext;
ECLParser.ExclusionexpressionconstraintContext =
  ExclusionexpressionconstraintContext;
ECLParser.DottedexpressionconstraintContext = DottedexpressionconstraintContext;
ECLParser.DottedexpressionattributeContext = DottedexpressionattributeContext;
ECLParser.SubexpressionconstraintContext = SubexpressionconstraintContext;
ECLParser.EclfocusconceptContext = EclfocusconceptContext;
ECLParser.DotContext = DotContext;
ECLParser.MemberofContext = MemberofContext;
ECLParser.RefsetfieldsetContext = RefsetfieldsetContext;
ECLParser.RefsetfieldContext = RefsetfieldContext;
ECLParser.RefsetfieldnameContext = RefsetfieldnameContext;
ECLParser.RefsetfieldrefContext = RefsetfieldrefContext;
ECLParser.EclconceptreferenceContext = EclconceptreferenceContext;
ECLParser.EclconceptreferencesetContext = EclconceptreferencesetContext;
ECLParser.ConceptidContext = ConceptidContext;
ECLParser.TermContext = TermContext;
ECLParser.WildcardContext = WildcardContext;
ECLParser.ConstraintoperatorContext = ConstraintoperatorContext;
ECLParser.DescendantofContext = DescendantofContext;
ECLParser.DescendantorselfofContext = DescendantorselfofContext;
ECLParser.ChildofContext = ChildofContext;
ECLParser.ChildorselfofContext = ChildorselfofContext;
ECLParser.AncestorofContext = AncestorofContext;
ECLParser.AncestororselfofContext = AncestororselfofContext;
ECLParser.ParentofContext = ParentofContext;
ECLParser.ParentorselfofContext = ParentorselfofContext;
ECLParser.ConjunctionContext = ConjunctionContext;
ECLParser.DisjunctionContext = DisjunctionContext;
ECLParser.ExclusionContext = ExclusionContext;
ECLParser.EclrefinementContext = EclrefinementContext;
ECLParser.ConjunctionrefinementsetContext = ConjunctionrefinementsetContext;
ECLParser.DisjunctionrefinementsetContext = DisjunctionrefinementsetContext;
ECLParser.SubrefinementContext = SubrefinementContext;
ECLParser.EclattributesetContext = EclattributesetContext;
ECLParser.ConjunctionattributesetContext = ConjunctionattributesetContext;
ECLParser.DisjunctionattributesetContext = DisjunctionattributesetContext;
ECLParser.SubattributesetContext = SubattributesetContext;
ECLParser.EclattributegroupContext = EclattributegroupContext;
ECLParser.EclattributeContext = EclattributeContext;
ECLParser.CardinalityContext = CardinalityContext;
ECLParser.MinvalueContext = MinvalueContext;
ECLParser.ToContext = ToContext;
ECLParser.MaxvalueContext = MaxvalueContext;
ECLParser.ManyContext = ManyContext;
ECLParser.ReverseflagContext = ReverseflagContext;
ECLParser.EclattributenameContext = EclattributenameContext;
ECLParser.ExpressioncomparisonoperatorContext =
  ExpressioncomparisonoperatorContext;
ECLParser.NumericcomparisonoperatorContext = NumericcomparisonoperatorContext;
ECLParser.TimecomparisonoperatorContext = TimecomparisonoperatorContext;
ECLParser.StringcomparisonoperatorContext = StringcomparisonoperatorContext;
ECLParser.BooleancomparisonoperatorContext = BooleancomparisonoperatorContext;
ECLParser.DescriptionfilterconstraintContext =
  DescriptionfilterconstraintContext;
ECLParser.DescriptionfilterContext = DescriptionfilterContext;
ECLParser.TermfilterContext = TermfilterContext;
ECLParser.TermkeywordContext = TermkeywordContext;
ECLParser.TypedsearchtermContext = TypedsearchtermContext;
ECLParser.TypedsearchtermsetContext = TypedsearchtermsetContext;
ECLParser.WildContext = WildContext;
ECLParser.MatchkeywordContext = MatchkeywordContext;
ECLParser.MatchsearchtermContext = MatchsearchtermContext;
ECLParser.MatchsearchtermsetContext = MatchsearchtermsetContext;
ECLParser.WildsearchtermContext = WildsearchtermContext;
ECLParser.WildsearchtermsetContext = WildsearchtermsetContext;
ECLParser.LanguagefilterContext = LanguagefilterContext;
ECLParser.LanguageContext = LanguageContext;
ECLParser.LanguagecodeContext = LanguagecodeContext;
ECLParser.LanguagecodesetContext = LanguagecodesetContext;
ECLParser.TypefilterContext = TypefilterContext;
ECLParser.TypeidfilterContext = TypeidfilterContext;
ECLParser.TypeidContext = TypeidContext;
ECLParser.TypetokenfilterContext = TypetokenfilterContext;
ECLParser.TypeContext = TypeContext;
ECLParser.TypetokenContext = TypetokenContext;
ECLParser.TypetokensetContext = TypetokensetContext;
ECLParser.SynonymContext = SynonymContext;
ECLParser.FullyspecifiednameContext = FullyspecifiednameContext;
ECLParser.DefinitionContext = DefinitionContext;
ECLParser.DialectfilterContext = DialectfilterContext;
ECLParser.DialectidfilterContext = DialectidfilterContext;
ECLParser.DialectidContext = DialectidContext;
ECLParser.DialectaliasfilterContext = DialectaliasfilterContext;
ECLParser.DialectContext = DialectContext;
ECLParser.DialectaliasContext = DialectaliasContext;
ECLParser.DialectaliassetContext = DialectaliassetContext;
ECLParser.DialectidsetContext = DialectidsetContext;
ECLParser.AcceptabilitysetContext = AcceptabilitysetContext;
ECLParser.AcceptabilityconceptreferencesetContext =
  AcceptabilityconceptreferencesetContext;
ECLParser.AcceptabilitytokensetContext = AcceptabilitytokensetContext;
ECLParser.AcceptabilitytokenContext = AcceptabilitytokenContext;
ECLParser.AcceptableContext = AcceptableContext;
ECLParser.PreferredContext = PreferredContext;
ECLParser.ConceptfilterconstraintContext = ConceptfilterconstraintContext;
ECLParser.ConceptfilterContext = ConceptfilterContext;
ECLParser.DefinitionstatusfilterContext = DefinitionstatusfilterContext;
ECLParser.DefinitionstatusidfilterContext = DefinitionstatusidfilterContext;
ECLParser.DefinitionstatusidkeywordContext = DefinitionstatusidkeywordContext;
ECLParser.DefinitionstatustokenfilterContext =
  DefinitionstatustokenfilterContext;
ECLParser.DefinitionstatuskeywordContext = DefinitionstatuskeywordContext;
ECLParser.DefinitionstatustokenContext = DefinitionstatustokenContext;
ECLParser.DefinitionstatustokensetContext = DefinitionstatustokensetContext;
ECLParser.PrimitivetokenContext = PrimitivetokenContext;
ECLParser.DefinedtokenContext = DefinedtokenContext;
ECLParser.ModulefilterContext = ModulefilterContext;
ECLParser.ModuleidkeywordContext = ModuleidkeywordContext;
ECLParser.EffectivetimefilterContext = EffectivetimefilterContext;
ECLParser.EffectivetimekeywordContext = EffectivetimekeywordContext;
ECLParser.TimevalueContext = TimevalueContext;
ECLParser.TimevaluesetContext = TimevaluesetContext;
ECLParser.YearContext = YearContext;
ECLParser.MonthContext = MonthContext;
ECLParser.DayContext = DayContext;
ECLParser.ActivefilterContext = ActivefilterContext;
ECLParser.ActivekeywordContext = ActivekeywordContext;
ECLParser.ActivevalueContext = ActivevalueContext;
ECLParser.ActivetruevalueContext = ActivetruevalueContext;
ECLParser.ActivefalsevalueContext = ActivefalsevalueContext;
ECLParser.MemberfilterconstraintContext = MemberfilterconstraintContext;
ECLParser.MemberfilterContext = MemberfilterContext;
ECLParser.MemberfieldfilterContext = MemberfieldfilterContext;
ECLParser.HistorysupplementContext = HistorysupplementContext;
ECLParser.HistorykeywordContext = HistorykeywordContext;
ECLParser.HistoryprofilesuffixContext = HistoryprofilesuffixContext;
ECLParser.HistoryminimumsuffixContext = HistoryminimumsuffixContext;
ECLParser.HistorymoderatesuffixContext = HistorymoderatesuffixContext;
ECLParser.HistorymaximumsuffixContext = HistorymaximumsuffixContext;
ECLParser.HistorysubsetContext = HistorysubsetContext;
ECLParser.NumericvalueContext = NumericvalueContext;
ECLParser.StringvalueContext = StringvalueContext;
ECLParser.IntegervalueContext = IntegervalueContext;
ECLParser.DecimalvalueContext = DecimalvalueContext;
ECLParser.BooleanvalueContext = BooleanvalueContext;
ECLParser.True_1Context = True_1Context;
ECLParser.False_1Context = False_1Context;
ECLParser.NonnegativeintegervalueContext = NonnegativeintegervalueContext;
ECLParser.SctidContext = SctidContext;
ECLParser.WsContext = WsContext;
ECLParser.MwsContext = MwsContext;
ECLParser.CommentContext = CommentContext;
ECLParser.NonstarcharContext = NonstarcharContext;
ECLParser.StarwithnonfslashContext = StarwithnonfslashContext;
ECLParser.NonfslashContext = NonfslashContext;
ECLParser.SpContext = SpContext;
ECLParser.HtabContext = HtabContext;
ECLParser.CrContext = CrContext;
ECLParser.LfContext = LfContext;
ECLParser.QmContext = QmContext;
ECLParser.BsContext = BsContext;
ECLParser.StarContext = StarContext;
ECLParser.DigitContext = DigitContext;
ECLParser.ZeroContext = ZeroContext;
ECLParser.DigitnonzeroContext = DigitnonzeroContext;
ECLParser.NonwsnonpipeContext = NonwsnonpipeContext;
ECLParser.AnynonescapedcharContext = AnynonescapedcharContext;
ECLParser.EscapedcharContext = EscapedcharContext;
ECLParser.EscapedwildcharContext = EscapedwildcharContext;
ECLParser.NonwsnonescapedcharContext = NonwsnonescapedcharContext;
ECLParser.AlphaContext = AlphaContext;
ECLParser.DashContext = DashContext;
